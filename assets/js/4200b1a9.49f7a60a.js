"use strict";(self.webpackChunkondsel=self.webpackChunkondsel||[]).push([[866],{4612:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"software-bounties-are-a-dumb-idea","metadata":{"permalink":"/blog/software-bounties-are-a-dumb-idea","source":"@site/blog/2023-07-11/bounties.md","title":"Software bounties are a dumb idea","description":"Bounties don\u2019t help users fund FOSS projects","date":"2023-07-11T00:00:00.000Z","formattedDate":"July 11, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":12.71,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"software-bounties-are-a-dumb-idea","title":"Software bounties are a dumb idea","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development"],"image":"./titlecard.png","draft":false},"nextItem":{"title":"Let\u2019s Build a Core System for Custom Data Elements in FreeCAD","permalink":"/blog/build-system-for-custom-data-elements"}},"content":"## Bounties don\u2019t help users fund FOSS projects\\n\\nFunding free/libre software projects is difficult. For the last 5+ years, the knee jerk reaction has been to say \u201cjust do what Blender Foundation does, they got everything right\u201d. But contributors come with different backgrounds. Some are perfectly fine about thinking like entrepreneurs, others would rather stick to programming, or designing interfaces, or bug triaging, or writing documentation etc.\\n\\nSo there are various ideas on how to work around that and still help teams earn a living. One idea we come across really often is bounties. The general idea of a bounty is this: someone identifies an issue and offers some money to fix it, other people can bring more money, then someone implements a fix or a feature and takes the money.\\n\\nFreeCAD has a mixed history with bounties. People absolutely mean well when they suggest bounties as a way to foster development of free and open-source software (FOSS), but bounties fail way too often. Nevertheless, there\'s a popular notion that they are actually great. And thus bounties distract people from trying more realistic solutions.\\n\\nLet\'s talk about why bounties fail and what approaches to funding FOSS developers are better and why.\\n\\n## What are the bounties and where do they actually work?\\n\\nFirst and foremost, let\u2019s clarify that the bounties we are referring here to are the bounties typically proposed by users. The bounties paid by corporations for finding e.g. security vulnerabilities in their products are a whole different topic.\\n\\nThe unsophisticated look at bounties, that you can find on forums and elsewhere, is basically this: we think there\u2019s a great feature to implement, we are willing to pay what we think is a fair amount of money to cover the cost of its development, someone will absolutely volunteer, because, well, here is our money for the taking.\\n\\nAs far as these simple agreements go, it works in a limited amount of scenarios:\\n\\n- **Small bug fixes.** Many large software projects have hundreds of small issues that the core team just never has the time to fix. It could be incomplete file format support or a number of sorely missing settings. In other words, nothing that requires digging a ten thousand feet deep hole into the source code just to find out that half of the application needs to be rewritten, possibly in a new fancy programming language.\\n- **Small features.** Similarly, a new feature that doesn\u2019t affect workflows in any major way and doesn\u2019t impose major internal redesign, could be subject to a bounty.\\n- **3rd party add-ons.** Developing an add-on or a macro that automates a daunting task could be a bounty material, especially if the use case in question is not a typical one and thus would likely not be covered by what a program does by default.\\n\\nEverything else typically becomes a problem with bounties. Here is why.\\n\\n## What\u2019s a more realistic scenario?\\n\\nWhen you start treating anything as a bounty material, in a large project like FreeCAD, the bounty scenario needs to be more like this:\\n\\n1. Someone singles out an issue that could be fixed with a bounty.\\n2. The stakeholders agree that it is indeed a bounty material.\\n3. Someone spends time to evaluate the cost of a project, with a realistic error margin.\\n4. The evaluation is then adjusted for the time spent on the preliminary evaluation before any real work starts.\\n5. Both the stakeholders and the community agree that the evaluation is ok.\\n6. The community puts their money where their mouth is.\\n7. Work gets done.\\n8. The community accepts the results after some or no development iterations.\\n9.  The evaluation is then adjusted for actual development expenses, and the community accepts that and pays for it too, because the developer shouldn\'t be punished for things out of their control.\\n\\nYou\u2019ll notice that in this scenario, real-life expenses are taken into account (and paid in full), because figuring out the right solution is often 80% of the entire work. Moreover, everyone seems to agree on everything, which is so often not the case. An even more unthinkable thing happens: the bounty is adjusted for actual expenses \u2014 most bounty platforms don\u2019t even handle that, and the protocol of the adjustment is pretty much unheard of.\\n\\n## So why do bounties fail exactly?\\n\\nThere are so many reasons. Let\u2019s dig into some of them.\\n\\n### Financial reasons\\n\\nThings start to break at the very beginning. When a bounty is initiated by a user, their idea of development cost will likely be way off. **It takes a certain amount of familiarity with the source code** in question to be able to make a fair estimation, and even then there\u2019s no guarantee that larger underlying issues won\u2019t be discovered.\\n\\nOne example here would be canvas rotation in [GIMP](https://www.gimp.org/). This feature was originally implemented in a fork called [GIMP-Painter](https://github.com/seagetch/gimp-painter). A popular online platform [BountySource](https://bountysource.com/) had a bounty for that exact feature, with close to EUR 75.00 waiting for someone to backport the patch. But when one of GIMP developers started looking into this, he found out he would have to pretty much write that feature from scratch \u2014 it was _that_ much easier than normalizing the patch. What looked like a \u2018git cherry-pick\u2019 material turned out to be a hack lasting several days and looking more like a EUR 750.00 job. So when he, an experienced developer, picked the bounty, it was less than minimum per-hour wage in his country of residence. That is simply not sustainable.\\n\\n\\nAn even more staggering example of a financial failure of a bounty are MIDI tracks in [Ardour](https://ardour.org/). This essential feature was available as a bounty and was eventually developed over the course of two Google Summer of Code seasons, with multiple people participating (GSoC student, his mentor and lead developer of the project, a UX/UI designer). They spent close to 3 years working on this on and off. How much money was pledged? $1,380.\\n\\n### Organizational reasons\\n\\n**Bounties rarely scale.** While some patches only need understanding the source code and being able to design a solution, others require getting more people like UX/UI architects involved.\\n\\n**Efforts can be duplicated.** With bounties, developers are asked to take all the risks. Several people can work on the same solution at once, only one of them will be paid.\\n\\n**Payment is not guaranteed.** We already mentioned it above, but this is worth repeating: with bounties, a lot of the research work has to be done upfront. If you are willing to do that, you better be prepared to cover the research expenses somehow.\\n\\n**Decision-making can be paralyzing.** Teams where decision-making among stakeholders is broken generally have a much bigger fish to fry. Still, with multiple stakeholders who rarely agree on anything, who will make the decision whether a bounty patch should be accepted?\\n\\n\\n### Communication issues\\n\\nPart of the problem is also in **finding the right words**. Even when developers themselves set bounty ideas, they still tend to have a hard time communicating the amount of work it takes to do something and therefore the cost of it. Non-technical users have a very vague idea about the implications of writing new code or even reusing existing code. A very common request is to add a new feature by \u201cjust reusing\u201d code written in Python in a program written in C++, because \u201cit\u2019s open source, so you already have everything you need\u201d. This isn\u2019t anyone\u2019s fault, it\u2019s just explaining technical intricacies to people with less or no programming experience takes some time and practice.\\n\\n### Technical reasons\\n\\n**Bounties typically start from one person\'s use case** and thus commonly don\'t take the big picture into account. The idea might work for this one person, but could it be done better? Or is it even an actual problem? The use case might be stupid, because the user is trying to do something in a non-orthogonal way while easier solutions already exist and would work just as well. Or the workaround that is requested in the bounty might have a better implementation as a core feature. And the list goes on.\\n\\n**Bounties don\u2019t encourage incremental solutions.** The very idea of bounties is that someone does the entire work in one go, as a quick solution, takes the money, and leaves. But when the feature implies digging into the architecture, this basically means two things: either the developer works on a deep fix for a very long time and thus has a hard time rebasing to changes in the upstream branch (think of RealThunder\u2019s LinkStage branch), or they have to submit work in small batches over a long period of time, but that\u2019s not what bounties are generally expected to be.\\n\\n**Bounties favor outcomes that maximize bounty for minimum effort.** So they don\u2019t encourage elegant, testable code or unit testing. In the end, this bites everyone in the neck \u2014 both users and developers.\\n\\n## If not bounties, then what?\\n\\nFinally, let\u2019s talk about some of the better approaches at community funding of development. No single way is perfect, but that\u2019s not the point. By trying things that actually work we all can come up with new, better solutions. We are not talking about the \u201cpaid support\u201d model here though, plenty has already been said about that over the past few decades.\\n\\nOne of the very basic ideas here is that \u2014 especially in large projects \u2014 development ideas in any form should be verified by respective core teams. So it\'s best when the project has a process of idea verification between multiple stakeholders.\\n\\n### Crowdfunding and stretch goals\\n\\nOne example of idea verification is what the Krita team does whenever they run a crowdfunding campaign ([it\u2019s been a while though](https://www.kickstarter.com/projects/krita/krita-free-paint-app-lets-make-it-faster-than-phot/description)). They collect user requests, sit down, go through each of them, take the ones that make sense, figure out how much time each would take to implement, then take the ones that passed validation as relatively easy fixes/features and group them into stretch goals and set a price to it. That price is already adjusted for the time it took them to do the verification. So far, their estimations have been very close to actual expenses.\\n\\nIf they would not get sponsoring for stretch goals, the verification expenses would be covered by other sources of income like sales on [Steam](https://store.steampowered.com/app/280680/Krita/) and [Microsoft Store](https://apps.microsoft.com/store/detail/krita/9N6X57ZGRW96?hl=en-rs&gl=rs&rtc=1). This means that any team following in their footsteps better have a stable source of income to cover the expenses of the work they do upfront. This works best in teams that organized themselves into a non-commercial organization and have a diversified pool of income sources (think Blender Foundation and, well, FreeCAD now).\\n\\n### Developer fund\\n\\nA developer fund can be created and used in multiple ways. It can be very similar to crowdfunding, especially if you look at what the Kdenlive team [has been doing](https://kdenlive.org/en/fund/).\\n\\nThey chose who would be working on features and decided to hire people who are already active in the project and had the opportunity to devote part of their time to this work without jeopardizing their other obligations.\\n\\nThen they came up with a short list of really useful features to implement. They balanced them between roadmap items and things that users requested in their discussion rooms. They also only chose tasks that they knew they would be able to solve based on their team\u2019s expertise.\\n\\nThen they estimated the price by decomposing proposed features into smaller tasks and deciding to fund 50% of the time that accomplishing that work would require.\\n\\nThe campaign was launched with KDE e.V. and their Donorbox-based system. Funds were collected within the first month of the campaign, while it was supposed to run for three months. Some of their 2023 goals outlined on the fund page have already been reached.\\n\\nBut a fund can also be used to hire full-time developers or issue part-time development grants. Blender Foundation famously [does both](https://fund.blender.org/grants/). Blender\u2019s fund is also filled from [multiple sources](https://fund.blender.org/about/) \u2014 both corporate sponsorships and personal donations, one-time as well as recurring.\\n\\n### Grants\\n\\nThe idea behind a grant is that an organization behind a FOSS project builds a relationship with one or more community members by hiring them to do a specific one-time job: implement a feature, modernize an aging part of the source code, write documentation, design new UI etc.\\n\\nWe\u2019ve already mentioned Blender Foundation as one of the organizations that issue grants, but there\u2019s obviously more. The Inkscape team has recently hired a full-time senior developer to work on the GTK4 port of the vector graphics editor for several months. And the FreeCAD Project Association is no stranger to grants either: [two grants](https://fpa.freecad.org/programs/fpadf-announcement) were issued last year, to RealThunder (the toponaming fix) and to Ajinkya Dahale (spline handling in Sketcher).\\n\\n### Contract development\\n\\nThere\u2019s a certain peace-of-mind element in doing contracted work as compared to working for a bounty. It\u2019s easier to discuss scope, you can charge for the work in a [time-and-materials](https://en.wikipedia.org/wiki/Time_and_materials) fashion etc. You still have to wrangle stakeholders \u2014 there\u2019s no way around that (and there likely shouldn\u2019t be), but all your extra expenses will typically be covered by a clause in the contract.\\n\\nIf you want an example, look no further: the Path workbench in FreeCAD was originally the subject of a contracted job. This project involved a lot of upfront conversation with FreeCAD maintainers about changing the core to allow for rendering toolpaths. The core features were specifically implemented in a way that would allow 3rd-party workbenches and alternative user interfaces to be created for CNC-related use cases.\\n\\n### The paid binaries model\\n\\nTo some extent, the Ardour project pioneered this approach to funding development: they came up with an idea that users who can\u2019t build Ardour for themselves (it\u2019s more difficult on Windows and macOS) can pay a small monthly fee that is a fraction of what users pay for proprietary digital audio workstations. This alone pays the bills of two full-time developers and some occasionally helpful contributors.\\n\\nTwo more similar projects, [Zrythm](https://www.zrythm.org/en/index.html) and [Radium](https://users.notam02.no/~kjetism/radium/), use the same funding model \u2014 most likely with less success. But this has more to do with oversaturation of the digital audio workstation market.\\n\\n### The open-core model\\n\\nFinally, core team members can start an LLC and provide a fork/modification of the original project with added value. \\n\\nSome of the very obvious if geeky examples here are [GitLab](https://about.gitlab.com/), [Redis](https://redis.io/), and [Docker](https://www.docker.com/). On a less technical side, that would definitely be the [MuseScore.com](https://musescore.com/) service built for the community of [MuseScore](https://musescore.org/) users, or the [audio.com](https://audio.com/) cloud storage service that has been integrated into Audacity. We are doing a very similar thing with Ondsel, except we don\u2019t own FreeCAD but merely contribute to it.\\n\\n## In conclusion\\n\\nBounties are a lousy foundation for sustainable development of large projects like FreeCAD. They typically represent a gross underestimation of real work required to solve a problem, commonly miss a bigger picture, and encourage worst software development practices.\\n\\nGrowing larger is fun but also really overwhelming. Most ambitious projects that aim to stay afloat will have to experiment with different approaches to getting funded on a regular basis and come up with their own mix of solutions. It\u2019s that or perish."},{"id":"build-system-for-custom-data-elements","metadata":{"permalink":"/blog/build-system-for-custom-data-elements","source":"@site/blog/2023-06-24/customDataElements.md","title":"Let\u2019s Build a Core System for Custom Data Elements in FreeCAD","description":"One of the sorely missing features in FreeCAD is a convenient system for creating custom data elements and interacting with them.","date":"2023-06-24T00:00:00.000Z","formattedDate":"June 24, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":12.795,"hasTruncateMarker":false,"authors":[{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"},{"name":"Ajinkya Dahale","title":"Contributing Writer","url":"https://github.com/AjinkyaDahale","Image_url":"https://avatars.githubusercontent.com/u/4316933?v=4"}],"frontMatter":{"slug":"build-system-for-custom-data-elements","title":"Let\u2019s Build a Core System for Custom Data Elements in FreeCAD","authors":[{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"},{"name":"Ajinkya Dahale","title":"Contributing Writer","url":"https://github.com/AjinkyaDahale","Image_url":"https://avatars.githubusercontent.com/u/4316933?v=4"}],"tags":["freecad","development"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"Software bounties are a dumb idea","permalink":"/blog/software-bounties-are-a-dumb-idea"},"nextItem":{"title":"FreeCAD Needs A Better Materials System","permalink":"/blog/freecad-needs-a-better-materials-system"}},"content":"One of the sorely missing features in FreeCAD is a convenient system for creating custom data elements and interacting with them.\\n\\nA common use case is constraining multiple features in a sketch to the same value. Instead of tweaking every instance of a horizontal distance constraint, you would create a custom data element (or property) called \u201cLength\u201d and then reference it via the Expression Engine. Then every time you change the value of that custom element, the entire sketch is updated automatically.\\n\\nThis is an extremely handy feature, so there is a strong community demand for this. Most recently, it was brought up twice during the [\\"Complaint Session\\"](https://forum.freecad.org/viewtopic.php?t=75768) at FOSDEM. And even a quick glance at the larger CAD market suggests that it\u2019s useful for more than just a group of FreeCAD users: Inventor, SolidWorks, NX, Creo all have a way to create a custom data element and use it with expressions.\\n\\nMuch like with [assemblies](https://ondsel.com/blog/default-assembly-workbench-1), the community made several attempts to create a solution, but all of them have various shortcomings which we\u2019ll discuss below.\\n\\nFixing this benefits the entire FreeCAD ecosystem. Users would get a convenient tool for manipulating their designs, it would be immediately available and maintained as an inherent part of the project. For companies like Ondsel who want to build around FreeCAD, this system is the prerequisite for integrating it into external services.\\n\\nA large part of this system is therefore parameters introspection. This is a complicated topic that probably deserves a separate discussion. But the basic idea is this. When you design a real-life part, some of the custom data elements you create are convenience tools like in the use case above. They contribute to making the design truly parametric yet do not need to be accessed and manipulated externally. But when FreeCAD is used in headless mode in a pipeline, whatever external tools you rely on better be able to tell which properties they need to expose to the user (dimensions, color, material etc.) and which ones have to be omitted. Essentially, custom parameters need to carry some useful context.\\n\\nSo let\u2019s talk about existing options, where they shine and fail, and what we think a sensible solution would look like based on what we learned.\\n\\nIn this post, we are also introducing another new author. Ajinkya Dahale has been a FreeCAD contributor since 2016. His contributions are mostly in the Sketcher, PartDesign, and FEM workbenches. Ajinkya\u2019s latest major involvement, improving B-spline [constraints](https://forum.freecad.org/viewtopic.php?t=71130) and [construction](https://forum.freecad.org/viewtopic.php?t=75950), was sponsored by the FreeCAD community both directly and [via the FreeCAD Project Association](https://blog.freecad.org/2022/09/26/first-fpa-sponsored-development/). He also received a [grant from the Open Toolchain Foundation](https://opentoolchain.org/2023/02/26/FOSDEM-2023/). Since early 2023, he has been working for Ondsel and continues hacking on FreeCAD.\\n\\n## Elements or Properties?\\n\\nBefore we get to the gist of the topic, we need to explain why we use the terminology \u201ccustom data elements\u201d and not \u201ccustom properties\u201d when we talk about the future system. Calling this type of data a property implies a particular solution \u2014 storing this data in the project tree and making it accessible for editing in the Combo View dock. But we are not yet certain this is exactly the way to do this. For now, we are using the term \u201ccustom data elements\u201d.\\n\\n## Benchmark\\n\\nTo understand how well various existing solutions work, we need a kind of a benchmark \u2014 a realistic workflow that allows working with custom data elements efficiently. We can describe it with a [user story](https://en.wikipedia.org/wiki/User_story):\\n\\n1. The user begins to set the constraint and realizes they would like to make the value a custom field. The constraint panel would have a button to add a custom field.\\n2. The button would allow the user to add a new item to a collection of custom data elements.\\n3. The result would be returned and inserted via the Expression Engine.\\n\\nThis workflow obviously applies to the Sketcher workbench, but there are many more use cases for custom data elements. You could be using them when designing a house, a 3D-printable part, or a part for CNC milling, or a thousand more things. So this better be a core feature.\\nThere are multiple possible approaches to exposing custom data elements to users in the UI \u2014 pressing a shortcut to activate a floating window, editing an object in the document tree, or editing a value in a new tab in the property viewer. But for now, let\u2019s call this a benchmark and see how existing solutions stack up against it.\\n\\n## Existing solutions\\n\\nWe found 4 attempts to implement this feature.\\n\\n### The Spreadsheet workbench\\n\\nThis WB was designed for many uses, so it\u2019s not entirely fair to call it a custom data elements system. The workbench has two major benefits: it\u2019s both powerful (e.g. cells in the spreadsheet can contain expressions) and it\u2019s already part of FreeCAD, available immediately after program\u2019s installation.\\n\\n![The Spreadsheet workbench in FreeCAD](spreadsheet-wb-in-freecad.png)\\n\\n\\nThe way spreadsheets work in FreeCAD, this is the assumed workflow:\\n\\n1. The user exits Sketcher\\n2. Switches to the Spreadsheet workbench\\n3. Creates a spreadsheet\\n4. Double-clicks the spreadsheet in the tree\\n5. Selects a cell and enters a value\\n6. Selects the cell a second time\\n7. Clicks the button to set an alias\\n8. Types in the alias name and presses OK\\n9. Double-clicks the sketch icon in the tree to reopen Sketcher\\n10. Selects the constraint and uses the Expression Engine to reference the aliased cell\\n\\nCompared to the benchmark above, this isn\u2019t very user-friendly. FreeCAD contributors attempted to make their life easier by [simplifying alias creation](https://wiki.freecad.org/Macro_EasyAlias), but that fixes only a small portion of issues with spreadsheets. While we definitely can improve its subpar performance and UX/UI, tables are still not very convenient for extracting values without launching FreeCAD and using its GUI.\\n\\n### Property Bag in Path\\n\\nThis feature is part of the default FreeCAD\u2019s Path workbench. You can create groups of properties, which is convenient when you have a lot of those, and there is a sensible choice of property types available.\\n\\n![Groups of properties in Property Bag](propertybag-groups-of-properties.png)\\n\\n\\nBut while custom properties in the \u201cbag\u201d are perfectly accessible from other workbenches via the Expression Engine, you can only create and modify properties when you are in the Path workbench. So it\u2019s not competitive against the benchmark. This feature is also written in Python, so it\u2019s entirely possible it would have to be ripped out of Path and rewritten in C++.\\n\\n![Editing properties in Property Bag](property-bag-editing-properties.png)\\n\\n\\n### The DynamicData workbench\\n\\nThis is a [3rd party add-on](https://github.com/mwganson/DynamicData) that allows creating project-level custom properties accessible through the Expression Engine from any workbench. You can create any number of containers of properties, one per each object if you like. There is a very long list of property types available.\\n\\n![The DynamicData workbench in FreeCAD](dynamic-data-ui.png)\\n\\nWorkflow-wise, this is not a very convenient solution. There are some cosmetic UX issues (e.g. you have to switch to this workbench first for the toolbar to show in other workbenches), but we can deal with those. What\u2019s worse is that properties can\u2019t be added on the fly, while you are sketching in 2D.\\n\\nTheoretically, DynamicData could work as a foundation for a better solution. However:\\n\\n- The WB is written in Python, but FreeCAD needs this as a core feature, hence it should most likely be C++ code.\\n- The entire feature set is only accessible via GUI, which is not great for running FreeCAD in headless mode.\\n\\n### UserData in Assembly 4\\n\\nThe variables system in the Assembly 4 workbench is designed primarily for creating animations in the viewport. Here is how it works:\\n\\n1. Create a variable like \u201crotation\u201d\\n2. Pick a part, set its rotation value to use the variable via the Expression Engine\\n3. Open the animation dialog, set start/end values, set step size\\n4. Run the animation\\n\\n![UserData in Assembly 4](assembly4-user-data.png)\\n\\n\\nThe core system behind this feature is capable. The list of possible data types can (and should) be extended, but it\u2019s good for a start. There are some small issues. E.g. there\u2019s no way to edit an existing variable, the user can only create and delete them.\\n\\nA much larger issue is that the feature is workbench-specific and written in Python. Thus, it would have to be extracted from the Assembly 4 code and most likely rewritten in C++. Then we\u2019d have to write an entirely new UI on top of it.\\n\\n### Summary\\n\\nReusing any of the existing solutions we explored seems unlikely for the following reasons:\\n\\n1. For the most part, they are not part of the FreeCAD core. The DynamicData and Assembly 4 workbenches need to be installed separately, and in case of Property Bag, the functionality needs to be moved out of the Path workbench and generalized.\\n\\n2. None of the 4 solutions here are accessible from C++ code, so no core feature can use custom data elements. So far, this hasn\'t really been an issue, but it\u2019s best to build future-proof core features.\\n\\n3. For the Python interface, there should be some sort of keyword-based system to set these values to these custom data elements. This way users can skip certain parameters like description.\\n\\n4. Custom data elements in existing solutions carry no context. This makes it difficult for an external tool to sift through available parameters and pick the ones that should be exposed to users in the UI of that external tool. This can be resolved by making the user create a specific kind of document object or name it a certain way, but it would put an unnecessary cognitive burden on users.\\n\\n5. The Spreadsheet workbench is the only core feature among the ones we studied. Spreadsheet serves and important role and isn\u2019t going anywhere.  However its UX is so far from the assumed workflow and so inaccessible from CLI that we shouldn\u2019t try to force it to serve this purpose.  In fact, Spreadsheet may be come even more useful in conjunction with a core data element feature.\\n\\nIn a nutshell, there\u2019s no existing solution that can be used as-is.\\n\\n## What The Solution Should Look Like\\n\\nAfter analyzing existing solutions (including those of proprietary CAD programs), some obvious use cases, as well as user requests, we came up with the following list of requirements for a native custom data elements system in FreeCAD.\\n\\nArchitecturally, there should be a single container with a possibility to create groups of data elements inside it.\\nSecondly, there\u2019s the topic of element types. The system should support all core data types: Length, Angle, Enum, String etc.\\n\\nWhen we start thinking about this from users\u2019 standpoint, this is where things get a little vague. There are benefits to having elements as properties in the project tree, but a kind of a dedicated registry or central management tool  (SolidWorks-style) makes about as much sense. What we are certain of is that:\\n\\n- Adding new data elements from Sketcher and other WBs should be simple and obvious.\\n- Tooltips for data elements should be possible so that collaborators could figure out your project easily.\\n- Expression Engine should be supported.\\n\\nWhen we talk about adding data elements easily, what we mean is that users should be able to create those from anywhere in the application and in the middle of a transaction like editing a sketch. Think of the way you can create named parameters in Inventor by just typing \u201cLength=530mm\u201d in the constraint input box to create a linked \u201cLength\u201d property and setting it to 530mm.\\n\\nMoreover, users should be able to create and access custom data elements through CLI so that models could be adjusted when FreeCAD is running remotely, and possibly automated as macros. Example: load a gridfinity template, set the number of height units, choose a color, output an STL, send it to OctoPrint.\\n\\nFinally, on a more technical note, users should be able to create and access custom data elements from code in either C++ or Python. That is, the feature should be accessible for core features, default workbenches, and 3rd party workbenches. This can be ensured by creating the framework in C++ and adding Python bindings.\\n\\n## Our Proposal\\n\\nWe see this as a multi-stage project with work on expanding the FreeCAD file format accordingly, programming a C++ class and Python bindings, as well as designing and implementing the user interface. We have already settled on the document structure for our proposal \u2014 a single container with custom data elements, just like we mentioned above.\\n3rd-party developers would be able to use C++ or Python to access custom data elements: get a list of them, create a new data element, or get an existing one and then set a value to it. This is how we picture the custom data elements can be accessed through Python:\\n\\n```\\nmy_doc = App.ActiveDocument()\\nmy_doc.CustomData # The container for Custom Data elements\\nmy_doc.CustomData.setProperty(\u201cApp::PropertyFloat\u201d, name=\u201dmyDim\u201d, 1.23) # Setting a double\\nmy_doc.CustomData.getProperty(\u201cmyDim\u201d) # Getting the value of the property\\nmy_doc.CustomData.setProperty(\u201cApp::PropertyString\u201d, \u201cmyText\u201d, \u201chello\u201d, desc=\u201dText to be printed on name plate\u201d) # Setting a string with description\\nmy_doc.CustomData.setProperty(\u201cApp::PropertyEnum\u201d, \u201cmyEnum\u201d, value=0, enum_values=[\u201cOption1\u201d, \u201cOption2\u201d, \u201cOption3\u201d]) # Setting an enum along with the values it can take. Selected value is \u201cOption1\u201d.\\nmy_doc.CustomData.setProperty(\u201cApp::PropertyEnum\u201d, \u201cmyEnum\u201d, value=\u201dOption1\u201d, enum_values=[\u201cOption1\u201d, \u201cOption2\u201d, \u201cOption3\u201d]) # Setting an enum along with the values it can take (alternative)\\n```\\n\\nAn (incomplete) example implementation is available in [this branch](https://github.com/Ondsel-Development/FreeCAD/tree/core-custom-data).\\nWe think that users who rely on external tools for interacting with FreeCAD projects should be able to make a choice which custom data elements should be seen as private and which should be seen as public. This distinction is somewhat artificial, because everything is open in FreeCAD files. But it provides a simple way for external tools to expose only a subset of custom data elements \u2014 the ones that are supposed to be interacted with in UI. This is what we want Ondsel\u2019s cloud service to do when it comes to mass customization of designs.\\n \\nWe are still figuring out the interaction model and the UI. The quick and dirty solution is to add those to a new tab called \u201cCustom\u201d right next to \u201cView\u201d and \u201cData\u201d in the left dock. This can work as a simple temporary solution, but we think the View/Data separation is a superficial one and needs to be done away with (a story for another day). When a user uploads a document to our web view and sets only one dimension of the project to \u2018public\u2019 (e.g. only the length of a box but not its width or height), we expect that other users viewing this document would get to control only that dimension.\\n\\nHere is an early UI wireframe:\\n\\n![Early UI wireframe for custom data elements](preliminary-ui-wireframe.png)\\n\\nThere are other approaches to designing the interaction, like what Inventor and Fusion 360 do with the properties table.\\n\\n## How You Can Get Involved\\n\\nWe are interested in general feedback about our proposal, but we are also specifically looking for your input on these two topics:\\n\\n- What are your use cases for custom data elements? What kind of problems do you try to solve with those?\\n- What are your frustrations with both existing solutions in FreeCAD and other CAD programs?\\n\\nThis would help us build a sensible interaction model and user interface for custom data elements in FreeCAD. Please provide your feedback in the [issue tracker](https://github.com/Ondsel-Development/FreeCAD/issues/5)."},{"id":"freecad-needs-a-better-materials-system","metadata":{"permalink":"/blog/freecad-needs-a-better-materials-system","source":"@site/blog/2023-06-09/materials.md","title":"FreeCAD Needs A Better Materials System","description":"FreeCAD has a basic implementation of a materials system. While it works in some use cases, we think it can be vastly improved to become a lot more useful. Let\u2019s discuss what\u2019s already available, what\u2019s missing, and what\u2019s a possible way forward with this. But first, why are we even discussing it?","date":"2023-06-09T00:00:00.000Z","formattedDate":"June 9, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":10.165,"hasTruncateMarker":false,"authors":[{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"},{"name":"Dave Carter","title":"Contributing Writer","url":"https://github.com/davesrocketshop","Image_url":"https://avatars.githubusercontent.com/u/38090157?v=4"}],"frontMatter":{"slug":"freecad-needs-a-better-materials-system","title":"FreeCAD Needs A Better Materials System","authors":[{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"},{"name":"Dave Carter","title":"Contributing Writer","url":"https://github.com/davesrocketshop","Image_url":"https://avatars.githubusercontent.com/u/38090157?v=4"}],"tags":["freecad","development"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"Let\u2019s Build a Core System for Custom Data Elements in FreeCAD","permalink":"/blog/build-system-for-custom-data-elements"},"nextItem":{"title":"What does it mean that my GitHub project has 900 open issues?","permalink":"/blog/better-github-issues"}},"content":"FreeCAD has a basic implementation of a materials system. While it works in some use cases, we think it can be vastly improved to become a lot more useful. Let\u2019s discuss what\u2019s already available, what\u2019s missing, and what\u2019s a possible way forward with this. But first, why are we even discussing it?\\n\\nWe are introducing a new co-author in this post. Dave Carter has been a FreeCAD user since v0.16 (primarily for rocketry and 3D printing). He worked over 40 years as a software developer in government, supply chain, and automotive industries. He is the main person behind the [Rocket](https://github.com/davesrocketshop/Rocket) workbench that helps design model and amateur rockets and components for them. Dave volunteered to lead the effort creating an updated materials system for FreeCAD and has been actively working towards that goal for the past several weeks.\\n\\n## Why A Good Materials System Is Important\\n\\nMaterials are a lot more than the color of solids in the viewport. As engineers, we need basic mechanical properties like density to calculate mass. We need advanced mechanical properties, as well as thermal and electrical properties to run various simulations (think finite element analysis). We need vendor-specific data to make an estimation of material cost. We also need materials to make commercial-grade rendering easy.\\n\\nSo a good materials system needs a database of materials with mechanical, thermal, electrical, architectural, and other properties. But it goes even further than that.\\n\\nWe know that materials behave differently depending on environment conditions. For example, we know that Young\'s modulus of metals decreases when temperature increases. So a materials system has to provide tools to build relationships between different material properties. Otherwise simulations won\u2019t provide usable results.\\n\\nIs that all? Nope. A concrete wall will have a first coat and then a finish. A model rocket will have a primer paint on top of the body, and then a coat of spray paint on top of parts of the primer paint. So a good materials system has to be able to deal with compound materials / multi-materials.\\n\\nIt\u2019s also a great idea to have a more or less uniform UX/UI for working with materials in different scenarios. An architect by trade can be a tinkerer in their spare time, making Arduino-based devices, small home automation projects, and the like. They would appreciate not having to re-learn everything just because it\u2019s a different set of tools in the same CAD system they use.\\n\\n## So What\u2019s Wrong With What We Already Have?\\n\\nLet\u2019s take a closer look at what\u2019s currently available in FreeCAD. A major part of the existing materials system is the Material Editor:\\n\\n![Existing materials editor](current-materials-editor.png)\\n\\nIt relies on a small catalog of materials (slightly over 100) available throughout FreeCAD. For each material, it\u2019s possible to set properties in several categories:\\n\\n* Mechanical\\n* Thermal\\n* Electrical\\n* Architectural\\n* Rendering\\n* Vector Rendering (hatching)\\n* Cost (vendor-specific)\\n* User-defined\\n\\nCustom properties can be added to the user-defined category to accommodate for workflow specifics.\\n\\nThe existing materials system is currently used in FEM and Arch workbenches that are available by default, as well as in 3rd-party workbenches like [Rocket](https://wiki.freecad.org/Rocket_Workbench) and [Render](https://github.com/FreeCAD/FreeCAD-render).\\n\\nAll this is a great start. But there are also various issues. Here are just some of the more obvious ones:\\n\\n* It is impossible to set a different material to every face of a part. You can have a piece of metal or block of concrete with a coating on one side and nothing at all on the other one.\\n* Multi-materials are only possible in the Arch workbench, but that is not enough. Any metallic or plastic solid and a paint job already make it _at least_ two materials.\\n* It should be possible to override properties set in the material card in a more or less uniform way. Maybe a variation of a material has slightly different mechanical or thermal properties, or maybe a building materials supplier is setting a different cost on a per-project basis.\\n* Material cards do not account for real-life behavior of materials, e.g. some physical properties may vary with temperature. A common use case is [describing different CTEs at different temperatures for FEM](https://forum.freecad.org/viewtopic.php?p=461640&sid=cb795e11170e14ba824af3b437645500#p461640). Moreover, the existing system only allows for isotropic materials that behave consistently regardless of direction. Orthotropic materials, such as wood, have different characteristics depending on direction: against the grain is stronger than with the grain.\\n* Texture mapping is separate from the material settings and only allows loading a texture file, with no positioning settings.\\n* Material information is not accounted for when importing/exporting from/to some file formats.\\n* There are no built-in functions to use the material data to make basic calculations such as weight, or cost.\\n* There\u2019s no easy way to tell which part of an assembly doesn\u2019t have an assigned material.\\n* The material editor has no UI for categories. It works as long as the list of materials is relatively small, but this will become a problem once the list is expanded.\\n\\nThis is just scratching the surface.\\n\\n## Previous Attempt at Fixing The Materials System\\n\\nThe topic of improving the existing materials system has been brought up before. Around 2016, a contributor named Eivind Kvedalen attempted to fix some of the issues, in particular: arbitrary properties, per-face materials, infrastructure for a material database. He made two commits in a public fork on GitHub, and continued the discussion. But eventually this initiative went into slumber. Right now, the fork needs further work to even compile.\\n\\nAs is usual in the FreeCAD ecosystem, people also attempted to come up with various workarounds. The 3rd-party [Arch Textures](https://github.com/furti/FreeCAD-ArchTextures) workbench exists solely to work around the limitations of the built-in texture mapper. The [FCinfo](https://github.com/andreasBihlmaier/FreeCAD) macro helps make basic calculations based on mechanical properties.\\n\\n## What The Updated Materials System Should Be Like\\n\\nHaving studied the subject, here\u2019s the gist of what we think the new system should be like.\\n\\nFreeCAD needs a **way to store materials data** in the project. If you created an assembly and used materials with custom properties (even if it\u2019s just the material cost because you got a discount from your supplier), your team or contractors should be able to open that file and see assigned materials and related data.\\n\\nThere have to be **per-face / per-solid materials and multi-materials**. This shouldn\u2019t be an Arch-specific feature like it is now, it has to be available for all workbenches.\\n\\nThere needs to be a **more uniform UX/UI for selecting material and overriding its properties** one way or another. The set of properties may vary between workbenches, but UI for overriding should follow the same design pattern.\\n\\nIt would be an absolute must to have an easily** accessible calculation of basic part properties**. Users should be able to easily see the weight of one part or an entire assembly.\\n\\nWe definitely see interest in having **texture mapping and probably hatching** as part of a material, with advanced settings. Advanced UV editing could be done by 3rd-party tools, but the basics of texture mapping should be there.\\n\\nThe **material editor has to be enhanced**: materials should be pre-organized into categories, have tags, rendering preview etc. The list of materials should be searchable.\\n\\nThere\u2019s a strong requirement to be able to **set relationships between properties for realistic simulations**. There are multiple approaches to do that. We can do it with curves (like SolidWorks does) or by making multiple entries with an associated temperature range (or pressure, or whatever).\\n\\nIt\u2019s generally a good idea to have **easy access to up-to-date vendor data on materials** where possible. There are many existing materials systems, [here](https://github.com/Moult/IfcClassification) are just some of those in the architecture department. We know that accessing up-to-date information won\u2019t be easy. When APIs even exist, they are typically not public or documented. And even there we\u2019d be extremely cautious, because setting cost implies responsibility, and FreeCAD needs to be very clear where that responsibility is.\\n\\n## The Way Forward\\n\\nBecause of how far-reaching the implications of the materials system are, we think bringing it to the state of the art needs to be a community project with all major stakeholders involved.\\n\\nThere\u2019s a small task force building around this project.\\n\\nOndsel made a start on analyzing what makes a materials system great, explored implementations in various other CAD programs (SolidWorks, Inventor, Onshape, Revit, Archicad), studied the existing implementation in FreeCAD, and put together an initial list of requirements.\\n\\nDave Carter, the developer behind the Rocket workbench, volunteered to lead the effort and already [made good progress](https://forum.freecad.org/viewtopic.php?style=4&p=685834#p685834) towards designing a better material editor and replacing the old material cards storage system with human-readable YAML files.\\n\\n![New materials editor](new-materials-editor-alpha.png)\\n\\nThe first stage of this project is just that: new materials editor UI, new file format for material cards, and over 600 categorized materials. It\u2019s a work in progress, you can see the updated material card UI on the screenshot above. \\n\\nThe second stage will involve physical properties, relationships between those, and appearance settings.\\n\\nAfter that, work has to be done on finalizing the UI, polishing icons, writing documentation etc.\\n\\nThere are also a number of considerations to be made, depending on feedback from users and developers. More on that below.\\n\\nOnce we collect more information, we will analyze it and submit a public proposal in FreeCAD\u2019s issue tracker for everyone to see and comment on. We\u2019ll then do our best to help all interested parties to complete this project. We discussed it with the FPA, and a grant is possible.\\n\\n## What\u2019s Ondsel\u2019s Interest In A Materials System\\n\\nThere are multiple reasons for Ondsel to be involved with (and lead) this initiative.\\n\\nOndsel\u2019s platform is primarily FreeCAD users, so the better FreeCAD is, the more users it has, the more customers the company gets (and thus the more Ondsel can invest into improving FreeCAD further). So the company needs FreeCAD to be excellent in every aspect. A great materials system is part of that.\\n\\nOndsel is also considering implementation of some features like commercial-grade ray-tracing in the online service that will directly depend on a materials system.\\n\\nThus the company is interested in working with anyone willing to implement a better materials system and support them as much as we can. Dave made an impressive start on revamping the entire system, but he will need help.\\n\\n## What You Can Do\\n\\nThere definitely are ways you can be part of this initiative.\\n\\nIf you are a user, we are interested to know more about your workflow specifics:\\n\\n* How do you use materials in FreeCAD or elsewhere?\\n* What materials-dependent simulations do you run? What material properties do they rely on?\\n* What type of materials do you deal with on a daily basis? What\u2019s their variety? How often do you add custom materials?\\n* Are there specific material vendors you deal with? Do they make it easy to access materials data?\\n* Do you use the Appearance dialog to change the look of parts? How would replacing it with something actually based on materials\u2019 appearance settings affect your workflow? \\n* What file formats do you import/export that require materials support?\\n* What are your appearance/texturing requirements for materials?\\n* What are your sources of material physical properties?\\n* Would you be more comfortable with a purely offline materials database, an online materials database like [Materials Project](https://materialsproject.org/), or a combination of both?\\n\\nIf you are a workbench/macro developer, what specific requirements for a materials system does the materials team need to know about? If you are a developer with experience programming materials\u2019 look and feel, please contact Dave.\\n\\nWe\u2019d love to have you join the [discussion](https://forum.freecad.org/viewtopic.php?style=4&t=78242). If you agree that better materials will help make FreeCAD great and don\'t have any feedback to offer, please consider [donating to the FPA](https://wiki.freecad.org/Donate) so that more contributors get support for improving FreeCAD.\\n\\nAnd last but not least, Dave Carter\u2019s initiative to take matters into his own hands is precisely the kind of practical approach to improving FreeCAD that we\u2019d love to see more of. If you are a user who shares this view, please consider donating to FreeCAD Project Association\u2019s [developer fund](https://fpa.freecad.org/programs/fpadf-announcement), so that active contributors getting funding would become the norm."},{"id":"better-github-issues","metadata":{"permalink":"/blog/better-github-issues","source":"@site/blog/2023-05-30/githubissues.md","title":"What does it mean that my GitHub project has 900 open issues?","description":"Discussions about FOSS issue practices often center around getting issue creation right. Have we set contributors up for success with guidelines and issue templates? Are we asking them to look at existing issues for their proposal first? These are bare minimum requirements.","date":"2023-05-30T00:00:00.000Z","formattedDate":"May 30, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":5.27,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"/img/Rebecca-Dodd-profile.JPEG","imageURL":"/img/Rebecca-Dodd-profile.JPEG"}],"frontMatter":{"slug":"better-github-issues","title":"What does it mean that my GitHub project has 900 open issues?","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"/img/Rebecca-Dodd-profile.JPEG","imageURL":"/img/Rebecca-Dodd-profile.JPEG"}],"tags":["freecad","development"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"FreeCAD Needs A Better Materials System","permalink":"/blog/freecad-needs-a-better-materials-system"},"nextItem":{"title":"FreeCAD\'s unpredictable release schedule hurts users and developers","permalink":"/blog/freecad-unpredictable-release-schedule-hurts-users-and-developers"}},"content":"Discussions about FOSS issue practices often center around getting issue creation right. Have we set contributors up for success with guidelines and issue templates? Are we asking them to look at existing issues for their proposal first? These are bare minimum requirements. \\n\\nWe act like someone creates an issue and throws it over the wall, after which someone else picks it up to move it forward\u2014all of which hinges on writing a good issue. If the issue goes stale, it wasn\'t a good issue, right?\\n\\nBut issue creation should be _the start of a conversation_, and for that, maintainers should be heavily involved in collaborating on issues. [Stale PRs](http://danluu.com/discourage-oss/) get a lot of airtime, but issues habitually going stale is just as bad for open source project velocity.  Effective issues\u2014the ones that actually result in meaningful change\u2014invite conversation and encourage action, and maintainers can play more of a role in fostering that type of issue than you might think.\\n\\n## What makes a good issue?\\n\\n[FreeCAD\'s contributing document](https://github.com/FreeCAD/FreeCAD/blob/master/CONTRIBUTING.md) and [process for contributions](https://github.com/FreeCAD/FreeCAD/blob/master/CONTRIBUTING.md#6-process) serve a number of [goals](https://github.com/FreeCAD/FreeCAD/blob/master/CONTRIBUTING.md#1-goals), such as providing transparency and fairness, and enabling faster inclusion of contributions while preserving code quality. We can extrapolate a lot about what makes a good vs bad issue from the [Contribution Requirements](https://github.com/FreeCAD/FreeCAD/blob/master/CONTRIBUTING.md#5-contribution-requirements). \\n\\n\\n| What is a \\"bad\\" issue?                                                                                      | What makes a \\"good\\" issue?                                                                                                                      |\\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------|\\n| Raises a suite of problems                                                                                  | Focuses on one problem to solve                                                                                                                 |\\n| Focuses on the desired feature or functionality, what it looks like, how it behaves, what options it offers | Describes the user\'s goal and what is standing in the way                                                                                       |\\n| Tells the developer what to do                                                                              | Tells the developer about the problem the submitter is trying to solve (including current workarounds that help devs to understand user intent) |\\n| Requires maintainers to visit external links and read other material to gain context                        | Is complete and self contained                                                                                                                  |\\n| Proposes something that\'s out of scope for the project/doesn\'t seem to fit with roadmap                     | Fits naturally into project roadmap and can be justified by it                                                                                  |\\n\\nWell defined issues are like [Nerd Sniping](https://xkcd.com/356/). They\'re hard to ignore and inspire creative problem solving. We can expect issue authors to at least familiarize themselves with a project\'s contribution guidelines and issue templates and make an effort to provide a complete issue. If an issue isn\'t getting continuous attention though, that\'s a sign that the issue needs improvement.\\n\\n## The role of maintainers\\n\\nBeyond the usual [expectations of maintainers](https://ondsel.com/blog/contribution-barriers/) (engage kindly with contributors, respond in a timely manner, give regular updates), we can think about maintainers\' responsibilities in two stages:\\n\\n### Before an issue is created\\n\\nThe discourse around open source project issues tends to focus on this stage, and the common advice is to provide adequate guidelines and issue templates to help contributors create issues that meet requirements. \\n\\n### After an issue is created\\n\\nBeyond contribution guidelines, maintainers should use automations to streamline the contribution process and encourage momentum. [raycastbot](https://github.com/raycastbot) automatically @ mentions contributors who have worked on that specific Raycast extension in the past:\\n\\n![raycastimage](images/image1.png)\\n\\n\\nVS Code has a host of [Issue Triage GitHub Actions](https://github.com/microsoft/vscode-github-triage-actions) that perform housekeeping tasks like [closing stale issues](https://github.com/microsoft/vscode-github-triage-actions#stale-closer) or [requesting a translation of issues not written in English](https://github.com/microsoft/vscode-github-triage-actions#english-please).\\n\\nThese practices can relieve some of the burden on maintainers so they have more time to dedicate to the more impactful, vital part of a maintainer\'s role in issue management:\\n\\n#### Proactive involvement and collaboration on issues\\n\\nEven with the above practices in place, sometimes even a well defined issue goes stale. It might represent an extreme edge case or an inconvenience that users have found ways to work around. These issues often get overlooked because they aren\u2019t seen as part of a bigger initiative. Maintainers can help by tagging these issues appropriately and adding them to projects where they form part of a bigger context. \\n\\nFor example, an issue describing a minor UI tweak might be widely regarded as a good idea and still might be ignored because it\u2019s always judged as less important than something else. But if the same issue is put into a project for general UI improvements, then its relevance and potential impact is more pronounced.\\n\\nThis is one example of how maintainers can help by making a conscious effort to review and revise issues. Holding regular meetings to walk through and refactor issues can turn non-starter issues into active and actionable discussions, just by:\\n\\n* Improving the titles to make them more clearly describe the problem to be solved\\n* Proposing solutions and workarounds\\n* Requesting clarification from the submitter\\n* Writing user stories\\n* Narrowing the scope or splitting the issue into multiple, more manageable ones\\n* Merging duplicates\\n* Tagging and labeling\\n* @ mentioning the right people to get conversation going\\n* Closing issues that are out of scope or stale\\n\\nSome of these actions can be automated as described above, but meeting regularly to review open issues lets you catch ones that have slipped through the cracks.\\n\\n### Thinking beyond bugs and problems to solve\\n\\nFor maximum effect, the scope of issues should extend beyond new features and problems to solve, to housekeeping and project maintenance.\\n\\nFreeCAD\'s issue requirements may be thorough, but there are other aspects of the project that aren\'t managed as well. For example, the project\'s backporting requests are currently managed in a [forum thread](https://forum.freecad.org/viewtopic.php?t=69437&start=70), which isn\'t great for organization or visibility. \\n\\nIf backporting was managed via issues grouped into a project, we\'d have better visibility into progress and the status of the release as well as the ability to build release notes easily.\\n\\nGiving greater status and attention to issues as a primary vehicle through which discussion happens and progress is made also has the effect of bringing forward discussions and debates about value judgments. When these discussions happen early in the cycle, rather than at the PR stage, you\'re more likely to get changes and new developments that align with your roadmap and move your project forward.\\n\\n## How you can help\\n\\nYou don\'t have to be a maintainer to be part of the solution. [FreeCAD](https://github.com/FreeCAD) is experimenting with GitHub projects and could use a lot of help with organizing the issues in line with [the improvements outlined above](#proactive-involvement-and-collaboration-on-issues). Your contributions are welcome!"},{"id":"freecad-unpredictable-release-schedule-hurts-users-and-developers","metadata":{"permalink":"/blog/freecad-unpredictable-release-schedule-hurts-users-and-developers","source":"@site/blog/2023-05-18/releaseschedule.md","title":"FreeCAD\'s unpredictable release schedule hurts users and developers","description":"There\'s a problem with running development FreeCAD builds for actual work and it\'s going to get uglier soon. Here\'s the deal.","date":"2023-05-18T00:00:00.000Z","formattedDate":"May 18, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":6.29,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"freecad-unpredictable-release-schedule-hurts-users-and-developers","title":"FreeCAD\'s unpredictable release schedule hurts users and developers","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"What does it mean that my GitHub project has 900 open issues?","permalink":"/blog/better-github-issues"},"nextItem":{"title":"FreeCAD\u2019s Approach to Software Development Needs to Change","permalink":"/blog/freecad-approach-to-software-development-needs-to-change"}},"content":"There\'s a problem with running development FreeCAD builds for actual work and it\'s going to get uglier soon. Here\'s the deal.\\n\\n## What\'s Wrong With The Dev Builds?\\n\\nWhat users want from FreeCAD is a stable, reliable platform that is trustworthy for doing their work. What they also want are various new features and quality-of-life improvements.\\n\\nBut FreeCAD has a relatively long and unpredictable release cycle \u2014 [typically over a year](https://en.wikipedia.org/wiki/FreeCAD#Release_history) between major releases, and no one can put a date on a release in advance. This irregular release schedule has historical reasons (\u201cit\u2019s ready when it\u2019s ready\u201d), but also because over the last several years, contributors did a tremendous amount of work that wasn\u2019t split into smaller chunks. And thus there were large gaps between releases when the team ported FreeCAD from Python2 to Python 3, and then from Qt4 to Qt5.\\n\\nWith the current effort to resolve topological naming, FreeCAD development is moving toward a more incremental approach. Large changes are merged incrementally rather than waiting until the whole thing is done. This should accelerate the pace of development and reduce the time between releases. It also implies that the development branch will experience more instability than it has in the past. \\nThere\u2019s an obvious conflict between the need for stability and the desire for new features. You can get an increasingly reliable platform by sticking with point releases. Or you can get the latest and greatest by using development builds at the risk of experiencing more glitches or even losing your work due to a crash.\\n\\nWe encourage everyone doing \u201creal work\u201d to use a stable build and avoid the risk, but for people who accept the risk and run dev builds, things are likely to get even worse soon. Once the project releases version 0.21, the next batch of topo-naming issue fixes will start landing to the main development branch. Because of what these fixes do, FreeCAD is expected to [take a performance hit](https://github.com/FreeCAD/FreeCAD/issues/8432#issuecomment-1452672655) until optimizations follow at a later stage of development.  Bottom line: the development build is going to get slower for a while.\\n\\nIn our opinion, this is the perfect time for FreeCAD, as a project, to revisit its release policy.\\n\\n## Time-Based Schedule\\n\\nThe first part of our proposal is for the FreeCAD project to have more frequent and predictable releases. Effectively \u2014 a time-based release schedule. This is common for projects with some kind of financial backing for the core team of developers, like [Blender](https://code.blender.org/2021/10/blender-3-x-roadmap/). But it also works for large projects that receive little-to-no funding on a regular basis, like [Kdenlive](https://kdenlive.org/) (3 releases a year, following the KDE\u2019s release cycle) and [darktable](https://www.darktable.org/) (2 releases a year since 2020).\\n\\nHow often should FreeCAD be released? So far, the project has been struggling to do annual releases on time. So shooting for 2 releases a year and working from there seems like a good initial goal. There are existing release policies like [the one at OpenStack](https://www.openstack.org/software/roadmap/) that [have been studied](https://www.researchgate.net/publication/316357251_Release_Early_Release_Often_and_Release_on_Time_An_Empirical_Case_Study_of_Release_Management) and could be learned from.\\n\\nLet\'s say we all agree on bi-annual releases. What does it really mean?\\n\\n**We remove the element of uncertainty for users and developers alike.** Users can plan their upgrades and only use a dev build when they need to test a fix. Contributors can plan ahead and don\'t need to jeopardize their non-FreeCAD commitments.\\n\\n**Much shorter development cycle.** This means more focused releases and less urge to include incomplete work, because the next window for merging will open very soon. This also means a much less exhausting period of work for testers and translators.\\n\\nEspecially in the latter case, contributors are typically expected to either follow development closely and update translations all the time or work like madmen during the strings freeze period because there\'s just so much work to do. Volunteered work should really be more manageable.\\n\\n**More frequent point releases.** Once the release schedule is set, users will start counting on point releases happening regularly too (see below on another reason for that).\\n\\n**More focus on building infrastructure and automation.** A time-based release schedule is going to require a more rigorous release process and a higher level of automation. Only a very small part of the C++ code is covered by unit tests at the moment, this really needs to change. And there is always, _always_ more work to be done on Conda builds. All that means more DevOps work.\\n\\n## Feature Backports\\n\\nThe FreeCAD team already backports bug fixes and security patches from the master branch to the release branch. But we could be doing more. We could be backporting some features and improvements to point releases too. Projects like [GIMP](https://www.gimp.org/news/2019/01/02/gimp-and-gegl-in-2018/#version-210-release-and-point-releases) and Scribus have been doing this for years now because they have release cycles even longer than those of FreeCAD. For them, it helps keeping users engaged, but it still means that larger, much desired changes take a very long time to show up in a stable release, and that\u2019s the part we would rather avoid.\\n\\nThis wouldn\'t render major releases pointless (pun intended). We are thinking primarily of changes that are typically safe and not too time-consuming to backport. If a new feature, however small, comes with an architectural change (API change, file format change etc.), it\u2019s a no-go. But quick UX fixes and other quality-of-life improvements are often possible.\\n\\nOne way to simplify the process of making this decision is to add a checkbox to the pull request template: \u201cBackportable patch\u201d. The maintainer who does the merge then would see that the PR is supposed to be backportable, check the patch against the backporting criteria, and attempt to cherry-pick the commit(s). Naturally, this implies that the developer who submitted a patch explored how far their change goes and understands whether the fix or the feature can easily be ported to the release branch.\\n\\nThe net outcome is that users would have even less reasons to keep using development builds and risk their work.\\n\\n## What\'s Next\\nSo what are the actionable things for contributors to do?\\nFirst of all, we need to make the release process more regular.  Documenting the major and point release processes in the Developer Handbook should be a priority.  The current 0.20.3 and 0.21 releases are an excellent opportunity to do this.  \\n\\nMore conversation is needed about an appropriate release cadence.  Releases that are too frequent will distract from developing new features. Infrequent releases, as we have seen, will push users to the development builds. The goal should be to strike a proper balance between them and increase the value of the stable release with frequent maintenance releases. \\n\\nOur suggestion is to make major releases twice a year and point releases depending on the amount and severity of bugs we fix. As long as fixes come in small batches and aren\u2019t fixing anything really bad, we can release them on a monthly basis. A fix for a severe bug like data loss would definitely call for an immediate release.\\n\\nWe also need to define a general timeframe within each release cycle: when we open the main development branch for new features, when we do a feature freeze, when we do a strings freeze, etc.\\n\\nBeyond that, we will also need to revisit our patch inclusion policy to match a much shorter release cycle. This policy would also have to be updated for feature/improvement backports, which means we need criteria of what constitutes an easily portable change.\\n\\nTo discuss all these things, we created a [discussion topic](https://github.com/orgs/Ondsel-Development/discussions/4) on GitHub and invite you to provide your input."},{"id":"freecad-approach-to-software-development-needs-to-change","metadata":{"permalink":"/blog/freecad-approach-to-software-development-needs-to-change","source":"@site/blog/2023-05-02/developmentapproach.md","title":"FreeCAD\u2019s Approach to Software Development Needs to Change","description":"Historically, the development process in the FreeCAD community has been entirely volunteer-driven. This approach served the community amazingly well \u2014 up to a point. We got a very capable 3D CA* program out of it, but as the project grew, it became harder and harder to make significant changes.","date":"2023-05-02T00:00:00.000Z","formattedDate":"May 2, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":9.215,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"freecad-approach-to-software-development-needs-to-change","title":"FreeCAD\u2019s Approach to Software Development Needs to Change","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"FreeCAD\'s unpredictable release schedule hurts users and developers","permalink":"/blog/freecad-unpredictable-release-schedule-hurts-users-and-developers"},"nextItem":{"title":"In the metaverse nobody uses CAD for design","permalink":"/blog/CAD-in-the-multiverse"}},"content":"Historically, the development process in the FreeCAD community has been entirely volunteer-driven. This approach served the community amazingly well \u2014 up to a point. We got a very capable 3D CA* program out of it, but as the project grew, it became harder and harder to make significant changes. \\n\\nCase in point: the entire toponaming fix is going to span two major releases (0.21 and 1.0). Why? It involves patching a lot of code and writing a lot of unit tests. It also requires knowing the internals of FreeCAD very well and communicating well with lots of people. It takes a particular kind of mind to sit quietly for weeks on end and hack on a boring architectural fix. \\n\\nSimilarly, improving UX/UI requires specific hands-on experience, as well as ability to cooperate. Fixing one task panel or layout is easy.  Making the whole application feel consistent and polished is quite another. And developing a default assembly workbench implies not only being great at many things at once (math, data structure design, UX/UI), but also encouraging a consensus among multiple stakeholders.  Doing your own thing is infinitely easier.\\n\\nMany developers, especially volunteers, join FOSS projects for fun, to learn something new, and to improve their skills.  These people play an incredibly important and central role in FreeCAD\u2019s future.  Sadly, being an individual contributor has become less fun and harder for these same reasons. \\n\\nThe project is at an inflection point where the old way of working is stifling improvement and new methods are needed. The project is also large and mature enough to attract professional development. Ondsel is only the first company to do so, we have no doubts that more will follow.\\nWhat\u2019s needed now is an approach to software development that lets commercial partners add value quickly but still lets individuals make significant contributions, influence the overall direction, and most importantly, have fun. \\n\\nAs a commercial company with paid developers, we have the opportunity to encourage a different way of working. We see five areas where the project has outgrown its historical development approach.  These are all areas that formally served FreeCAD well but are now holding it back.\\n\\n1. Project has historically had no roadmap. We introduced a global roadmap and have our own plan.\\n\\n2. Project works in features. We\'re beginning to work in the CI methodology.\\n\\n3. Project drives from pull requests. We drive from issues.\\n\\n4. Project discusses important topics on the forum. We are using our blog and our GitHub tools to communicate and seek feedback.\\n\\n5. The project community is mostly individual developers working independently. We work collaboratively and integrate multiple skill sets.\\n\\nSome of these changes are already finding their way into the upstream project, others will hopefully be adopted by the larger FreeCAD community too. We hope these changes not only speed up the pace of development but also make it easier for volunteers to contribute effectively.\\n\\n## Roadmap\\n\\nAs a commercial partner, Ondsel isn\u2019t focused only on the short term features and bugfixes.  We\u2019ve also got our eyes on the long-term vision. We started by stepping back and looking at the big picture. What are the fundamental limitations that are holding FreeCAD back from widespread adoption?\\n\\nWe strongly believe that working off a roadmap will help the entire community to focus on important things and make faster progress by planning features and setting priorities. So we proposed a [roadmap](https://freecad.github.io/DevelopersHandbook/roadmap/) for the core project that covers major topics that are universally acknowledged: model stability, integrated assembly workbench, better UX/UI and streamlined workflow, easier extensibility, better documentation etc.\\n\\nSome of those items will be picked by volunteers For others, a team like Ondsel will have a better shot at completing a particularly sophisticated task.  In the latter case, we can communicate our proposal to the broader community and solicit input from users and contributors to shape the plan.\\n\\nTo that end, we are encouraging the use of [Projects](https://github.com/orgs/FreeCAD/projects) functionality on GitHub to keep track of the progress on larger issues that are part of that roadmap.\\n\\n## Continuous Integration\\n\\nThe project typically moves forward one feature at a time. A developer gets an \u2018itch\u2019 that they\u2019d like to scratch and works on a feature until it\u2019s complete. They do this work in a dedicated feature branch and then submit a PR to merge the feature branch. There\u2019s two problems with this.\\n\\nFirst, this approach doesn\u2019t work for features or fixes that imply either cooperation of many volunteers or a long solo effort by one contributor. Especially in the latter case, there\u2019s a huge risk that work will be abandoned before it\u2019s completed.\\n\\nSecondly, complex features and large changes result in massive pull requests that must be evaluated. Going over commits in a large branch can take a long time. Meanwhile, those feature branches must be continuously rebased until they are accepted and merged. All this means extra work for both the project maintainers and contributors. The FreeCAD community has grown to accept this reality as the normal state of affairs, \u201cit\u2019s done when it\u2019s done\u201d. The outcome of this, however, is that contributors burn out and release cycles grow longer, from an average of 200 days to almost 550 days.\\n\\n![Days between FreeCAD releases](days-between-freecad-releases-chart.png)\\n\\nA better approach is to work in a continuous integration methodology. We can break up large features into many small, atomic commits that don\u2019t break the master build. We can send pull requests for each of them allowing the work to be merged until the final feature is enabled. This will make the entire process far more manageable, which is especially important for modules where maintainers are volunteers. Here at Ondsel, we have already switched to this methodology as part of the work on fixing the toponaming issue.\\n\\n## Driving from Issues\\n\\nOndsel has been working with the FreeCAD developer community and the FPA to formalize the contribution process. The [Developers Guide](https://freecad.github.io/DevelopersHandbook/) is one of the outcomes of that. \\n\\nUnfortunately, many contributions are still received as PRs that have had no prior discussion. The way it usually works is that someone finds a bug or identifies a missing feature and sends a PR to fix the bug or add the feature. This may be the first time ever that the community has heard of it.\\n\\nOut-of-the-blue patches like that can cause problems: \\n\\n* The community agrees that the problem exists but disagrees about the solution.\\n* Sometimes a lengthy debate ensues, whether the feature should be accepted at all, whether the assumed bug is actually a feature etc. \\n* Sometimes a valid solution needs to be implemented elsewhere in the application but the contributor isn\u2019t interested in doing that work because it doesn\u2019t affect them personally.\\n\\nThere are ways to manage development communication better.\\n\\nOndsel will drive from issues. We\u2019ll submit issues for discussion ahead of time to verify that the bug or feature is legitimate. We can use the input provided by users and other contributors to figure out the best way to achieve the goal before we do the actual work. Then when the PR is finally submitted, the only remaining discussion should be about the quality of the code. We believe this will eliminate some conflict as well as late-stage user feedback, result in less patches sitting in the limbo and half cooked features, and let the entire upstream project move forward even faster.\\n\\nWe already started doing so, one example is a proposal for making assembly workbenches [compatible](https://github.com/FreeCAD/FreeCAD/issues/9278) on the data structure level.\\n\\n## Moving important conversations off the forum\\n\\nThe FreeCAD forum has long been the center of the FreeCAD ecosystem. It is where development discussion has happened side-by-side with user support, general community discussion, and work coordination for translation, wiki, etc. As the project has grown, we\u2019ve started to outgrow the forum, and communication has become less productive.\\n\\nFirst, the amount of traffic means many important topics get lost. A topic about a bug can rapidly grow to multiple pages and dozens of replies. The conversation often gets off-topic, so it becomes impossible to keep up.\\n\\n\\nThe same topics can get discussed many times in unrelated threads and multiple languages. Useful and important information becomes difficult to extract, and decisions never get recorded or followed up on.  Most troubling for a software project, the discussion never gets linked to the source code or a pull request discussion.\\n\\nThe forum still serves an important role but it is less and less effective for technical discussions about the source code and related topics. We think the project should embrace a wide set of communication tools that are each appropriate to the type of conversation needed.  Video meetings via Zoom and Jitsi are great for making plans. Real-time chats via Telegram, Gitter, Matrix, and Discord are great for working collaboratively on technical issues. \\n\\nWe encourage the project to keep technical discussion as close to the source code as possible. GitHub issues and pull requests allow a richer conversation in context with the source itself. Using labels and projects keeps conversations relevant and organized. This should help eliminate duplicate discussions and make useful input from users and contributors easy to locate and analyze.\\n\\nAdditionally, we use this blog for sharing ideas that are too broad for issues and pull requests but could serve as a reference on GitHub. The blog lets us take the conversation \u201cup a level\u201d and reflect on topics that deserve more time to consider.  We mostly rely on the traditional \u201cproblem statement -> research -> analysis -> proposal\u201d approach.\\n\\n## Collaboration\\n\\nMost FreeCAD contributors work independently. From time to time, they coordinate their efforts and work together to achieve a larger goal. This requires agreeing on a number of things: what work should be done exactly, who will do which part of it, what time frame for completion should be set etc. This is hard to do as there is little infrastructure or established processes for team work.\\n\\nOndsel engineers can work together in a more organized manner. We can set priorities and goals that are consistent with FreeCAD direction and also work with Ondsel\u2019s product strategy. We can include outside experts and volunteer developers when required.\\n\\nWe think this kind of collaboration is the most important thing because it flows from doing all the other things better.  By planning, communicating, and working in small discrete steps we can share the burden and collectively move much faster.  We also avoid relying on [one or two people with special skills to keep the project afloat.](https://en.wikipedia.org/wiki/Bus_factor)\\n\\n## In Conclusion\\n\\nSince much of the work we do directly affects the upstream FreeCAD project, we expect that the proposed work methodology changes \u2014 planning the work, atomizing large changes, and keeping discussions structured \u2014 will result in a more streamlined development process overall. \\n\\nIt is our hope that at least some of these changes will prove to be efficient and will eventually become the standard for the larger FreeCAD community.\\n\\nAs we flesh out the details of new work processes, we will document them in [Ondsel\u2019s own developers\u2019 handbook](https://ondsel.com/docs/handbook/)."},{"id":"CAD-in-the-multiverse","metadata":{"permalink":"/blog/CAD-in-the-multiverse","source":"@site/blog/2023-04-21/metaverse.md","title":"In the metaverse nobody uses CAD for design","description":"Summary/meta: We already have great tools for design. Where VR can really shine is in creating environments to experience those designs in context.","date":"2023-04-21T00:00:00.000Z","formattedDate":"April 21, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":4.89,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"/img/Rebecca-Dodd-profile.JPEG","imageURL":"/img/Rebecca-Dodd-profile.JPEG"}],"frontMatter":{"slug":"CAD-in-the-multiverse","title":"In the metaverse nobody uses CAD for design","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"/img/Rebecca-Dodd-profile.JPEG","imageURL":"/img/Rebecca-Dodd-profile.JPEG"}],"tags":["freecad","development"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"FreeCAD\u2019s Approach to Software Development Needs to Change","permalink":"/blog/freecad-approach-to-software-development-needs-to-change"},"nextItem":{"title":"Ondsel at 100...Days","permalink":"/blog/ondsel-100-days"}},"content":"Summary/meta: We already have great tools for design. Where VR can really shine is in creating environments to experience those designs in context. \\n\\nVR CAD is usually portrayed like Tony Stark designing Iron Man suits, putting the emphasis on VR as an evolution of design tools. This is Hollywood stupid. VR design/UI isn\'t mature enough for that. Instead, we should be thinking about VR as a sharing environment where a designer can demonstrate a model in context. \\n\\n\\n## VR for design is a long way from being useful\\n\\nThe current discourse around VR and CAD potential focuses too much on using VR for design: gamifying the experience and building things with goggles on. Design takes time\u2014sometimes a LOT of it. Wearing VR gear for any period of time gets uncomfortable quickly and is both physically and mentally fatiguing. \\n\\nWe do however have existing tools and applications for design work that already work well (and have decades of investment and optimization to leverage). Our keyboards, mouses, and monitors are still the best tools for this job and still have their place. \\n\\n\\n## The real opportunity: Experiencing design in the metaverse\\n\\nBy getting swept up in ideas about moving to VR for design work, we risk overlooking the more realistic, near-term potential of VR: creating an environment to experience a design in context.\\n\\n\\n### Beyond visual twins\\n\\n\\nA digital twin is a virtual copy of something physical: an environment, system, asset, or process. It\u2019s also dynamic, connecting real-world data to the twin, to help not just with visualization but with understanding and forecasting how the real thing will interact with its environment. For example:\\n\\n\\n>\u201cLeaning on Omniverse, Ericsson created a digital twin of an entire city to determine the optimal deployment for their 5G rollout, using Omniverse to judiciously select and configure sites to maximize coverage and signal quality with minimal cost and complexity. To do so, Ericsson\u2019s digital twin city tracks the physical world, with buildings and foliage 100% accurate, down to their surface materials and texture. In that world, Ericsson can accurately assess signal quality at any point in the city with a given deployment. And re-working sites\u2014 either upfront or at a later date for upgrade\u2014can easily reveal how the coverage would improve (or not) in real time.\u201d \u2014 Alex Herrera, [The Metaverse: Separating the Wheat from the Chaff, from a CAD Perspective](https://www.cadalyst.com/collaboration/digital-twin/metaverse-separating-wheat-chaff-cad-perspective-78906)\\n\\nSo far though, the concept of digital twins tends to be limited to what we see, but with VR and AR (augmented reality) there\u2019s great potential to take the concept of a digital twin beyond the visual. \\n\\n\\n>\u201cWhat I\'ve always been interested in is this idea of, how do we experience more of the things we\'re designing when it\'s on the other side of the glass? \u2026 What I long for is, for example, taking the many facets of a design and being able to see them work together \u2026 we should be able to take an object and, for example, turn it on. And we should see lights flash and you press a button and you understand how it operates. You should hear what it sounds like. \u2026 If I was a designer, I want to really understand the scale and proportion. I want to understand what it feels like, I want to see what happens as I interact with it. So these products that we design and make are so much richer.\u201d \u2014 [Carl Bass, former President and CEO of Autodesk](https://cesium.com/open-metaverse-podcast/cad-and-the-metaverse/)\\n\\nWhere VR and AR really shine is in providing _context_ for what the user is experiencing when previewing or interacting with a design. The obvious use case is architecture, where you would be able to walk through a design in scale:\\n\\n\\n![Tweet: Pascal Bornet](image1.png)\\n\\n\\nThe same is true for other physical designs. You could show how a part fits into a model (think about an exhaust system under a car). \\n\\nYou don\u2019t just see the thing, you see the thing _in context_. You hear ambient sound, feel immersed, and can even interact with other people in a shared context. This is an ideal environment for discussing physical designs. \\n\\n\\n### Immersive remote collaboration\\n\\nThere\u2019s also an obvious use case in enabling the people working on such designs to collaborate remotely with one another in a shared context. Site visits and to get stakeholders in the same room to look at a prototype, while still useful, would no longer be necessary. \\n\\nThis benefit extends beyond design though, to any remote collaboration. Imagine a FreeCAD HQ room in VR, for contributors to meet, have [discussions](https://forum.freecad.org/), and make plans in real time. Whiteboards and issue boards on the walls would add context to those meetings in a way that is otherwise hard to recreate with remote meetings. \\n\\n\\n## Making 3D designs more accessible\\n\\n3D designs are like the source code of the design world: read much more than they are written. While source code is mostly read by programmers and compilers though, 3D designs are read by many different people across many roles\u2026 and other systems. Because 3D designs need to be read by so many, the long-term opportunity here is to make them more accessible by enabling people to experience them from anywhere, _in_ context, and _outside_ of a dedicated application. \\n\\nIf done well, the user experiencing the context doesn\u2019t need to understand the controls of the software. They can look behind them by moving their head. They get an intuitive sense of scale because it\u2019s related to their own bodies. The design becomes more useful by enabling people to access and experience it easily, in a range of different contexts. \\n\\nThis is another area of rapid innovation and Ondsel doesn\u2019t have all the answers. What we want to do is enable the community of FreeCAD users to explore these ideas\u2014o find new ways to collaborate, create, and share their designs with each other."},{"id":"ondsel-100-days","metadata":{"permalink":"/blog/ondsel-100-days","source":"@site/blog/2023-04-14/ondsel-100.md","title":"Ondsel at 100...Days","description":"100 Days","date":"2023-04-14T00:00:00.000Z","formattedDate":"April 14, 2023","tags":[{"label":"ondsel","permalink":"/blog/tags/ondsel"}],"readingTime":2.67,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"}],"frontMatter":{"slug":"ondsel-100-days","title":"Ondsel at 100...Days","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"}],"tags":["ondsel"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"In the metaverse nobody uses CAD for design","permalink":"/blog/CAD-in-the-multiverse"},"nextItem":{"title":"Assembly Workbench: What We Learned and What\'s Coming Next","permalink":"/blog/default-assembly-workbench-7"}},"content":"## 100 Days\\n\\nIt\u2019s hard to believe that it\u2019s been just over three months since Ondsel started operations.  One hundred days, in fact.  I thought it would be fun to take a moment and consider what we\u2019ve been able to accomplish in that time.\\n\\nFirst, we built a team.  Besides myself, Ondsel now has five people working on the future of FreeCAD.  We were able to recruit, interview, hire, equip, and onboard five exceptionally talented people who hit the ground running and started contributing to FreeCAD.\\n\\nWe attended FOSDEM in Brussels in February where we got to meet with [project leaders](https://fpa.freecad.org/).  We heard from many users who both love FreeCAD but are frustrated with the lack of progress on some big problems.  We learned a ton and we were able to build consensus on a path forward.\\n\\nFrom that, we laid out a plan for finally resolving the topo-naming problem.  One of our people, [@JohnDupuyCOMO](https://twitter.com/JohnDupuyCOMO) refined [the plan](https://github.com/FreeCAD/FreeCAD/issues/8432) to incorporate [RealThunder](https://twitter.com/RealThunder12)\u2019s algorithm, and the developer community not only accepted it but started working with blazing speed to accomplish it.  The first phase was completed in only a couple of weeks.  Now we\u2019ve started phase two.\\n\\nWe started building the Ondsel brand.  We got a logo designed, put up a [website](https://ondsel.com/), and established accounts on [Twitter](https://twitter.com/ondsel), [Facebook](https://www.facebook.com/ondsel), [LinkedIn](https://www.linkedin.com/company/ondsel/), and other platforms.  We\u2019ve taken our Twitter following from zero to almost two hundred followers.\\n\\nWe built relationships with some outstanding creators including [Rebecca Dodd](https://twitter.com/Basement_Office) and [Alexandre Prokoudine](https://twitter.com/lgworld) who are helping to create our blog content and communicate our vision.  \\n\\nWe worked with [Reedy Designs](https://reedydesigns.com/) and to reskin the website in just over a week.\\n\\nWe initiated the [FPA Handbook](https://fpa.freecad.org/handbook/) and contributed content to it.\\n\\nWe initiated the new[ Developer\u2019s Handbook](https://freecad.github.io/DevelopersHandbook/) and are continuing to add new content to it as well.\\n\\nWe started our own [handbook](https://ondsel.com/docs/handbook) which will be an indispensable part of our company culture.\\n\\nWe published more than a dozen blog posts including a seven-part series on Assembly.\\n\\nOur Assembly series started a [community-wide discussion](https://forum.freecad.org/viewtopic.php?t=76799) about an integrated assembly workbench \u2014 a much-needed core capability of FreeCAD.  The discussion has had more than fifteen thousand views and hundreds of comments.  We got some great insights that helped us shape the vision for this feature.\\n\\nAnother of our developers [@ajinkyadahale](https://twitter.com/ajinkyapdahale) [completed](https://github.com/FreeCAD/FreeCAD/pull/8530) our contract to [improve spline construction](https://forum.freecad.org/viewtopic.php?t=75950) in sketdcher for the [Open Tool Chain Foundation](https://floss.social/@opentoolchain).\\n\\nYet another of our developers [@amrit3701](https://twitter.com/amrit3701) has been building the infrastructure to support our eventual product \u2014 a subject you will hear much more about in the coming months.\\n\\nWe got eight pull requests merged into the FreeCAD master branch, including PRs for topo-naming and many quality-of-life improvements by [@pierrelouisboy](https://twitter.com/pierrelouisboy): [9173](https://github.com/FreeCAD/FreeCAD/pull/9173), [9172](https://github.com/FreeCAD/FreeCAD/pull/9172), [9143](https://github.com/FreeCAD/FreeCAD/pull/9143), [9117](https://github.com/FreeCAD/FreeCAD/pull/9117), [9080](https://github.com/FreeCAD/FreeCAD/pull/9080), [9026](https://github.com/FreeCAD/FreeCAD/pull/9026), [9010](https://github.com/FreeCAD/FreeCAD/pull/9010), [8990](https://github.com/FreeCAD/FreeCAD/pull/8990).\\n\\nWe did all that in one-hundred days and I\u2019m sure I\u2019m missing many more things we did along the way.\\n\\nI\u2019m incredibly grateful, humbled, proud and excited.  I\u2019m grateful for the support of our investors [Open Core Ventures](https://twitter.com/OpenCoreVenture) and [Sid Sijbrandij](https://twitter.com/sytses).  I\u2019m humbled by the support of the [FreeCAD community ](https://twitter.com/freecadnews)and leadership.  I\u2019m proud of the stellar work of our people and partners.  \\n\\nI hope you follow us because I\u2019m excited to see what we can do when we REALLY get rolling!"},{"id":"default-assembly-workbench-7","metadata":{"permalink":"/blog/default-assembly-workbench-7","source":"@site/blog/2023-04-10/assembly-7.md","title":"Assembly Workbench: What We Learned and What\'s Coming Next","description":"We started this series with the assumption that there is a strong community demand for a default assembly workbench in FreeCAD. The community discussion that followed that article confirmed our belief. We then researched existing options \u2014 Assembly 2, A2plus, Assembly 3, and Assembly 4 \u2014 and even quickly studied related workbenches and macros.","date":"2023-04-10T00:00:00.000Z","formattedDate":"April 10, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"},{"label":"assembly","permalink":"/blog/tags/assembly"}],"readingTime":10.98,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"default-assembly-workbench-7","title":"Assembly Workbench: What We Learned and What\'s Coming Next","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development","assembly"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"Ondsel at 100...Days","permalink":"/blog/ondsel-100-days"},"nextItem":{"title":"Exploring BodyBuilder, Manipulator, and Part-o-magic","permalink":"/blog/default-assembly-workbench-6"}},"content":"We started this series with the [assumption](https://ondsel.com/blog/default-assembly-workbench-1) that there is a strong community demand for a default assembly workbench in FreeCAD. The community discussion that followed that article confirmed our belief. We then researched existing options \u2014 [Assembly 2](https://ondsel.com/blog/default-assembly-workbench-2), [A2plus](https://ondsel.com/blog/default-assembly-workbench-3), [Assembly 3](https://ondsel.com/blog/default-assembly-workbench-4), and [Assembly 4](https://ondsel.com/blog/default-assembly-workbench-5) \u2014 and even quickly studied [related workbenches and macros](https://ondsel.com/blog/default-assembly-workbench-6).\\n\\nOur research had a number of limitations though. We avoided exploring the earliest solutions such as the [original workbench](https://forum.freecad.org/viewtopic.php?t=3828) by J\xfcrgen Riegel and [FreeGCS](https://forum.freecad.org/viewtopic.php?t=1523) because they were incomplete. We also decided against studying both [Exploded Assembly](https://github.com/JMG1/ExplodedAssembly) and [Animation](https://github.com/microelly2/Animation) workbenches because this type of feature deserves dedicated attention.\\n\\nFrom this research and the discussion that followed, we came away with a handful of important takeaways. We suggest that these ideas should influence the direction of the FreeCAD project.\\n\\nIn this article, we\u2019ll describe what we learned. We\u2019ve taken the liberty of making some specific recommendations for a way forward and we also discuss what we believe is Ondsel\u2019s role.\\n\\n## Key Insights\\n\\n### The Long-Term Vision\\n\\nWe started this conversation by calling for a solution that covers 80% of use cases. Based on our research and community feedback, we conclude that there is strong consensus around the higher-level characteristics of this integrated assembly workbench:\\n\\n* Both top-down and bottom-up approaches equally first-class citizens\\n* Simple enough to make quick alignments, but powerful enough for complex projects with nested sub-assemblies\\n* Ability to resolve assembly constraints automatically and eventually simulate multi-body dynamics\\n* An easy way to animate the assembly and detect collisions\\n* Built-in BOM generation\\n* PDM-ready\\n* Compatible with other parts of FreeCAD and alternative assembly workbenches\\n* Same license as FreeCAD (LGPL v2.1)\\n\\n### The Need for a Common Data Structure\\n\\nThe existing assembly workbenches for FreeCAD are not mutually compatible. It isn\u2019t possible for a user to switch between the options without losing data. This kind of compatibility is important and it starts with the data structure. Early in the forum discussion, Zolko noted the need for a standard, and we think he\u2019s exactly right:\\n\\n> \u2026what we need is a default assembly DATA FORMAT that every assembly workbench can use. You can design solids in Part and PartDesign workbenches, where you begin with one, continue with the other, use Draft en-passant, and finish with some Part Booleans. You can even mix this with Curved Shape surfaces, Sheet Metal bending, and they all COOPERATE! Why should it be different for assemblies? What IS needed is to say: to be called a FreeCAD assembly workbench it needs to use the following data structure [\u2026] and then let people implement the best approaches for that.\\n\\nWe see the development of the common data structure as a priority requirement for an integrated solution. Users should be able to move between existing workbenches or migrate to newer ones without redoing an entire project.\\n\\nA standardized data structure would also simplify developing in-house niche solutions where you need to run some extra simulations.\\n\\n### Why We Should Talk About Solvers Separately\\n\\nPast discussions about an assembly workbench have lumped the solver and the workbench into the same conversation. Separating the discussion has been helpful since these are, in fact, very different things. It is the solver which has been the most controversial part of previous discussions. Assembly 4 and Manipulator workbenches have demonstrated that, at least for some use cases, a solver isn\u2019t even needed at all.\\n\\nAmong those who emphasize the need for a solver, agreement about requirements has been hard to find. The real world is messy and complex and full of unique problems that require custom solutions. One solver cannot possibly handle the variety of use cases that exist (think combined mechanical-thermal-electromagnetic simulations).\\n\\nSome problems can be handled by 2D solvers, and we have some very nice options, including the one in the Sketcher workbench. \\n\\nOther problems _require_ a capable 3D solver and if we want FreeCAD to be competitive, it needs one. Unfortunately, we currently have no options at all. SolveSpace comes closest but its licensing (GPL v3+) makes it an unlikely choice for FreeCAD (LGPL v2.1). The development of solvers, both open and proprietary, is an area of rapid innovation. We have no way of knowing what will be available even five years from now.\\n\\nOur insight is that the future integrated assembly workbench should have the following three essential characteristics with respect to a solver:\\n\\n* Minimally functional and easy-to-use without any solver at all\\n* Capable of using a solver if one exists\\n* Solver-agnostic, with a possibility to use new solvers in the future\\n\\nBuilding the assembly workbench to be solver-independent provides the greatest flexibility for the project as a whole, users, and partners like Ondsel. It also provides the most options in the future.\\n\\n### Why People are Passionate About Existing Solutions\\n\\nFrom past experience, we understood that this discussion might get emotional at times. Users are very passionate about the existing options. What we noticed was that their passion stems from two sources.\\n\\n**Investment in climbing the learning curve.** With three actively developed assembly workbenches today, users first have to learn enough to make a choice. Having made that choice, they don\u2019t want to revisit it. Some users refuse to invest in even making the choice. They give up and move on. Here are a few examples from discussions about our initial proposal:\\n\\n\\n\\n* \u201cAs a fairly new freeCAD user I have spent an innumerable amount of time attempting to choose which assembly workbench to use and more importantly learn how to use\u201d ([FC forum](https://forum.freecad.org/viewtopic.php?p=667457&sid=3bec9fb58279fa4feba78c322c3c6b43#p667457))\\n* \u201cI tried switching to FreeCAD a couple of years ago and the plethora of conflicting assembly solutions prevented me from doing so\u201d ([FC forum](https://forum.freecad.org/viewtopic.php?p=669635#p669635))\\n* \u201cI haven\u2019t explored any of the assembly benches as there is a big curve to even selecting one of them\u201d ([Reddit](https://www.reddit.com/r/FreeCAD/comments/11r9j78/comment/jcajyiq/?utm_source=reddit&utm_medium=web2x&context=3))\\n* \u201cIt\'s painful to train anyone if there are four different assembly plugins and they all work slightly or drastically different\u201d ([Reddit](https://www.reddit.com/r/FreeCAD/comments/11r9j78/comment/jc9j3tu/?utm_source=reddit&utm_medium=web2x&context=3))\\n\\nUsers who made a choice also made a significant investment to become proficient, because they saw the benefits of the tool they use. As a result, they often have little or no knowledge of the other options and no interest in learning if the current option meets their needs. At the risk of oversimplifying:\\n\\n* A2plus users think it has a simple, natural, and straightforward workflow\\n* A3 users think it\u2019s the most feature-complete workbench of all\\n* A4 users like how robust the LCS-based workflow is\\n\\n**Investment in their current models and assemblies.** Users also have a large collection of projects that are built using one particular workbench. They are naturally reluctant to switch solutions if it means losing or redoing that work from scratch. Basically, they made a huge investment in their assembly WB of choice, and because of the lack of compatibility, they are now in an unintended vendor lock-in situation.\\n\\n**What about features?** Surprisingly, one thing we didn\u2019t hear much was users championing one solution or another because it offered specific features. While the different solutions had strengths and weaknesses, all of the options offer similar capabilities.\\n\\nOur key insight is that protecting the investment users have made is extremely important. Change will be hard, but we believe users will be willing to adopt an integrated solution if it is robust, relatively easy to learn, well documented, and if existing models can be migrated to it with minimal rework. They shouldn\u2019t be forced to make the change before they are ready or before an integrated solution is mature enough for their needs.\\n\\n### What About the Workflow and UX/UI?\\n\\nOnce solvers and data format are removed from the discussion, what\u2019s left to discuss is the workflow. Regardless of how passionate the users are, the reality is that none of the existing assembly workbenches has a perfect workflow or user interface:\\n\\n* A2plus requires conversion of parts created with other WBs.\\n* A3 has so many constraint types that even experienced users get confused.\\n* A4 requires time to set up local coordinate systems for all features that should be attached.\\n\\nThere are ideas to borrow from all of them, but we don\u2019t consider the workflow and UX/UI of any of the existing options, in their present form, to meet the long-term goals. Assembly 4, by virtue of its simplicity and solid design, would be a good starting point.\\n\\n## Recommendations\\n\\n### Integrated Assembly Workbench\\n\\nWe suggest that FreeCAD must commit itself to an integrated assembly workbench \u2014 with great UX, documentation, translations, and compatibility with the rest of FreeCAD. \\n\\nWhile the first iteration of the workbench can be feature-incomplete, this WB should support both simple and complex workflows. It should provide a solid foundation for future development of PDM integration, BOM extraction, collision detection, exploded assembly views, and animations.\\n\\n**Ondsel\u2019s role.** We can participate in the planning, help organize the work, contribute code, test, and refine the solution. We can also contribute to the documentation and other essential parts of the project.\\n\\n### Standardized Data Structure\\n\\nWe already explained the importance of having a common data structure earlier. Our recommendation is simply that this should be the first step, and it should involve all key stakeholders: core developers, maintainers of the other Assembly workbenches (kbwbe, Realthunder, and Zolko), and Ondsel. This should be undertaken and completed early enough that other workbenches can either support the standard directly or provide migration tools.\\n\\nThe approach in Assembly 4 is a serious contender for a starting point. Zolko has some very sensible ideas like having only one root assembly element in the project, wrapped into a Part container, with parts and sub-assemblies available as child elements.\\n\\nThe working group should also investigate what ISO 10303 has to offer but regardless of what is found, the focus should be on providing the best solution for FreeCAD and its users.\\n\\n**Ondsel\u2019s role**. Again, we can participate but we can\u2019t impose a standard unilaterally. In this case, we feel Ondsel\u2019s participation not only represents our own interests but the interest of other future partners. \\n\\n### Powerful, Performant, 3D Solver\\n\\nLet\u2019s reiterate: a 3D solver is critical to make FreeCAD competitive for professional and commercial work. No viable solutions that are license-compatible currently exist.\\n\\nThe solver has to be written in C++ or another compiled language for acceptable performance. The development of a 3D solver is a massive, time consuming, and expensive endeavor. It is, by far, the hardest part of doing assembly right.\\n\\nFor ease of distribution, it\u2019s best to make the solver part of the core FreeCAD. This also gives us a better shot at maintaining it and also makes it available for use in other workbenches (think Robot).\\n\\n**Ondsel\u2019s role.** We want a solution that is fast, powerful, and supports future functionality like multi-body dynamics. Ondsel intends to begin developing such a solution, release its code under an appropriately permissive license, and submit PRs to include it in the FreeCAD source. Based on our understanding of the [\u2018Buyer-Based\u2019 Open Core Model](https://opencoreventures.notion.site/Open-Core-Business-Model-525879f382cb430e81274f669a026c15#764604b5c6db4107bb84bbc427d81b87), we think this is the right decision.\\n\\nHaving said that, it is essential to understand that Ondsel is a for-profit company and we are not profitable yet. We might fail before a solution is available. The project should not bet its future on our success. Moreover, the need to survive might force us to make the 3D solver or specific features available as paid options. This is also a risk area for the FreeCAD project. The community should prudently take steps to minimize the impact and ensure the viability of the integrated assembly workbench. \\n\\nThis aligns with our recommendation that the assembly workbench should be solver-agnostic, usable in solverless mode, supporting less powerful 2D solvers, but also able to take advantage of more powerful technology \u2014 including commercial options \u2014 if and when they are available.\\n\\n### Shipping the MVP\\n\\nWe believe that a minimum viable assembly workbench (proof-of-workbench, if you will) should be shipped as part of FreeCAD as soon as possible to become a platform for testing the new 3D solver. The goal shouldn\u2019t be feature completeness. Rather, we should focus on simplicity and stability and then iterate upon that to improve the workflow and user experience.\\n\\n**Ondsel\u2019s role.** Once again, we can participate by providing leadership, organization, code, testing, and documentation but we cannot do it alone. We\u2019re ready to start immediately.\\n\\n## In Conclusion\\n\\nWe thank everyone who participated in the discussion. Being able to test our ideas and expectations against feedback from avid users of existing assembly workbenches is priceless. \\n\\nWe know that the road to a world-class assembly system won\u2019t be short and there will be plenty of bumps along the way. We also know we can\u2019t do it alone. We look forward to collaborating with the FreeCAD community to bring this vision to life.\\n\\nWe are interested to hear your feedback on this plan. Please let us know what you think by commenting [in the forum](https://forum.freecad.org/viewtopic.php?t=76799) or [on GitHub](https://github.com/orgs/Ondsel-Development/discussions/2). We will create a project in the GitHub tracker to plan the work and coordinate the many people it will require. Please let us know if you want to contribute to this effort."},{"id":"default-assembly-workbench-6","metadata":{"permalink":"/blog/default-assembly-workbench-6","source":"@site/blog/2023-04-02/assembly-6.md","title":"Exploring BodyBuilder, Manipulator, and Part-o-magic","description":"In the previous posts in this series we\u2019ve already discussed reasons to create a default assembly workbench and then explored existing options: Assembly 2, A2plus, Assembly 3, and Assembly 4.","date":"2023-04-02T00:00:00.000Z","formattedDate":"April 2, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"},{"label":"assembly","permalink":"/blog/tags/assembly"},{"label":"bodybuilder","permalink":"/blog/tags/bodybuilder"},{"label":"manipulator","permalink":"/blog/tags/manipulator"},{"label":"part-o-magic","permalink":"/blog/tags/part-o-magic"}],"readingTime":7.925,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"default-assembly-workbench-6","title":"Exploring BodyBuilder, Manipulator, and Part-o-magic","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development","assembly","bodybuilder","manipulator","part-o-magic"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"Assembly Workbench: What We Learned and What\'s Coming Next","permalink":"/blog/default-assembly-workbench-7"},"nextItem":{"title":"Exploring the Assembly 4 workbench","permalink":"/blog/default-assembly-workbench-5"}},"content":"In the previous posts in this series we\u2019ve already discussed reasons to create a [default assembly workbench](https://ondsel.com/blog/default-assembly-workbench-1) and then explored existing options: [Assembly 2](https://ondsel.com/blog/default-assembly-workbench-2), [A2plus](https://ondsel.com/blog/default-assembly-workbench-3), [Assembly 3](https://ondsel.com/blog/default-assembly-workbench-4), and [Assembly 4](https://ondsel.com/blog/default-assembly-workbench-5).\\n\\nThere are several more tools that provide a subset of their features, and these tools regularly come up in discussions on creating assemblies: the [BodyBuilder](https://github.com/Freedman-CB1/BodyBuilder) macro, the [Manipulator](https://github.com/easyw/Manipulator) workbench, and the [Part-o-magic](https://github.com/DeepSOIC/Part-o-magic) workbench. Since none of them can realistically serve as a foundation for a potential default assembly workbench, in this review, we\u2019ll focus on their interaction models to see what we can learn from them.\\n\\nBut before we do that, let\u2019s quickly discuss the topic of exploded assemblies \u2014 a representation of the assembly design where parts are roughly in the right position, but at a certain distance from each other. We considered looking at the [Exploded Assembly](https://github.com/JMG1/ExplodedAssembly) workbench in this post, because creating such a view is a very common use case. However, after a quick study we found the following.\\n\\nFirst of all, it\u2019s done differently across available commercial CAD offerings. It\u2019s a part of the assembly toolset in Dassault Syst\xe8mes SolidWorks, Siemens NX, Ansys SpaceClaim, and BricsCAD Mechanical. It\u2019s an additional default tool in PTC Creo and Onshape. And it\u2019s part of the animation feature set in Autodesk Inventor, Autodesk Fusion 360, and T-FLEX CAD. So there\u2019s no one right way to do that.\\n\\nIn FreeCAD, there are at least two 3rd-party workbenches for animation that have tools for exploding an assembly, Exploded Assembly and [Animation](https://github.com/microelly2/Animation). Another workbench, [Movie](https://github.com/Francisco-Rosa/FreeCAD-Movie), suggests using a [fork](https://github.com/Francisco-Rosa/ExplodedAssembly) of the Exploded Assembly workbench. And there are [other workbenches](https://jirivalasek.github.io/Animate/) that deal with animating moving parts.\\n\\nOn one hand, this indicates that the FreeCAD community is leaning towards seeing this as part of the animation feature set. On the other hand, there are perfectly sensible use cases like technical illustrations where you might want to place an isometric view of an exploded assembly onto a TechDraw page, and that\u2019s probably outside the animation workbench\u2019s jurisdiction. So it makes sense to revisit this topic later when we can give it our full attention.\\n\\nAnd now let\u2019s get on with additional assembly-like tools.\\n\\n## BodyBuilder macro\\n\\nAccording to the macro developer, \u2018freedman\u2019, the [rationale](https://forum.freecad.org/viewtopic.php?style=5&p=636992#) behind this project is this:\\n\\n> I think many times new users and some of us need a model with just a few parts held together, we don\'t need the full assembler that does everything [...].\\n\\nGetting started with this tool can be a challenge.  There is no step-by-step tutorial. There\u2019s a [forum thread](https://forum.freecad.org/viewtopic.php?t=72997) with a couple of GIFs and a few test files, only. Here is how it works.\\n\\nThe general idea is that, while the BodyBuilder macro is [running](https://wiki.freecad.org/Macros), you select an object in the viewport, then a sketch in the tree view. As soon as you do that, the object in the viewport gets centered at that sketch\u2019s origin.\\n\\nBut the points in sketches that you align objects to don\u2019t all sit at (0;0;0) exactly, typically they are all over the place. So what you do when you create a sketch is you start it at the origin and then you use the Position property in Attachment Offset to move the sketch in the three dimensions. Once you set it up, you can align a body to that sketch.\\n\\nDoing that means that the body\u2019s Position (Placement) value changes to the point in space defined by the sketch\'s attachment offset.\\n\\n![BodyBuilder macro running in FreeCAD](freecad-bodybuilder-viewport.webp)\\n\\nYou have several options for what to do next when you want to move that object.\\n\\n* You can use the Positioning menu of the macro to set a relative offset that will increment the absolute values.\\n* You can set its position in absolute values, and for that the Properties dock is fairly sufficient.\\n* Or you can use the on-canvas Transform tool.\\n\\nThe macro has a kind of a menu, but really, it\u2019s a different set of controls in generally the same space. The main menu allows looking at the reference sketch\u2019s origin (has to be selected), setting X-Ray mode to the selected body to look through it, and switching to positioning settings. The positioning menu has offset, rotation etc. controls for the attached body. And the binding menu is where you initiate the binding of a body to a sketch or delete an existing binding.\\n\\n![BodyBuilder macro menu structure](freecad-bodybuilder-menu.webp)\\n\\nLeft to right: main menu, positioning menu, binding menu.\\n\\nOnce you get the hang of it, the macro works. It\u2019s three clicks away if you have the Macro toolbar present, or a few more, if you have to use the menu. Workflow-wise, the main problem is repositioning the sketch origin, which takes some extra work. The trick is to open the macro menu, go to Positioning, double-click the sketch to start editing it, then add a point where the offset should be, enable the \u201cReposition Sketch origin\u201d checkbox, then click on that newly added point. This will get you the desired attachment offset value.\\n\\nSo much like Assembly 4, BodyBuilder is built on top of existing core features, but it takes time to set everything up as compared to using constraints in Assembly 2/2+/3 workbenches.\\n\\n## The Manipulator workbench\\n\\nThis workbench focuses on moving and aligning objects and does not allow creating permanent attachments with fixed degrees of freedom. The three major groups of tools are _Mover_ tools, _Align_ tools, and _Measure_ tools. All three have floating palettes that can be docked.\\n\\nThe Mover toolset is how you move and rotate selected objects along the selected axis using numeric input. All changes are relative and affect the absolute position of the object: e.g. if your part is already shifted and rotated, further changes will increment existing displacement and rotation.\\n\\n![Mover tools in the Manipulator workbench](freecad-manipulator-mover-tools.webp)\\n\\nIf it wasn\u2019t for the option to align the view to a selected face and then rotate around this custom axis, the entire set of Mover tools could be considered a duplication of the existing Placement functionality that allows to adjust absolute values with expressions.\\n\\nThe Align tools allow attaching objects by points, edges, centers, and planes to each other. The user has control over a number of options, such as:\\n\\n* whether the bounding box or the center of mass of the reference object should be used;\\n* whether the alignment normal is inverted;\\n* which axis the object should be centered on (any combination is possible).\\n\\n![Align tools in the Manipulator workbench](freecad-manipulator-align-tools.webp)\\n\\nAnd then there\u2019s the Measure tool that can get the radius of an arc or a circle, the length of an edge, the angle between two edges, and more. It works pretty much the same way as in other software: you need to select the first and the second elements when measuring distances between two objects or an angle between two edges. A single click on an arc or a circle will get you the radius, and a single click on an edge will get you its length. The extra label is optional and can be disabled.\\n\\n![Measure tools in the Manipulator workbench](freecad-manipulator-measure-tools.webp)\\n\\nThis Measure tool has been modified and repurposed for the Assembly 4 workbench, so if you see similarities between them, this is not a coincidence.\\n\\nThe part of the feature set that deals with transforming and aligning objects has documentation and 3rd party video tutorials. Work with datum objects (points, lines, planes, LCSs), however, is entirely undocumented.\\n\\nIn a nutshell, despite its basic feature set and a certain overreliance on icons, the Manipulator workbench is a handy toolbox for making quick alignments. Moreover, the tools it provides are accessible in other workbenches like Sketcher, Part, and PartDesign. All you need to do is docking the floating palettes for your convenience.\\n\\n## Part-o-magic workbench\\n\\nThe main point of this workbench is saner automatic management of the project hierarchy. PoM plugs into the core of FreeCAD and makes sure that all new objects are added to the active container no matter what workbench is currently used.\\n\\nBut there are other features like autohiding all parts and bodies other than the one you are currently editing until you are done. Or duplicating objects, transferring them from one container to another, locating dependencies etc. All that has its use when working on complex assemblies, particularly with the top-down approach to designing.\\n\\n![The Part-o-magic workbench](freecad-part-o-magic-workbench.webp)\\n\\nAs FreeCAD starts gaining some of the features that PoM provides, the workbench is likely to grow obsolete.\\n\\n## Summary\\n\\nThe main takeaway from exploring BodyBuilder and Manipulator is that there is a demand for making quick attachments of a small number of parts. So further work on a default assembly workbench should include research focusing on two things. First of all, it\u2019s useful to understand the exact reasons people try to avoid using full-blown assembly workbenches for such tasks. Given that the UX/UI of BodyBuilder and Manipulator are not particularly easier than those of all assembly workbenches we reviewed earlier, this has to do either with project hierarchy, or with using constraints and solvers, or both. Secondly, the future default assembly workbench should be designed in a way that would keep the workflow lightweight and straightforward for these \u201csimple\u201d use cases.\\n\\nAs for Part-o-magic, some of the tools, like the deep copy of containers, look like features that belong to upstream FreeCAD.\\n\\n## Next Up\\n\\nWe are concluding the series. In the next post, we will summarize our findings, as well as the takeaways from the public discussion, and suggest a way forward."},{"id":"default-assembly-workbench-5","metadata":{"permalink":"/blog/default-assembly-workbench-5","source":"@site/blog/2023-03-28/assembly-5.md","title":"Exploring the Assembly 4 workbench","description":"In the previous posts in this series, we talked about the need for a default assembly workbench in FreeCAD and reviewed Assembly 2, A2plus, and Assembly 3. Let\u2019s talk about Assembly 4.","date":"2023-03-28T00:00:00.000Z","formattedDate":"March 28, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"},{"label":"assembly","permalink":"/blog/tags/assembly"},{"label":"assembly4","permalink":"/blog/tags/assembly-4"}],"readingTime":6.435,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"default-assembly-workbench-5","title":"Exploring the Assembly 4 workbench","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development","assembly","assembly4"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"Exploring BodyBuilder, Manipulator, and Part-o-magic","permalink":"/blog/default-assembly-workbench-6"},"nextItem":{"title":"Exploring the Assembly 3 workbench","permalink":"/blog/default-assembly-workbench-4"}},"content":"In the previous posts in this series, we talked about the need for a [default assembly workbench](https://ondsel.com/blog/default-assembly-workbench-1) in FreeCAD and reviewed [Assembly 2](https://ondsel.com/blog/default-assembly-workbench-2), [A2plus](https://ondsel.com/blog/default-assembly-workbench-3), and [Assembly 3](https://ondsel.com/blog/default-assembly-workbench-4). Let\u2019s talk about Assembly 4.\\n\\n## History\\n\\nThe project was started by Zolko in 2019 after some experiments with building assemblies without solvers. Zolko came to the community with extensive knowledge of other CAD programs such as Pro/E, Catia, and T-Flex, but he was very (and probably needlessly) humble about his programming skills.\\n\\n![Assembly 4 commits](freecad-assembly-4-commits.png)\\n\\nJust like with other assembly workbenches, much of the development has been affected by the user community, and a number of features have been contributed by other developers. So far, A4 is the only assembly workbench where the development pace is about the same as it was when the project started, and Zolko isn\u2019t done yet.\\n\\n## Workflow and ease of use\\n\\nAssembly 4 relies on several core principles.\\n\\nFirst off, it is built around the [App:Link API](https://wiki.freecad.org/App_Link) that we already mentioned in previous posts in the series. In a nutshell, rather than creating a full copy of a part, FreeCAD will reference it. This makes models cleaner, and you always work with up-to-date geometry. The workbench also has the concept of a variant link which allows referencing the same object multiple times and using different parameters for each of the linked instances.\\n\\nSecondly, rather than aligning characteristics of two parts (e.g. vertex to vertex), the workbench maps one local coordinate system (LCS) to another. Each body in a part can have multiple local coordinate systems. For example, the part on the screenshot below has 5 of them:\\n\\n![Multiple LCSs in a part](freecad-assembly-4-multiple-lcs.png)\\n\\nWhen an LCS is originally created, it is attached to a very specific feature of a part. However, if the geometry of that part changes, the LCS stays where it was. Which makes it unaffected by the dreaded toponaming issue (now being finally taken care of in upstream FreeCAD). The kind of a feature an LCS is attached to defines what attachment options are available.\\n\\n![Picking features to attach an LCS to](freecad-assembly-4-picking-features-for-lcs.png)\\n\\nThen when a new part is inserted into an assembly, the user specifies the parent part (which part to attach to), the source LCS (from the newly inserted part), and the target LCS (from the parent part):\\n\\n![Mapping LCSs in Assembly 4](freecad-assembly-4-mapping-lcs.png)\\n\\nOnce both LCSs are aligned, all six degrees of freedom are fixed, and thus parts stay attached no matter what. It is, however, possible to \u201crelease\u201d a DOF by using the attachment offset property and expressions.\\n\\nWe\u2019ve seen multiple testimonials that the approach to assembling a model through LCS proves to be more predictable and robust. \\n\\nOn the flip side, the process of setting all LCSs is rather tedious, and attaching one part to another means you have to make more clicks than what you typically get with regular constraints.\\n\\nFinally, Assembly 4 supports both [top-down and bottom-up](https://caeuniversity.com/bottom-up-and-top-down-approach/) design models. We do need to point out though that with the bottom-up approach, it is impossible to insert a part from an external file without opening it as a document.\\n\\n## Features\\n\\nBecause of how the workflow is implemented, Assembly 4 doesn\u2019t have rows and rows of buttons to go through when you need to align one part with another. A large part of the feature set is about managing your assembly: creating new bodies and groups, inserting parts (there\u2019s also a simple integration with the Fasteners workbench), mapping LCSs to each other etc. Apart from LCS, A4 allows creating more datum types: plane, axis, and point. Internally, those are all PartDesign objects.\\n\\nA4 comes with its own tools for creating mirrored, linear, and circular arrays, as well as a measure tool:\\n\\n![Measure tool](freecad-assembly-4-measure-tool.png)\\n\\nFor animation, Assembly 4 uses variables and [expressions](https://wiki.freecad.org/Expressions). For example, if you need to rotate a part, what you do is create a new variable and set it e.g. to 0, then use that variable in the _Angle_ placement property of your part, then open the animation dialog, select the variable to animate, set min and max values to feed into the variable, as well as the increment value, and run the animation.  \\n\\n![Animation in Assembly 4](freecad-assembly-4-animation.png)\\n\\nTheo Janssen\u2019s [strandbeest](https://www.strandbeest.com/), [model by Zolko](https://github.com/Zolko-123/FreeCAD_Examples/tree/master/Asm4_Tutorial4) (CC0-1.0 license) \\n\\nThe implementation is somewhat technical, but it works. The downside of all this is that due to the incomplete multithreading support in FreeCAD you can\u2019t really stop the animation until the current cycle is over. Unfortunately, while animation does the trick in some cases, collision detection would still be really useful.\\n\\nDespite the initial idea to not use a solver that got the entire Assembly 4 adventure going, Zolko did end up creating a solver to recompute all the links and placements in an assembly. In fact, as user \u2018aapo\u2019 [explained in a recent discussion](https://forum.freecad.org/viewtopic.php?p=670464#p670464), A4 has _multiple_ solvers and can use custom external ones. Even more, there\u2019s a branch called [\u2018solver\u2019](https://github.com/Zolko-123/FreeCAD_Assembly4/compare/master...solver) waiting to be completed and merged. It brings the A2plus solver to Assembly 4.\\n\\nThe workbench has good if somewhat scattered documentation. There are [instructions](https://github.com/Zolko-123/FreeCAD_Assembly4/blob/master/INSTRUCTIONS.md) for new users that explain features, basic concepts, and workflow. There are also [several tutorials](https://github.com/Zolko-123/FreeCAD_Examples) written by the principal developer in a dedicated GitHub repository. And some of the user documentation is in the [Examples](https://github.com/Zolko-123/FreeCAD_Assembly4/tree/master/Examples) folder of the main GitHub repository.\\n\\n## Consistency\\n\\nAssembly 4 does nearly everything in dialogs in the Combo View, which is a fairly standard practice. No surprises there.\\n\\nThe workbench can work with parts created by other assemblies, although in our testing it seems like a good idea creating local coordinate systems in those parts prior to inserting them for simplicity\u2019s sake.\\n\\nThere have been [a number of problems](https://forum.freecad.org/viewtopic.php?style=10&t=40363) getting A4 to work well with the TechDraw workbench. Most of them reportedly have been fixed.\\n\\n## Stability\\n\\nFrom the Issues section on GitHub and the forum it appears that Assembly 4 is very stable. Users mostly have problems with the [Bill of Materials](https://github.com/Zolko-123/FreeCAD_Assembly4/blob/master/Examples/ConfigBOM/README.md) feature (there have been [recent fixes](https://github.com/Zolko-123/FreeCAD_Assembly4/pull/403) to address some of the issues). In our limited testing, A4 crashed a few times \u2014 mostly, when editing datum objects. The number of actual bug reports (rather than feature requests) on GitHub is very low (just 1 as of March 27). However, a number of bugs are known and reported to the forum.\\n\\n## Performance\\n\\nWe found some complaints about A4 being slow with complex assemblies. One workaround that appears to improve the situation is disabling the preselection highlight (Edit > Preferences > Display > Colors).\\n\\n## Development Status\\n\\nAssembly 4 is an active project with a growing share of new contributors. There have been multiple tagged releases, and the latest internal version update was in February 2023.\\nCollectively, the community around Assembly 4 keeps the number of pull requests to an absolute minimum (just 3 open out of 245 ever submitted, as of March 27). Zolko responds to most of the bug reports within a day or two, although fixing some of the bugs may take longer than that.\\n\\n## Summary\\n\\nAssembly 4 relies on local coordinate systems to attach parts to each other. The workbench is fairly robust, there are very few severe issues reported by users. However, the LCS approach \u2014 as implemented in A4 \u2014 is low-level and implies a somewhat tiresome process of setting everything up.\\n\\nThe project has a small active team of contributors who keep the amount of unresolved issues and unmerged patches as low as possible. We also found the user community to be really enthusiastic and passionate about the project.\\n\\n## Next up\\n\\nIn the next installment, we\u2019ll take a slight detour and explore several assembly-like solutions: the Manipulator and Part-o-Magic workbenches, as well as the BodyBuilder macro."},{"id":"default-assembly-workbench-4","metadata":{"permalink":"/blog/default-assembly-workbench-4","source":"@site/blog/2023-03-23/assembly-3.md","title":"Exploring the Assembly 3 workbench","description":"This is the fourth part in the series where we explore the possibility of creating a default assembly workbench for FreeCAD. We started out with a conversation about why we need a default assembly workbench in the program, then reviewed Assembly 2 and A2plus. Now let\u2019s talk about the Assembly 3 workbench.","date":"2023-03-23T00:00:00.000Z","formattedDate":"March 23, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"},{"label":"assembly","permalink":"/blog/tags/assembly"},{"label":"assembly3","permalink":"/blog/tags/assembly-3"}],"readingTime":8.475,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"default-assembly-workbench-4","title":"Exploring the Assembly 3 workbench","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development","assembly","assembly3"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"Exploring the Assembly 4 workbench","permalink":"/blog/default-assembly-workbench-5"},"nextItem":{"title":"Exploring the A2plus workbench","permalink":"/blog/default-assembly-workbench-3"}},"content":"This is the fourth part in the series where we explore the possibility of creating a default assembly workbench for FreeCAD. We started out with a [conversation](https://ondsel.com/blog/default-assembly-workbench-1) about why we need a default assembly workbench in the program, then [reviewed Assembly 2](https://ondsel.com/blog/default-assembly-workbench-2) and [A2plus](https://ondsel.com/blog/default-assembly-workbench-3/). Now let\u2019s talk about the Assembly 3 workbench.\\n\\n## History\\n\\nIn 2013, Jonathan Westhues took the FOSS community by surprise releasing the source code of [SolveSpace](https://solvespace.com/index.pl), his parametric 2D/3D CAD software built around a very capable custom solver. Some 4 years later, Zheng Lei aka \u201crealthunder\u201d created a Python binding for the solver, then used it to create his own assembly workbench for FreeCAD.\\n\\n![Commit to Assembly 3 over time](freecad-assembly3-commits.png)\\n\\nFurther changes in the workbench required [patching FreeCAD](https://github.com/realthunder/FreeCAD_assembly3/wiki/Link), so realthunder created a friendly fork of the entire program, which over time became his primary project with many other changes and add-ons not available in upstream FreeCAD by default: the pie menu, transparent docks, and others.\\n\\nSome of the architectural changes have already been merged to upstream FreeCAD, others are getting there. The Assembly 3 workbench continues to be maintained and is available to users of upstream FreeCAD as an addon and is now part of this larger project, the \u2018LinkStage\u2019 fork.\\n\\n## Workflow and ease of use\\n\\nAssembly 3 is substantially different from other assembly workbenches in multiple aspects. Here are some of its most significant characteristics.\\n\\n**Project hierarchy.** In A3, an assembly consists of constraints, elements, and parts. Elements are the features of parts that are used to create a constraint, e.g. a point of one part and a plane of another part. Assemblies can contain sub-assemblies, in which case each sub-assembly will carry its own set of constraints, elements, and parts. This approach makes navigating a complex project fairly straightforward.\\n\\n![Project hierarchy in Assembly 3](freecad-assembly3-project-hierarchy.png)\\n\\n[Graber I3 model by Nemesis81](https://github.com/Nemesis81/GraberI3_Freecad)\\n\\n**Top-down design model.** This approach is technically available in A2 and A2plus, but it is not a recommended way of using those workbenches. Assembly 3 makes the top-down design model a first-class citizen. You can create new parts, then drag them into the Parts section of the project tree, then they will become usable in the assembly.\\n\\n**Bottom-up design model.** This is likely how most A3 users approach creating assemblies. The workbench provides two ways to build an assembly from parts saved as external files: importing from STEP files or linking (see below) FreeCAD projects that are already opened in the program.\\n\\n**Links.** A3 is not the only assembly workbench to rely on the [App::Link API](https://wiki.freecad.org/App_Link) to reference objects instead of copying them, Assembly 4 also does it. But A3 is what this API was designed for in the first place. The general idea is that if you have e.g. 4 screws of the same type to fix a motherboard to a plastic box, you don\u2019t need 4 instances of the same screw geometry. You only need one part that you can reuse via links.\\n\\nCreating a link, however, is all not at all obvious and requires performing a particular sequence of actions: selecting a part (Body object) in the project tree, then selecting an assembly document in the document tabs, then clicking a Link button in the toolbar. Figuring this out without reading documentation or watching a tutorial or asking on the forum is all but impossible.\\n\\n**Fixing parts and freezing sub-assemblies.** While fixing a part in A2plus is a property of a part, the A3 approach is to select a feature and assign a \u201cLocked\u201d constraint to it to eliminate all or some degrees of freedom (this depends on the type of the selected feature). The idea of locking something entirely goes even further. When working on a complex assembly, a particularly useful way to simplify computations is to freeze a sub-assembly. Such a sub-assembly is considered fixed by the solver and is therefore excluded from update calculations.\\n\\n## Features\\n\\nAssembly 3 is the most feature-packed of all existing assembly WBs. It comes with over 40 constraint types, various helper tools, means to control workplanes, and more. It also has a dynamic solver, so you can move parts under constraints.\\n\\nThe workbench does its best to keep track of degrees of freedom to avoid overconstraining an assembly. However, in doing so, it doesn\u2019t make it easy to indicate where the problem is exactly. All it does is notifying the user that there are inconsistent constraints. It is up to the user to locate the offensive elements and constraints.\\n\\nThere are more caveats. In particular, the vast amount of features in this workbench raises the expectations for UX/UI. Assembly 3 has an overwhelming UI. It comes with no less than six toolbars, three out of which are different groups of constraints.\\n\\n![Assembly 3 toolbars](freecad-assembly3-toolbars.png)\\n\\nThere\u2019s the main constraints group and two additional groups of constraints. This takes a lot of getting used to. We\u2019ve seen experienced users of the workbench making really useful elaborate tutorials about it and yet failing to locate the constraint they need on the first attempt.\\n\\nThings don\u2019t get much better with the [ModernUI](https://wiki.freecad.org/ModernUI_Workbench) add-on that creates a Ribbon-like top toolbar. You get readable labels (something the late [Jef Raskin](https://en.wikipedia.org/wiki/Jef_Raskin) would appreciate), but you also get a large scrollable area:\\n\\n![Assembly 3 with a Ribbon-like toolbar](freecad-assembly3-with-ribbon-like-ui.png)\\n\\n[Graber I3 model by Nemesis81](https://github.com/Nemesis81/GraberI3_Freecad)\\n\\nAssembly 3 is not uniquely complex here. Arch, FEM, TechDraw, and a few other workbenches also have a similar or even larger amount of UI to deal with. This suggests that there may be a need for a general UX/UI review and a better strategy for organizing the user interface and designing the interaction \u2014 something that would be solved on the core level and then propagated to all workbenches, default and 3rd-party alike.\\n\\nThree sorely missing features are collision detection, visual control over degrees of freedom, and the generation of BOM. Collision detection was [planned](https://forum.freecad.org/viewtopic.php?p=253170#p253170) back in 2018, the idea was to use the [Bullet](https://pybullet.org/) physics engine, but this hasn\u2019t materialized yet. Regarding DOF control, it is virtually impossible to find out how many degrees of freedom a part has without trial-and-error by attempting to transform it and \u2014 sometimes \u2014 looking at the output log in the built-in console (A2plus solves that by optionally displaying an indicator for each part in the viewport). And as for BOM, realthunder already [explored in detail](https://github.com/realthunder/FreeCAD_assembly3/wiki/Expression-and-Spreadsheet) the requirements for developing BOM generation two years ago, but there is no code yet.\\n\\nThe [wiki page](https://wiki.freecad.org/Assembly3_Workbench) for the assembly at FreeCAD\u2019s website provides some basic documentation on features, and the project\u2019s [own wiki](https://github.com/realthunder/FreeCAD_assembly3/wiki) explores basic concepts of A3 and provides several tutorials. However, neither can serve as a reference guide, hence finding out what some of the features do will require original research by users. Notably, there\u2019s a lot of YouTube tutorials on using Assembly 3. Some of the most prolific A3 educators are [Oficine Robotica](https://www.youtube.com/@OficineRobotica/videos) and [Joko Engineeringhelp](https://www.youtube.com/@OficineRobotica/videos).\\n\\n## Consistency\\n\\nThe workbench is generally consistent with how the rest of FreeCAD operates. In our testing, nothing stands out as particularly peculiar. A3 will also use parts created with other workbenches as long as the imported parts are moved into the Parts section of the assembly\u2019s hierarchy.\\n\\n![Assembly3 project in LinkStage branch](freecad-assembly3-graber-i3-model.png)\\n\\n[Graber I3 model by Nemesis81](https://github.com/Nemesis81/GraberI3_Freecad)\\n\\n## Stability\\n\\nAssembly 3 currently has over 300 unresolved bugs and feature requests filed to its [issue tracker](https://github.com/realthunder/FreeCAD_assembly3/issues). However, this cannot be used as a sole indicator of the maintainer\u2019s responsiveness: for some reason, it\u2019s fairly common for users to report bugs associated with FreeCAD itself rather than with the workbench in question. Given that the \u2018Linkstage\u2019 fork of FreeCAD also has over 300 unresolved bug reports and feature requests, this is obviously too much for one person to handle, even though he gets some help with triaging reports.\\n\\nNone of the currently open bug reports are crash reports for the Assembly 3 workbench. Having said that, we did experience a few random crashes when working with the WB. We also looked at workbench crashes reported in the past and found that realthunder pays a lot of attention to that and typically fixes those within several days.\\n\\n## Performance\\n\\nWhile it\u2019s possible to exclude sub-assemblies from computation by freezing them and thus saving the resources for when they are needed, this will not be sufficient in all use cases. With complex assemblies (over a hundred parts), A3 can become really slow. \\n\\nMoreover, even in simple use cases (two parts, two constraints), Assembly 3 will often fail to perform an axial rotation smoothly with 1 DOF left, while the rotation increment is as small as 1\xb0.\\n\\n## Development Status\\n\\nAlthough there have been contributions from at least a dozen more people, realthunder remains the author of 92% of all commits to the workbench since project\u2019s inception. The project is maintained, however its active development phase ended in 2019. The last workbench release was tagged in 2020 and the latest internal version is 0.11.4 from November 2022. We also found that the development remains uncoupled from the upstream SolveSpace project: multiple changes and new features related to constraints appear to have never made its way to the workbench.\\n\\n## Legal Status\\n\\nBecause Assembly 3 relies on a fork of SolveSpace\u2019s source code, it\u2019s available under the terms of GPLv3+. This makes its inclusion in the FreeCAD application problematic. Thus the workbench can only be installed separately in upstream FreeCAD as an addon.\\n\\n## Summary\\n\\nAssembly 3 is substantially more advanced than either A2 or A2plus workbenches: generally better workflow, better support for bottom-up design, better-designed project hierarchy, vastly more constraint options, and the list goes on. The project also has an avid user community and the developer is typically fast to respond to reports of severe bugs.\\n\\nAt the same time, A3 has a number of usability issues and important missing features such as BOM generation. The solver\u2019s license also makes this workbench an unlikely choice for a foundation of a potential default workbench in FreeCAD.\\n\\n## Next up\\n\\nNow that we\u2019ve explored Assembly 3, we are getting closer to the end of the series. In the next installment, we\u2019ll take a close look at the Assembly 4 workbench developed by Zolko."},{"id":"default-assembly-workbench-3","metadata":{"permalink":"/blog/default-assembly-workbench-3","source":"@site/blog/2023-03-21/assembly-2+.md","title":"Exploring the A2plus workbench","description":"We\u2019ve already talked about the need for a default assembly workbench in FreeCAD and reviewed Assembly 2. Now let\u2019s get into the nitty-gritty of the A2plus workbench.","date":"2023-03-21T00:00:00.000Z","formattedDate":"March 21, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"},{"label":"assembly","permalink":"/blog/tags/assembly"},{"label":"assembly2","permalink":"/blog/tags/assembly-2"}],"readingTime":8.875,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"default-assembly-workbench-3","title":"Exploring the A2plus workbench","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development","assembly","assembly2"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"Exploring the Assembly 3 workbench","permalink":"/blog/default-assembly-workbench-4"},"nextItem":{"title":"Exploring the Assembly 2 workbench","permalink":"/blog/default-assembly-workbench-2"}},"content":"We\u2019ve already talked about the need for a [default assembly workbench](https://ondsel.com/blog/default-assembly-workbench-1) in FreeCAD and [reviewed Assembly 2](https://ondsel.com/blog/default-assembly-workbench-2). Now let\u2019s get into the nitty-gritty of the A2plus workbench.\\n\\n## History\\n\\nA FreeCAD user kbwbe started working on this project in 2018 following [experiments](https://forum.freecad.org/viewtopic.php?style=1&t=29207) with a new solver developed on top of the pre-existing Assembly 2 workbench:\\n\\n> I developed a small prototype of yet another solver. It is in a very early state now and is only capable of handling plane/circularedge/axis-constraints. But it can easily be extended. It consists only of one file, which is attached. The base concept is inspired by physics. [...] It is just a prototype and many things are still missing. But the idea seems to work. I am working with a refurbished assembly2-workbench. I like the base concepts of it very much and did some bigger projects with it. \\n\\nHaving received initial feedback, kbwbe created a [public repository](https://github.com/kbwbe/A2plus) on GitHub and continued hacking on the new workbench publicly.\\n\\n![Commits History for the A2plus Workbench](freecad-a2plus-wb-commits.png)\\n\\nDespite an activity plunge during the pandemic, A2plus is still being actively developed and receives new features and bug fixes.\\n\\n## Workflow and ease of use\\n\\nA2plus follows the same general idea as its predecessor: create parts as separate files, align them with constraints, solve. Just like Assembly 2, this workbench supports sub-assemblies.\\nThere are some differences though. The one that stands out immediately is that, rather than creating one constraint object in the project tree, A2plus creates references to the same constraint in both involved parts.\\n\\n![A2plus Constraints in the Project Tree](freecad-a2plus-constraints-in-project-tree.png)\\n\\nAnother difference is that a part in A2plus is a special type of an object. So it\u2019s possible to create a new part from within the workbench and fill it with objects e.g. in the Part Design workbench. But the part will have to be manually converted to an A2plus part to become usable in the workbench. The caveat here is that even then such a part will not be added to the BOM: only the parts imported from external files will be displayed there. Overall, the top-down design approach is not favored by A2plus, as earlier [noted by kbwbe](https://forum.freecad.org/viewtopic.php?style=1&p=265666#p265666) in the FreeCAD forum:\\n\\n> Leaving PartDesign bodies within the assembly is not the intended workflow. Best way is to import everything. Converting is also not the preferred way. Even all parametrics of the parts get lost.\\n\\nUnlike Assembly 2, the A2plus workbench can also load user-selected objects from another FreeCAD project. In this case, the workbench will reference the object from the file, so FreeCAD will pick any changes made to the original project when you click the Update button.\\n\\n![Importing Objects from a FreeCAD Project File](freecad-a2plus-load-objects-from-fc-file.png)\\n\\nIn terms of general user experience, A2plus is a major improvement over Assembly 2. Here are some examples of user-visible changes:\\n\\n- When features (points, planes etc.) of multiple parts are selected, the workbench automatically makes available only the constraints that can be used with these features. This removes a lot of guesswork for new users.\\n- Imported parts can easily be opened for editing as separate documents. All edited parts then can be updated with a single click.\\n- When cleaning up an assembly, it\u2019s possible to easily delete all constraints associated with a part.\\n\\n## Features\\n\\nThe workbench has a respectable set of constraints: Point-to-Point, Point-on-Line, Point-on-Plane, Sphere-to-Sphere, Circular-Edge, Axis-to-Axis, Axis-to-Plane, Axis-Plane-Normal, Angular Axis-to-Plane, Planes-Parallelism, Planes-Coincident, Angled-Planes, Center-of-Mass. This covers a variety of use cases.\\n\\n![Constraints Available in A2plus](freecad-a2plus-constraint-options.png)\\n\\nA2plus comes with an autosolver. The way it works, however, is somewhat unreliable. Case in point: select two planes, create a Plane-Coincident constraint, solve, accept. Then select the constraint and change its Offset parameter in the Combo View. The autosolver will not update the position of the object that has the first plane, you will have to click the Solve button for this change to take effect.\\n\\nThere\u2019s a number of convenience features specific to A2plus (as compared to Assembly 2) such as placing labels on parts in the viewport for easier navigation or making parts\u2019 fills transparent.\\nThe behavior of A2plus is configurable. Settings are available in the Preferences dialog:\\n\\n![A2plus Preferences](freecad-a2plus-wb-preferences.png)\\n\\nSome features of the original Assembly 2 workbench are unavailable. Notably, the animation of the assembly for collision analysis is missing.\\n\\nThe A2plus workbench has a good [reference guide](https://wiki.freecad.org/A2plus_Workbench) on FreeCAD\u2019s wiki but lacks official tutorials that explain the workflow. The community, however, stepped up and provided a sufficient number of YouTube tutorials on using A2plus for a variety of use cases: [mechanical design](https://www.youtube.com/watch?v=tI4trcyFwvs), [woodworking](https://www.youtube.com/watch?v=rIv15hX6Isw), etc.\\n\\n**Update 2023-03-26:** There is at least [one documented case](https://forum.freecad.org/viewtopic.php?f=20&t=46024) where the precision of the A2plus solver was not sufficient to get the job done. The workbench developer [explained](https://forum.freecad.org/viewtopic.php?p=395617#p395617) this by having to find a compromise between speed (responsiveness of the WB) and accuracy due to limited calculation power available to a solver written in Python.[^1]\\n\\n[^1]: This issue was raised in community discussion\\n\\n## Consistency\\n\\nA2plus does a few things differently from many other workbenches. The most user-visible difference is how constraint settings are displayed. When a new constraint is being added, FreeCAD displays a floating dialog:\\n\\n![Constraint Properties in A2plus](freecad-a2plus-wb-constraint-settings.png)\\n\\nDouble-clicking the constraint in the project tree reopens this floating dialog. However, the very same information is displayed in the Combo View. So there\u2019s two competing approaches to editing settings of a constraint.\\n\\nSimilarly, the first button in the Constraint toolbar opens another floating window that duplicates the list of constraints that is already available in that toolbar. This is not a common (although fairly optional-to-use) UI solution for FreeCAD.\\n\\nAs already noted, some objects require a conversion to an A2plus part, like the basic 3D objects created in the Part workbench. At the same time, this assembly workbench has no problem working with parts created in e.g. SheetMetal WB.\\n\\nOne important caveat of A2plus is that it doesn\u2019t use the standard [App::Link](https://wiki.freecad.org/App_Link) machinery to reference objects in other documents. Parts added to the document this way cannot be used in an assembly. \\n\\nSome actions, like adding a part from an external file are not correctly added to the undo buffer so they cannot be reverted in the normal way.\\n\\n## Stability\\n\\nAs of publishing this overview, there are no reported crashers that aren\u2019t fixed. There haven\u2019t even been many before: the issue tracker only lists 3 bugs in A2plus that ever crashed FreeCAD, and git log likewise lists only a few fixes for crashes. However, we were able to crash the program by pressing Ctrl+Z to undo while moving a part under constraints.\\n\\nThe main developer typically responds to bug reports within the first few days. There\u2019s a small number of bug reports with mild severity from 2019 where either no detailed information was provided by the reporter, or the developer couldn\u2019t replicate the issue, or the report slipped through developer\u2019s fingers. The workbench occasionally exhibits inconsistent or glitchy behavior like failing to delete a conflicting constraint. Other than that, nothing particularly bad stands out.\\n\\n## Performance\\n\\nAssemblies are inherently complex beasts. It takes a substantial amount of talent, time, and effort to make a fast solver \u2014 a combination that not every volunteer has at their disposal. We\u2019ve definitely seen complaints like [this one](https://www.hobby-machinist.com/threads/freecad-assembly-a2plus-v0-4-54b.97301/) about performance issues in the A2plus workbench even with fairly simple assemblies. However, in our limited testing, we were unable to come up with conclusive evidence for assemblies \u201cblowing up\u201d after changes. Simple assemblies (up to 40 parts) did not represent a major issue for A2plus. But there was noticeable rendering slowdown when moving parts under constraints.\\n\\nAt least one of the reasons for possible performance issues according to the main A2plus developer is the inefficient use of memory. This is how he [explains](https://github.com/kbwbe/A2plus/issues/378#issuecomment-612878010) it and goes on to give very useful hints about ways a programmer could deal with Python limitations:\\n\\n> Memory management using Python as a programming language is not that easy and some memory leaks cannot be completely avoided. Python is keeping a lot of internal lists, which are immortal and their memory is not given back to the system during the lifetime of the program. So it is not possible to delete no more used objects from memory directly, as it is possible with \\"C/C++\\". Every object, which is not used anymore, is deleted (or sometimes it is not for various reasons), from Python\'s garbage collector.\\n> The code can only be optimized in order to reduce memory consumption. (using slots, avoiding string concatenation etc). I will have a look at this next time, where it is possible. But this is a bunch of work and will need a lot of time. And it will never be perfect.\\n\\n## Development\\n\\nThe main developer responds to proposed contributions rather fast: many PRs by drive-by contributors are merged within days of submission, sometimes on the same day. Just 1 out of 452 pull requests is sitting unapplied on GitHub.\\n\\nIn the fall of 2022, a new regular contributor joined the project. His activity now rivals that of kbwbe.\\n\\nUnlike with the original Assembly 2 workbench that had zero releases, the main developer of A2plus regularly tagged releases until November 2022 (a total of 101 tags so far). Releases mostly represent one or two bug fixes.\\n\\n## Community\\n\\nA2plus has one of the longest dedicated threads in the forum. However, since 2021, the activity of discussions has noticeably decreased: just 16 messages in the main thread in 2021, and 12 messages in 2022. The reason for this is unclear but might indicate that the interest towards the workbench has been decreasing as users move to other options.\\n\\n## Summary\\n\\nA2plus represents a major improvement over the original Assembly 2 workbench in terms of both workflow, features, and usability. It has more types of constraints, more convenience features, and better supports single-user workflows. It\u2019s also sufficiently stable and has two developers who actively merge patches from other contributors. At the same time, the workbench has some unconventional UX/UI solutions and is reportedly prone to performance issues that are not easily resolved.\\n\\n## Next up\\n\\nIn the next installment, we\u2019ll take a close look at Assembly 3, a workbench that actively uses a solver from another free/libre CAD program, SolveSpace.\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"default-assembly-workbench-2","metadata":{"permalink":"/blog/default-assembly-workbench-2","source":"@site/blog/2023-03-16/assembly-2.md","title":"Exploring the Assembly 2 workbench","description":"This is part two of our series on the need for an integrated default assembly workbench for FreeCAD. Part One gives and introduction and explains our methods. In this part, we take a closer look at Assembly 2, one of the early approaches to adding this feature set to FreeCAD.","date":"2023-03-16T00:00:00.000Z","formattedDate":"March 16, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"},{"label":"assembly","permalink":"/blog/tags/assembly"},{"label":"assembly2","permalink":"/blog/tags/assembly-2"}],"readingTime":5.5,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"default-assembly-workbench-2","title":"Exploring the Assembly 2 workbench","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development","assembly","assembly2"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"Exploring the A2plus workbench","permalink":"/blog/default-assembly-workbench-3"},"nextItem":{"title":"FreeCAD needs a default assembly workbench - Introduction","permalink":"/blog/default-assembly-workbench-1"}},"content":"This is part two of our series on the need for an integrated default assembly workbench for FreeCAD. [Part One](/blog/default-assembly-workbench-1) gives and introduction and explains our methods. In this part, we take a closer look at Assembly 2, one of the early approaches to adding this feature set to FreeCAD.\\n\\n### History\\n\\nA FreeCAD user publicly known as Hamish started this project in late 2014. This is the [original announcement](https://forum.freecad.org/viewtopic.php?style=4&t=8577):\\n\\n>I have written an assembly workbench for FreeCAD v0.15, which I am posting here for everyone\'s perusal. [...] I realize that there is mostly likely heavy development on FreeCAD\'s inbuilt assembly wb, which i could have just used for my assembly needs.\\nHowever since FreeCAD provides such an excellent environment for building custom wbs, I decided to rather write my own wb exactly tailored to my needs [...]\\nHope someone else finds the assembly2 wb useful\\n\\n2015 was the most active year for the project. However, in 2016, the original developer [stopped writing new code](https://forum.freecadweb.org/viewtopic.php?f=17&t=16591) and the next maintainer, Roland Frank, [passed away in 2017](https://forum.freecad.org/viewtopic.php?f=8&t=25673). Hamish and another contributor, kbwbe, continued merging occasional pull requests: bug fixes, a Newton solver, and a port to Python 3 to make the workbench generally supported by newer versions of FreeCAD.\\n\\n![commit graph](./freecad-assembly-2-commit-history.png)\\n*Assembly2 Commit History*\\n\\nHowever, in 2018, kbwbe started working on a [rewrite of Assembly 2](https://github.com/kbwbe/A2plus) and eventually dropped out of contributing to this workbench. There have been no changes in the git repository since 2019.\\n\\n### Workflow and ease of use\\n\\n[Assembly 2](https://github.com/hamish2014/FreeCAD_assembly2) only supports the bottom-up approach where you design and save parts as files and then import them for an assembly into a new FreeCAD project. It will read both FreeCAD, OBJ, IGES, and STEP files. The workbench expects that the user either enables the visibility of just one body in the design file or creates files with single-body parts. Sub-assemblies are possible, however.\\n\\n![Graber I3 model by Nemesis81](./freecad-assembly-2-01.png)\\n*[Graber I3 model by Nemesis81](https://github.com/Nemesis81/GraberI3_Freecad/)*\\n\\nAfter importing, spatial constraints need to be added and solved. Imported parts can be manually updated when the linked original file changes. Overall, it\u2019s a straightforward workflow: import multiple parts from respective files, select parts\u2019 features, add constraints, solve, done.\\n\\nProblems begin to arise when a change is required. Assembly 2 does not have a dynamic solver. So once you change something like a distance or an angle, you have to create a constraint anew. Moreover, only some features in the workbench support undo/redo.\\n\\n### Features\\n\\nConstraints available in Assembly 2 are limited to circular edge, plane, axial, angular (for planes), and spherical surface. There are a few tools to work with constraints like flipping their directions.\\n\\nOnce constraints are done and solved, you can animate degrees of freedom to check for clearances and collisions in any combination of their respective positions. Additionally, it\u2019s possible to check the entire assembly for overlapping parts.\\n\\nAssembly 2 also allows creating a list of parts, for which it uses the [Drawing Dimensioning](https://github.com/hamish2014/FreeCAD_drawing_dimensioning) workbench by the same original developer. Which, in return, only works with page objects created with the Drawing workbench. It\u2019s also possible to create one object from all or just the selected parts in an assembly to display them in a drawing. Notably, the [Drawing](https://wiki.freecad.org/Drawing_Workbench) workbench is now deprecated and replaced by the [TechDraw](https://wiki.freecad.org/TechDraw_Workbench) workbench.\\n\\n### Consistency\\n\\nThe way the user interface is organized is in line with the rest of FreeCAD. However, for people new to assemblies, watching a few tutorials on YouTube will be really helpful. Unfortunately, the documentation on the workbench in the FreeCAD\u2019s wiki is scarce: it only lists available features and doesn\u2019t provide any information on them that you wouldn\u2019t be able to see in the tooltips of the actual user interface.\\n\\nAssembly 2 can work with parts created in other workbenches like [SheetMetal](https://wiki.freecad.org/SheetMetal_Workbench) or parts created with \u2018importer\u2019 workbenches like [KiCadStepUp](https://wiki.freecad.org/KicadStepUp_Workbench) or [Fasteners](https://wiki.freecad.org/Fasteners_Workbench). However, because it demands just one body to be visible in an imported project and does not allow choosing which body to import, placing an entire board into an enclosure will require a lot of time and patience.\\n\\nThe workbench also doesn\u2019t follow the more recent trend of making 3rd party workbenches translatable.\\n\\n![Graber I3 model by Nemesis81](./freecad-assembly-2-02.png)\\n*[Graber I3 model by Nemesis81](https://github.com/Nemesis81/GraberI3_Freecad/)*\\n\\n### Stability\\n\\nBecause this assembly workbench is not maintained, the issue tracker has been deactivated on GitHub. So there\u2019s no aggregated information on bugs and their severity. When used with a recent version of FreeCAD, the workbench has various glitches. The general recommendation appears to be keeping a copy of an older FreeCAD version (typically, v0.16 or v0.17) around to open old files that use this assembly workbench. For new users, the recommendation is to try one of the newer assembly workbenches.\\n\\n### Performance\\n\\nDespite its simplicity, Assembly 2 can be very slow on medium-to-complex projects. One of the recommendations to deal with that is by creating [sub-assemblies](https://forum.freecad.org/viewtopic.php?p=146813#p146813): effectively saving an assembly as a FreeCAD project, then importing it to another assembly. This removes some complexity from the project but reportedly [does not solve](https://forum.freecad.org/viewtopic.php?style=4&t=26803) all performance issues.\\n\\nMoreover, the interference checker takes the simple road of trying all possible pairs, and this can go on for a very long time.\\n\\n### Development Status\\n\\nThere have never been official versioned releases of Assembly 2. Active development on this workbench ceased in 2016-2017. This workbench has been unmaintained since 2019. One of its features (list of parts) depends on another unmaintained 3rd party workbench by the same original developer, and another feature (consolidation of objects) depends on a deprecated official workbench (Drawing).\\n\\n### Summary\\nAssembly 2 is a fairly straightforward yet very barebone solution for creating assemblies. It imposes a particular way of organizing a project, has a limited set of constraints, requires either a lot of planning or a lot of manual work because of lacking a dynamic solver, relies on obsolete workbenches for some of its features, and has been unmaintained since 2019. As such, it has served its purpose well and is now generally considered superseded by A2plus, Assembly 3, and Assembly 4.\\n\\n### Next up\\n\\nIn the next installment, we\u2019ll take a close look at the major iteration of this workbench called A2plus.\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"default-assembly-workbench-1","metadata":{"permalink":"/blog/default-assembly-workbench-1","source":"@site/blog/2023-03-14/assembly-default.md","title":"FreeCAD needs a default assembly workbench - Introduction","description":"FreeCAD is an inherently modular program where major features can be developed by 3rd parties as workbenches. This is great for creating a healthy ecosystem of add-ons and catering to a diverse group of users: tinkerers, professional mechanical engineers, architects, furniture designers etc. The obvious benefit of that is that creating and deploying a solution for a particular user group does not require syncing with FreeCAD\u2019s release cycle that can be as long as a few years. Since v0.17, FreeCAD makes it very easy to install and update various workbenches developed by its passionate community.","date":"2023-03-14T00:00:00.000Z","formattedDate":"March 14, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"},{"label":"assembly","permalink":"/blog/tags/assembly"}],"readingTime":6.945,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"default-assembly-workbench-1","title":"FreeCAD needs a default assembly workbench - Introduction","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development","assembly"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"Exploring the Assembly 2 workbench","permalink":"/blog/default-assembly-workbench-2"},"nextItem":{"title":"I hire people to work on a FOSS project. Here\'s how I evaluate GitHub profiles","permalink":"/blog/evaluating-github-profile"}},"content":"FreeCAD is an inherently modular program where major features can be developed by 3rd parties as workbenches. This is great for creating a healthy ecosystem of [add-ons](https://wiki.freecad.org/Std_AddonMgr) and catering to a diverse group of users: tinkerers, professional mechanical engineers, architects, furniture designers etc. The obvious benefit of that is that creating and deploying a solution for a particular user group does not require syncing with FreeCAD\u2019s release cycle that can be as long as a few years. Since v0.17, FreeCAD makes it very easy to install and update various workbenches developed by its passionate community.\\n\\n### Why a Default Assembly Workbench?\\n\\nThe drawback of developing major features as 3rd party workbenches is that these features are not part of the out-of-box user experience and thus tend to be niche-oriented, less tested, have more bugs, lack documentation etc. Meanwhile users expect major features to be immediately available and be specialization-agnostic, easy to use, robust, performant, and well-documented.\\n\\nCreating an [assembly](https://en.wikipedia.org/wiki/Assembly_modelling) is one of those essential features. It\u2018s commonly required when designing something more complex than a simple replacement part. However in FreeCAD, this feature is only available as a separately installed workbench. In fact, there are 3 competing workbenches and 1 more workbench that has been unmaintained for almost 4 years now. And then there are several more workbenches like [Manipulator](https://wiki.freecad.org/Manipulator_Workbench) or [Part-o-magic](https://github.com/DeepSOIC/Part-o-magic), that can be used to align parts in some way.\\n\\nThis effectively means that instead of launching FreeCAD, creating an assembly, and loading parts into it for aligning, users are expected to first explore at least half a dozen options by trial and error. The expectation that this much choice is good for them seems unrealistic.\\n\\nMoreover, having this many competing solutions leads to development fragmentation, makes following tutorials confusing, and makes progress on the core slower as developers have to consider the impact on multiple approaches to assembly. Moreover, there is a strong demand for technical design tools where collaboration is easy. But collaboration implies using the same tools and standards. Having multiple competing assembly options is the opposite of that.\\n\\nOur intention is to start a broad conversation. We want to highlight the need and build consensus that a single default workbench is in the best interest of our users. We\'re also proposing criteria for evaluating the current assembly workbenches. Our goal should be to identify the best foundation and feature set required for an assembly workbench to be included in the core FreeCAD distribution. Such a solution doesn\'t need to meet everyone\'s needs. Rather, it should strive to be a general-purpose solution for at least 80% of the use-cases.\\n\\nWe do understand the implications of carrying out and publishing this research and calling for a default. Whatever default assembly workbench FreeCAD gets, it automatically moves into focus and gets more tutorials, more testing, more bug reports, more improvements etc. And the non-default workbenches will automatically get less attention and their developers will likely have to cater to more niche areas. So this requires careful treatment. Part of that is being objective when evaluating the existing options.\\n\\n### Methodology\\n\\nTo make a fair assessment, we need to settle on a set of evaluation criteria that cover most, if not all aspects. There is one important disclaimer we want to make here though: as much as maintenance and responsiveness of developers matter, we evaluate software, not people. Here is what we came up with.\\n\\n**Ease of use** It\u2019s difficult to design software that is compelling to both users who are new to solid parametric modeling and experienced users of competing products. However, it\u2019s natural to expect a workbench that has a merit of its own and provides an obvious path to creating an assembly from start to finish, with as little friction as possible. We also expect the best workbench to be efficient in team work where parts can be submitted by different users and can be iterated upon.\\n\\n**Consistency** This is a multifaceted topic. Because FreeCAD is highly modular, developers have a lot of freedom in how they implement features. Ideally, the assembly workbench should follow roughly the same UI conventions as the rest of FreeCAD. This means that a user who is already familiar with designing parts with FreeCAD should have little-to-no problems figuring out how to make assemblies. Additionally,  an assembly workbench should function well with other workbenches, including add-on workbenches. For example, it should be able to work with enclosures designed with the SheetMetal workbench. It should conform to the same standards for translation and macro scriptability as other core workbenches.\\n\\n**Features** We are looking at the set of available constraints, how picking edges, faces and other features for alignment works, how imported parts can be managed in complex assemblies etc. However, having the most features doesn\u2019t necessarily translate to the best user experience. A much better indication is how well a workbench serves the purpose it was designed for.\\n\\n**Stability** There are multiple factors at play when you evaluate stability of software. First, there\u2019s the severity of issues. You can stumble upon a warning that doesn\u2019t prevent you from accomplishing a task but is a mild annoyance. Or you can run into a crasher that loses unsaved changes or corrupts the model, which is a really bad user experience. This is not a problem for our evaluation: we can easily separate minor issues from crashers in reports.\\n\\nThen there\u2019s the number of users. If one workbench has 100 users and 10 unresolved crash reports, and another workbench has 10,000 users and also 10 unresolved bug reports, this likely means that the latter is more thoroughly tested and has less undiscovered issues. However, we have no way of knowing how many users each assembly workbench has. The amount of stars for a GitHub repository doesn\u2019t sound like a fair way to judge on popularity, especially since visiting a GitHub repository is not how you install a FreeCAD workbench these days. We can get some sense of the user base from looking at how many unique users participated in discussing this or that assembly workbench on the forum. But this should be taken with a grain of salt as this approach doesn\u2019t account for the part of users who stay in the shadows.\\n\\nAlso, reporting a bug should be simple enough. If it\u2019s too difficult to do, that\u2019s how you get bugs that continue to be unresolved for years, outside of developers\u2019 radar. Fortunately, all four assembly workbenches are hosted on GitHub and thus have the same fairly sensible UX/UI for reporting bugs. That gives us some baseline.\\nThus, given the limitations, we draw conclusions from unresolved stability issues reported to GitHub and relevant posts to the [FreeCAD Forum](https://forum.freecadweb.org/).\\n\\n**Speed** Just like with stability, it\u2019s hard enough to be a good judge of performance. Hardware specs vary wildly between users, and so does the complexity of assemblies. But if there is a significant amount of complaints about the performance in case of fairly simple assemblies (let\u2019s say, 10 to 20 parts), something is obviously wrong.\\n\\nThere is one more aspect that we considered as well and ultimately decided against \u2014 code quality and extensibility. It is important to focus on the code that needs as little effort as possible to extend the feature set and maintain it. However, all four existing workbenches are between 7,600 and 14,900 lines of code. This is perfectly manageable in terms of time spent on potential refactoring. That said, having an engaged community grown around a particular workbench and willing to take action is a lot more important. You can do anything with an experienced, passionate team.\\n\\n### What Now\\nIn the next installments, we will evaluate [Assembly2](https://wiki.freecad.org/Assembly2_Workbench), [A2plus](https://wiki.freecad.org/A2plus_Workbench), [Assembly 3](https://wiki.freecad.org/Assembly3_Workbench), and [Assembly 4](https://wiki.freecad.org/Assembly4_Workbench) by the criteria explained above. Then we will come up with a proposal and continue the discussion with the FreeCAD community.  We [invite feedback](https://github.com/orgs/Ondsel-Development/discussions/2) on this issue and our approach.\\n\\n### [Part 2: Assembly 2](https://ondsel.com/blog/default-assembly-workbench-2/)\\n\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"evaluating-github-profile","metadata":{"permalink":"/blog/evaluating-github-profile","source":"@site/blog/2023-03-02/github-profile.md","title":"I hire people to work on a FOSS project. Here\'s how I evaluate GitHub profiles","description":"Should hiring managers base a decision on someone\u2019s GitHub profile? No. But will it ever hurt to have a robust GitHub account? Also no.","date":"2023-03-02T00:00:00.000Z","formattedDate":"March 2, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":5.37,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"/img/Rebecca-Dodd-profile.JPEG","imageURL":"/img/Rebecca-Dodd-profile.JPEG"}],"frontMatter":{"slug":"evaluating-github-profile","title":"I hire people to work on a FOSS project. Here\'s how I evaluate GitHub profiles","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"/img/Rebecca-Dodd-profile.JPEG","imageURL":"/img/Rebecca-Dodd-profile.JPEG"}],"tags":["freecad","development"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"FreeCAD needs a default assembly workbench - Introduction","permalink":"/blog/default-assembly-workbench-1"},"nextItem":{"title":"Don\'t hold your breath for FreeCAD\'s topological naming fix","permalink":"/blog/freecad-topological-naming"}},"content":"Should hiring managers base a decision on someone\u2019s GitHub profile? No. But will it ever hurt to have a robust GitHub account? Also no.\\n\\nI\u2019m a hiring manager for a new open core company, and I watched the discussion under [@manuel_frigerio\u2019s tweet](https://twitter.com/manuel_frigerio/status/1629059975418089474) blow up with amusement. The debate about using people\u2019s GitHub profiles to make hiring decisions isn\u2019t new. The typical backlash ensued and Manuel has since made his tweets private. And sure, using someone\u2019s GitHub profile, particularly their contribution graph, to judge their skills as a developer is flawed.\\n\\n![unpopular tweet](./tweet.png)\\n\\n# How _not_ to evaluate a candidate based on their GitHub account\\n\\nPlenty of talented programmers are writing code that never makes it to GitHub[^1] because they\u2019re working exclusively on closed source software or have climbed the ladder to a management position. There are also plenty of bad actors who can fudge their contribution graph by \u201c[updating a readme file multiple times a day](https://twitter.com/pdtit/status/1629688787474481159)\u201d or even [faking their Git commit history](https://twitter.com/dhruvdang/status/1629269041801211905).\\n\\nThis seems obvious, but based on the discussion from last week it bears saying again: If you\u2019re a hiring manager and you\u2019re judging an applicant\u2019s skills and experience by how many green squares they have (or how dark they are), this is the most superficial way to look at it, and it won\u2019t tell you anything about whether this person makes valuable contributions or is pleasant to work with.\\n\\nBut if you\u2019re [recruiting engineers to work on an open source or open core project (as I am)](https://ondsel.com/careers/), engaging with open source is an intrinsic part of the job and someone\u2019s GitHub account gives extremely valuable insight into a candidate\u2019s suitability for that role. And if you\u2019re in the job market and don\u2019t have an active GitHub profile, you could be missing out on opportunities by overlooking FOSS.\\n\\n# What you can actually judge from someone\u2019s GitHub profile\\n\\n### Do they have exposure to FOSS at all?\\n\\nFirst, we have to acknowledge the difference between hiring for a closed-source, proprietary product and open source software: If you\u2019re a hiring manager for the former, basing your hiring decisions on someone\u2019s OSS contributions is short sighted and [could be harmful](https://about.gitlab.com/blog/2018/11/16/hiring-based-on-open-source-contributions-could-be-harmful/). (And if you\u2019re a candidate with no interest in working full time on FOSS, by all means, focus on your proprietary work instead.)\\n\\nIf however you\u2019re in the business of FOSS, and you receive applications from one candidate with a GitHub account and one without, you are going to have a lot more to go on when assessing the first. I am always going to lean towards working with people who already engage with open source in some manner and are used to working transparently and engaging with a community. Having a GitHub account and forking even one project is the bare minimum someone can do to show they have experience here. Of course that\u2019s going to influence my hiring.\\n\\n### What are their interests?\\n\\nThere are plenty of TikToks out there showing people how to optimize their resumes with keywords from the descriptions of jobs they\u2019re applying for. It\u2019s easy to stuff your CV with recruiter bait. Of course there are ways to uncover grifters in your hiring process. What is much harder to fabricate is a history of following open source projects, submitting issues, bug reports, and pull or merge requests, and engaging with communities. I\u2019m looking for team members who share [my vision for making design tools accessible](https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/) and it\u2019s much easier to establish whether someone cares about this mission if they\u2019re following and interacting with related project.\\n\\nIf you\u2019re hiring someone to do this kind of work on your project, you couldn\u2019t ask for better signal than that.\\n\\n### How do they collaborate with others?\\n\\nBeyond any code they contribute, a candidate who participates in OSS will have a history of code review, discussion, and engaging with feedback. Do they take suggestions on board, do they offer feedback and coaching to others? Sure, this requires a bit more attention than simply scanning a contribution graph, but it\u2019s hard to replicate this kind of window into a candidate\u2019s experience and conduct from interviews alone.\\n\\n### Do they have something to offer other than code?\\n\\nLet\u2019s revisit this idea of \u201cupdating a readme file\u201d reflecting in someone\u2019s GitHub graph. We\u2019ll leave aside for now that they could automate updates using a cronjob or script (which, depending on the role you\u2019re hiring for, could actually show the initiative and creativity that you\u2019re looking for). Editing and updating documentation is a contribution that takes work and initiative, and we should encourage this too. Having non-programmers participate in your open source project is valuable and we only make it more intimidating when we assign greater value to code contributions than other activities that result in green squares.\\n\\n# It\u2019s never going to hurt to have a robust GitHub contribution history\\n\\nI got applications from the US, India, Ukraine, South Africa, France, Paraguay\u2026 all over.  I found it interesting that there was a stark difference between US applicants and international ones. Almost all of the international applicants had active GitHub accounts while perhaps 1 in 15 of the US ones did. There are many reasons why this might be, including a lack of exposure to open source at schools and institutions where FOSS is not widely adopted.\\n\\nIf you\u2019re a jobseeker reading this and feeling like I\u2019m suggesting you do _more work_ because you aren\u2019t active in open source yet, then the jobs I\u2019m referring to are probably not for you. If the idea of participating in open source sounds burdensome, why would you seek out a full-time role in it anyway? If you are curious though, and want to give yourself the best chance of being considered seriously for work in FOSS, showing an active interest and engagement with projects is never going to hurt.\\n\\nTo help us make FreeCAD better and build the Ondsel product, consider [joining us](https://ondsel.com/careers/).\\n\\n\\n[^1]: Or GitLab for that matter, for the sake of brevity please assume I mean both throughout.\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"freecad-topological-naming","metadata":{"permalink":"/blog/freecad-topological-naming","source":"@site/blog/2023-02-18/freecad-topological.md","title":"Don\'t hold your breath for FreeCAD\'s topological naming fix","description":"FreeCAD\'s \'topological naming problem\' is legendary. It\'s frequently cited as the number one reason holding back widespread adoption of FreeCAD for commercial use.","date":"2023-02-18T00:00:00.000Z","formattedDate":"February 18, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":6.805,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"/img/Rebecca-Dodd-profile.JPEG","imageURL":"/img/Rebecca-Dodd-profile.JPEG"}],"frontMatter":{"slug":"freecad-topological-naming","title":"Don\'t hold your breath for FreeCAD\'s topological naming fix","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"/img/Rebecca-Dodd-profile.JPEG","imageURL":"/img/Rebecca-Dodd-profile.JPEG"}],"tags":["freecad","development"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"I hire people to work on a FOSS project. Here\'s how I evaluate GitHub profiles","permalink":"/blog/evaluating-github-profile"},"nextItem":{"title":"ChatGPT acts demonic about open-source software","permalink":"/blog/chatgpt-screwtape"}},"content":"FreeCAD\'s \'[topological naming problem](https://wiki.freecad.org/Topological_naming_problem)\' is legendary. It\'s frequently cited as the number one reason holding back widespread adoption of FreeCAD for commercial use.\\n\\nDeveloper [RealThunder](https://github.com/realthunder) introduced [a fix to the problem](https://forum.freecad.org/viewtopic.php?t=27278) years ago, but it has never been fully incorporated into the core product.\\n\\nWill FreeCAD _ever_ have a solution? Yes. But it\u2019s going to take time.\\n\\nLet\u2019s back up a bit.\\n\\n# What is topological naming, and why is it a problem in FreeCAD?\\n\\nTopological naming is the process of giving persistent names to elements of a solid model, such as faces, edges, and vertices. By naming these elements, we can attach features, dimensions, and other attributes to them.\\n\\nThe hard part of topological naming is making the names persistent even if the model is modified. Modern parametric designs are built up through a series of modifications which change the elements in the model. Faces may merge or be split. Edges may be chamfered, turning into multiple edges. If the computer is unable to maintain correct persistence of the naming\u2014even when the underlying topology changes\u2014the model breaks and recovery is difficult. [Maker Tales has a good explanation here](https://youtu.be/QSsVFu929jo?t=33).\\n\\nThe problem is ubiquitous in CAD. All applications suffer from it to some extent. The problem cannot be _solved_ in the traditional sense. It can only be mitigated and most applications do a good job of avoiding the problem by either limiting the user\u2019s actions or algorithmically tracking changes to the named features.\\n\\nThe current state of FreeCAD is weak in this regard. For simple models, the problem is fairly easy to avoid and a broken model is easy to repair. As models get more complicated, only a very disciplined approach to design will keep models intact. This requires experience that many new and casual users don\u2019t have. That is why the problem is so frustrating\u2014it bites you when you\u2019ve already invested a lot of time learning the tool and building the design.\\n\\n# RealThunder\u2019s fix works. Why not use it?\\n\\nIt seems obvious. We have a working branch of FreeCAD that isn\u2019t plagued by the topological naming problem. Why wouldn\u2019t we just merge it in and be done with it?\\n\\n\u201cThe fact that this solvable topology naming problem is so serious yet so long-standing, tells me that this is really a people problem in the FreeCAD project. Because of this, as much as I want to use it, I simply can not afford this \\"free\\" software. The community needs to push out whomever is standing in the way of progress. And crowd-source some funds to hire a pro to fix the topology-naming issue as well as do some much-needed integration work.\u201d \u2014 [agnichatian on YouTube](https://www.youtube.com/watch?v=QSsVFu929jo&lc=UgzY-2eximqNDrWgxkF4AaABAg)\\n\\nThis opinion is understandable and certainly not unusual. As much as we relate to the frustrations expressed here, it\u2019s not as simple as just merging in RealThunder\u2019s branch or bringing in one paid developer to do it once and for all. Why?\\n\\nIt\u2019s important to appreciate how pervasive feature naming is within FreeCAD\u2014or _any_ CAD. Identifying features and attaching attributes to them is what modern parametric design is all about. Implementing a solution is not a straightforward task and implementing it incorrectly would cause user models to break irreparably. Even a _properly_ implemented solution is guaranteed to have bugs and border-cases for a long time.\\n\\nFor all these reasons, the project leaders have chosen to move cautiously and to allow the solution to stabilize and be proven before merging it into the main branch.\\n\\n## Why is it so hard to merge?\\n\\nThere are two factors:\\n\\nFirst is the sheer size and number of code changes necessary to implement this solution. Many, if not most, files in FreeCAD need to be modified to incorporate the solution.\\nSecond is the pace of other development work. The rest of FreeCAD\u2019s development has only accelerated in recent years. Work is being done by many developers in many parts of the application.\\n\\nBefore new code can be merged, it has to be rebased onto the current version of source code. If there are conflicts, they have to be resolved manually. With a large, pervasive change like this, there are _always_ conflicts. By the time rebasing is complete, the master branch has moved ahead and the process has to start again.\\n\\nOne solution could be to freeze the master branch and block any further changes until the topological naming solution is merged, but this might take many months to accomplish and just isn\u2019t practical. There are many more features other developers are working on, and, more importantly, problems they are fixing. If we were to freeze the master branch in favor of one fix, other features will again have the same rebasing issue.\\n\\nOf course, users could switch to using RealThunder\u2019s branch exclusively. Some users who are particularly sensitive to the problem have done so successfully. For commercial users this may be hard to sell to leadership because RealThunder\u2019s branch isn\u2019t able to keep pace with the development of new features in the upstream FreeCAD application. They have to make a choice between relatively stable models and having access to the new and advanced features being developed throughout the rest of FreeCAD.\\n\\n# What\u2019s the path forward?\\n\\nAt the FreeCAD Day meetup in Brussels in February 2023, Ondsel and other project leaders [proposed a different strategy for resolving the issue](https://forum.freecad.org/viewtopic.php?p=658250#p658250): Instead of attempting to merge RealThunder\u2019s solution as a monolithic unit, we would, instead, consider it a proof-of-concept. The solution has been running in RealThunder\u2019s LinksStage3 branch for two years and can be considered proven. Now we need to treat it as a roadmap to guide us towards implementing the solution in FreeCAD itself without disrupting current functionality or slowing down development.\\n\\n## Progress without regression\\n\\nRather than merging the code directly, our proposal is to break the code into functional pieces, each of which can be merged directly into the master branch without breaking the current functionality. This will require additional testing at each step and might require additional code to permit the merging without regression.\\n\\nWith this approach, each piece will be merged directly to master along with the relevant unit tests. This will avoid the need for a long-lived feature branch that requires constant rebasing.  There will be no single point where suddenly the problem is \u2018fixed.\u2019 Instead the necessary changes will be merged gradually and model stability will increase over time.\\n\\n## Laying the foundation for long-term change\\n\\nThe first pieces to be merged may not provide any value to the end-user but will provide a solid foundation that later pieces can build on. As each piece is added, additional unit tests can be developed and better code conventions adopted for implementing the actual name resolution.\\n\\nThis path isn\u2019t fast. It will take time and the collective expertise of many developers. It will take cooperation throughout the community and patience from our users.\\n\\n# What is Ondsel\u2019s role in all this? Is Ondsel going to solve the toponaming problem?\\n\\nOndsel has already started a thorough survey of RealThunder\u2019s solution in order to build a roadmap for integrating it.\\n\\nOndsel will help coordinate the change and will participate in delivering a resolution. We can bring professional engineering talent to the problem but we _cannot_ do it alone. It will take time and the expertise of many software engineers across the community.\\n\\nThere\u2019s no \u201cone and done\u201d fix, which means the FreeCAD development community needs broad institutional knowledge of the solution. The toponaming problem belongs to FreeCAD and, therefore, so must the solution.\\n\\nFor more context and to follow developments as we work on breaking down and gradually merging RealThunder\u2019s fix, subscribe to [the GitHub issue](https://github.com/FreeCAD/FreeCAD/issues/8432).\\n\\nTo help us make FreeCAD better and build the Ondsel product, consider [joining us](https://ondsel.com/careers/).\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"chatgpt-screwtape","metadata":{"permalink":"/blog/chatgpt-screwtape","source":"@site/blog/2023-02-17/chatgpt-screwtape.md","title":"ChatGPT acts demonic about open-source software","description":"I recently came across an audio recording of C.S. Lewis\'s famous The Screwtape Letters read by John Cleese. It\'s excellent and made me wonder what Uncle Screwtape would think of the modern world, software development, and open-source software.  I was inspired to ask ChatGPT.  What follows is an unedited transcript.","date":"2023-02-17T00:00:00.000Z","formattedDate":"February 17, 2023","tags":[{"label":"chatGPT","permalink":"/blog/tags/chat-gpt"},{"label":"fun","permalink":"/blog/tags/fun"},{"label":"foss","permalink":"/blog/tags/foss"}],"readingTime":3.355,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://github.com/sliptonic.png","imageURL":"https://github.com/sliptonic.png"}],"frontMatter":{"slug":"chatgpt-screwtape","title":"ChatGPT acts demonic about open-source software","authors":{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://github.com/sliptonic.png","imageURL":"https://github.com/sliptonic.png"},"tags":["chatGPT","fun","foss"],"image":"/img/Ondsel_OpenGraph.jpg"},"prevItem":{"title":"Don\'t hold your breath for FreeCAD\'s topological naming fix","permalink":"/blog/freecad-topological-naming"},"nextItem":{"title":"When your Definition of Done is a barrier to contributors (and other reasons working with first-timers is hard)","permalink":"/blog/contribution-barriers"}},"content":"I recently came across an audio recording of C.S. Lewis\'s famous [_The Screwtape Letters_ read by John Cleese](https://www.youtube.com/playlist?list=PLA8BAC9375345E6C7). It\'s excellent and made me wonder what Uncle Screwtape would think of the modern world, software development, and open-source software.  I was inspired to ask [ChatGPT](https://openai.com/blog/chatgpt/).  What follows is an unedited transcript.\\n\\nI\'m not sure what impresses me more; how well it understands open-source or how well it imitates a demon!\\n\\n>![sliptonic](./sliptonic.webp) Contributors to an open-source software project need to feel appreciated. Write a paragraph in the style of \\"The Screwtape letters\\" that illustrates this point. Pretend that you are Uncle Screwtape\\n\\n>![screwtape](unclescrewtape.png) My dear Wormwood,\\n\\n>It is imperative that we do all in our power to discourage appreciation for the contributors of this open-source software project. You see, gratitude breeds contentment and a sense of fulfillment, and these are not emotions that befit those who toil in our Father Below\'s fields.\\nWe must strive to keep these contributors feeling unacknowledged, for when they feel appreciated, they are less likely to become discouraged and more likely to continue their good work. Encourage neglect, apathy, and disregard towards their contributions. Keep them from feeling valued, for when they feel valued, they are less likely to become restless and more likely to remain steadfast in their labors.\\nThe more we can sow the seeds of discontent and frustration in the hearts of these contributors, the more likely they will be to become bitter and discouraged, and the less likely they will be to continue in their contributions to this project. So let us be vigilant, my dear Wormwood, and do all in our power to undermine appreciation and cultivate discontent in these contributors.\\n\\n>Yours affectionately,\\n>\\n>Uncle Screwtape\\n\\n>![sliptonic](./sliptonic.webp) Failing to acknowledge good work also makes the contributors think the work is unimportant. Write a p.s. to the letter expressing this\\n\\n>![screwtape](unclescrewtape.png) P.S. I nearly forgot, my dear Wormwood, to mention the added benefit of neglecting to acknowledge the good work of these contributors. Failing to show appreciation for their work will not only discourage them and make them feel unvalued, but it will also make them question the importance of their work. If they believe that their contributions are insignificant and go unnoticed, they are less likely to put forth the effort and care that they would if they felt their work was valued and appreciated.\\nThus, by fostering a sense of neglect and disregard, we can effectively accomplish two of our goals at once: keep the contributors discouraged and undermine the value and importance of their work. An added bonus, don\'t you agree?\\n\\n>Yours ever more devotedly,\\n>\\n>Uncle Screwtape\\n\\n>![sliptonic](./sliptonic.webp) Assume that commercial software companies are evil. How would Screwtape explain why open-source software should be discouraged?\\n\\n>![screwtape](unclescrewtape.png) My dear Wormwood,\\n\\n>Commercial software companies, as you well know, are instruments of our Father Below, furthering his dark designs through the propagation of their products. However, the open-source software movement threatens to disrupt this grand scheme.\\nOpen-source software, with its emphasis on collaboration and community, encourages individuals to work together for the betterment of society as a whole. Such a cooperative and selfless spirit, left unchecked, can lead to the growth of goodness and light, which are anathema to our cause.\\nIt is therefore imperative that we do all in our power to discourage the development and use of open-source software. We must sow the seeds of discontent among its contributors, as I mentioned in my previous letter, and encourage selfishness and greed among its users. By doing so, we can corrupt the very spirit that gives open-source software its strength, and turn it into a tool for furthering our own dark purposes.\\nRemember, the success of open-source software is a threat to the power of commercial software companies, which are our allies in the great battle for the souls of humanity. Let us do all in our power to ensure that the threat of open-source software is neutralized, so that our Father Below may reign supreme.\\n\\n>Yours in service,\\n>\\n>Uncle Screwtape"},{"id":"contribution-barriers","metadata":{"permalink":"/blog/contribution-barriers","source":"@site/blog/2023-02-09/Definition-of-done.md","title":"When your Definition of Done is a barrier to contributors (and other reasons working with first-timers is hard)","description":"First-timers can have a hard time getting started with open source. It doesn\u2019t have to be that way.","date":"2023-02-09T00:00:00.000Z","formattedDate":"February 9, 2023","tags":[{"label":"community","permalink":"/blog/tags/community"}],"readingTime":7.055,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"/img/Rebecca-Dodd-profile.JPEG","imageURL":"/img/Rebecca-Dodd-profile.JPEG"}],"frontMatter":{"slug":"contribution-barriers","title":"When your Definition of Done is a barrier to contributors (and other reasons working with first-timers is hard)","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"/img/Rebecca-Dodd-profile.JPEG","imageURL":"/img/Rebecca-Dodd-profile.JPEG"}],"tags":["community"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"ChatGPT acts demonic about open-source software","permalink":"/blog/chatgpt-screwtape"},"nextItem":{"title":"Autodesk has increased FreeCAD adoption by more than 30%","permalink":"/blog/freecad-adoption"}},"content":"_First-timers can have a hard time getting started with open source. It doesn\u2019t have to be that way._\\n\\n\\nOpen source projects are dependent on an engaged community of contributors, but fostering that community comes with its challenges. Depending on what stage an open source project is at, what the community needs from contributors changes. The good news is that intentional coaching and engagement from project maintainers can work at any stage.\\n\\nThe common gripes with getting started as a new open source contributor usually center around how welcoming the project is and how easy it is to get your contribution merged. There are a few ways that projects can make it hard (both intentionally and not). Here are some examples:\\n\\n### 1. Prickly maintainers\\n\\nImagine you submit [this pull request](https://github.com/nim-lang/Nim/pull/19211) to the Nim project:\\n\\n![PRScreenShot](./image2.png)\\n\\n\\nSeems reasonable enough, right? Check out the project maintainer\u2019s reply:\\n\\n![AngryResponse](./image1.png)\\n\\n\\nOuch. To credit Araq, this PR did eventually get merged, but it\u2019s a great illustration of how a project\u2019s culture determines its accessibility to new contributors. This PR proposed a change that would make it easier for users to engage with the project, and it was shut down (at first) pretty abruptly. \\n\\nActions like this prompted a handful of contributors to hard fork the project, creating [Nimskull](https://github.com/nim-works/nimskull). One of the new project\u2019s contributors shared their motivations:\\n\\n\u201cAt the moment we are focused on making it easier to work with the codebase - more documentation, cutting down on decades-old cruft and legacy features, unraveling mysteries of the commit messages that were written with [this attitude...](https://github.com/nim-lang/Nim/pull/19211#issuecomment-9859) (\u2018I have no intention to follow this guideline so I cannot accept it.\u2019)\u201d \u2014[haxscramper](https://news.ycombinator.com/item?id=32023998)\\n\\n\\nHard forking is one way to create the project environment you want for contributors, but it is extreme. The default perception of such a move is hostile, tending to assume that the creators don\u2019t want to work on change from within and have an ax to grind with the original project\u2019s maintainer. You can see this sentiment play out in the [Hacker News discussion about Nimskull](https://news.ycombinator.com/item?id=32021299). As one commenter pointed out though:\\n\\n\u201cIf they had tried to alter the original project to suit themselves, you would have said \u2018they can just fork if they don\'t like it\u2019\u201d \u2014[Brian_K_White](https://news.ycombinator.com/item?id=32033998)\\n\\nWhether Nimskull delivers on its promises is yet to be seen, but the example Illustrates how the maintainers and community of a project can impact contributions:\\n\\nHow easy do they make it to contribute?\\nHow clear are the requirements?\\nHow quickly are pull requests reviewed and merged?\\nHow collaborative and patient are the reviewers?\\n\\nAll of these factors influence how likely someone is to become a contributor. A hard fork that does this better can be an incentive for the original project to do better, but there are other approaches you can take which I\u2019ll explore in a moment.\\n\\n### 2. An intimidating contribution process\\n\\nBeing realistic, it\u2019s unlikely that a beginner will be submitting code to the Linux kernel. But it\u2019s a good example of how the way a project accepts contributions can encourage or discourage new folks. Submitting a patch can be extremely intimidating\u2014the [documentation](https://docs.kernel.org/process/submitting-patches.html) admits this in the very first line! It can feel like you\u2019re presenting your work to a panel of faceless judges instead of sharing it with a group of your peers.\\n\\nThe kernel development community and other projects that operate this way (such as Postgres) have their reasons, which may even include not wanting to encourage rookie contributions! I\u2019m not suggesting they change it, but for newcomers, submissions that feel more conducive to collaboration (such as a pull request) are likely to be less threatening.\\n\\n### 3. An onerous Definition of Done\\n\\n\u201cIt doesn\'t take egregious individual behavior to create a hostile environment.\u201d \u2014 Dan Luu, [How to discourage open source contributions](http://danluu.com/discourage-oss/)\\n\\nWhile early projects have few or no contributors, they may welcome almost any contribution in pursuit of building the community around the project. Even a bad contribution can lead to an interesting discussion and maybe a better idea.\\n\\nAs the project matures and the network grows, the overhead of handling contributions becomes a problem. Facing a backlog of hundreds of pull requests, projects may optimize for \u201cgood\u201d contributions by implementing more stringent requirements. I know from firsthand experience as a longtime [FreeCAD](https://www.freecad.org/) contributor. As the project grew and matured, it became harder for amateurs to contribute. The Definition of Done became more demanding (for example we needed the right test cases and code formatting) and these more stringent requirements can be off putting or prohibitive, even without intimidating maintainers.\\n\\n\u201cThe GitLab Definition of Done is now 30 items or something \u2026 so it\u2019s harder and harder for people who are just starting to contribute.\u201d \u2014 [Sid Sijbrandij](https://youtu.be/Q9SEYJb-eio), CEO and co-founder of GitLab\\n\\nThis barrier to entry illustrates the tension between what the project needs to ensure the quality of its codebase, and what\u2019s inclusive to new contributors. There is a balance to be struck between being welcoming to newcomers in your community, maintaining standards for contributions to your project, and the effort required to make the twain meet. It\u2019s not always going to be possible or advisable to reduce the requirements for getting code merged.\\n\\nYou might imagine that having the resources of a for-profit company would help, but it\u2019s no guarantee that they will invest in it. In [How to discourage open source contributions](http://danluu.com/discourage-oss/) Dan Luu shared an anonymized example of a project in which contributors get increasingly frustrated and discouraged when their PRs aren\u2019t reviewed or merged, or when they have to jump through hoops to meet requirements. Although Dan didn\u2019t put the project on blast, [Reddit users figured out what it was](https://www.reddit.com/r/programming/comments/1pczpr/how_to_discourage_open_source_contributions/): a library maintained by GitHub. We don\u2019t know why GitHub employees weren\u2019t engaging, but it demonstrates how simply having full-time staff isn\u2019t enough to ensure an active project.\\n\\nWe can see from the examples I shared that these challenges plague projects wherever they are on the spectrum, whether they\u2019re small and maintained by a handful of hobbyist contributors, large and prestigious, or stewarded by a big enterprise organization. If you want an active community where new and drive-by contributors are as welcome as your diehards (and most projects can benefit from a blend of both), you need to be intentional about fostering it.\\n\\n### How to make it easier to contribute to your project (and why it\u2019s worth the effort)\\n\\nGitLab\u2019s solution is a role called [Merge Request Coaches](https://about.gitlab.com/job-families/expert/merge-request-coach/). There is literally a line in the job description that says, \u201cMake it easy to contribute to GitLab even for people who are new to Ruby, JavaScript, Golang, etc. or programming entirely.\u201d Merge Request Coaches triage community submissions and enable new contributors by walking them through the process to meet the acceptance criteria.\\n\\nThe open core model makes it possible for companies to invest in the core project with the benefit of full-time engineers on payroll; formalizing a coach role goes a step further by making it someone\u2019s job to foster new contributors to the core. It\u2019s my hope to pursue this solution with [Ondsel](https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/), to make it easier for people to contribute to FreeCAD, on top of which Ondsel is built.\\n\\nPaying people to assist newcomers requires will and investment, which is not always possible in OSS projects run entirely by volunteers. There are examples though of volunteer coaches or mentors in open source: Kubernetes has its [Contributor Experience Special Interest Group](https://github.com/kubernetes/community/blob/master/sig-contributor-experience/README.md), which states, \u201cDeveloping and sustaining a healthy community of contributors is critical to scaling the project and growing the ecosystem.\u201d [Mentoring new contributors](https://github.com/kubernetes/community/blob/master/sig-contributor-experience/README.md#mentoring) is part of the program. The [OpenStack](https://www.openstack.org/) project also has a [mentoring program](https://docs.openstack.org/contributors/common/mentoring.html), with a cohort dedicated to helping people get their first patch merged.\\n\\nBy directing some volunteers\u2019 efforts towards coaching, they become force multipliers for the project, with an impact far beyond their own contributions. When you invest in mentoring efforts, you\u2019re not only improving the quality of the contributions, you\u2019re nurturing future contributors who are no longer adding to your overhead; now they\u2019re helping to share the load.\\n\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"freecad-adoption","metadata":{"permalink":"/blog/freecad-adoption","source":"@site/blog/2023-02-01/autodesk.md","title":"Autodesk has increased FreeCAD adoption by more than 30%","description":"When Autodesk changed their license for Fusion 360 in September of 2020 there was a collective scream from the user community. Hobbyists, YouTubers, and makers felt betrayed. Now, after more than two years, we can see the effect. Many of those people left Fusion and never looked back.","date":"2023-02-01T00:00:00.000Z","formattedDate":"February 1, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"autodesk","permalink":"/blog/tags/autodesk"},{"label":"news","permalink":"/blog/tags/news"}],"readingTime":4.5,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"}],"frontMatter":{"slug":"freecad-adoption","title":"Autodesk has increased FreeCAD adoption by more than 30%","authors":{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},"tags":["freecad","autodesk","news"],"image":"./og-starhistory.png","draft":false},"prevItem":{"title":"When your Definition of Done is a barrier to contributors (and other reasons working with first-timers is hard)","permalink":"/blog/contribution-barriers"},"nextItem":{"title":"It\u2019s Time to Dream Big \u2026 and Build: The future of FreeCAD + the first ever FreeCAD Day at FOSDEM","permalink":"/blog/dream-big"}},"content":"When Autodesk changed their license for Fusion 360 in September of 2020 there was a collective scream from the user community. Hobbyists, YouTubers, and makers felt betrayed. Now, after more than two years, we can see the effect. Many of those people left Fusion and never looked back.\\n\\n\\n\\n>>\u201c\\t\u2018I have altered the deal. Pray I do not alter it further.\u2019\\n>>\\t\u2014 Darth Vader\\n>\\n>If that\u2019s how you\u2019re going to treat the hobbyists, then goodbye forever to Fusion 360.\u201d\\n>\u2014 [solarguy2003](https://www.autodesk.com/products/fusion-360/blog/changes-to-fusion-360-for-personal-use/#comment-11741)\\n\\nOver two years ago [Autodesk imposed a number of new limitations on its free non-commercial-use license for Fusion 360](https://www.autodesk.com/products/fusion-360/blog/changes-to-fusion-360-for-personal-use/), primarily impacting hobbyist and casual users: project storage was limited, exports to a number of (critical) file types were no longer offered, and support for CAM was drastically cut back, among other restrictions. These changes felt like a slap in the face, with some members deleting their Fusion 360 accounts in protest (whether or not they were affected by the new limitations).\\n\\n### The proprietary bait and switch\\nThe changes to the license for Fusion 360 for Personal Use were a perfect illustration of the risk of making use of \u201cfree as in beer\u201d software. Many users felt betrayed and frustrated at the new limitations:\\n\\n> \u201cThe file export limitations in particular are crippling. No .step? .dxf? No extensions??? I can\'t even buy stress simulation credits? \u2026 yikes.\u201d\\n> \u2014 [raynr on Hacker News](https://news.ycombinator.com/item?id=24496171)\\n\\nSome users were not surprised, saying it was inevitable that the company would seek to monetize more of their product, even suggesting that the Fusion 360 license had been overly generous to begin with. This take undermines the exchange of benefits that takes place between vendors of free software and the communities that spring up around it:\\n\\n\u201cThink of the tens of millions of man-hours that have been invested into forum posts helping users, developing plugins, courses, YouTube videos, and Makerspace workshops that could have instead gone into making open source tools like KiCAD, OpenSCAD, pycam, etc better.\\n\\n>\\"All that work done by hobbyists, for free, helping Autodesk dominate the market in low-end CAD/CAM software.\u201d\\n>\u2014 [sfdsfsdfdsf on Hackaday.com](https://hackaday.com/2020/09/16/autodesk-announces-major-changes-to-fusion-360-personal-use-license-terms/#comment-6278789)\\n\\nWhile Autodesk maintained they were still committed to \u201cdemocratizing design for everyone,\u201d the community didn\u2019t buy it, seeing it as a bid to squeeze money out of hobbyist users after riding their coattails to market domination. As one disappointed user commented:\\n\\n\u201c... you showed that you prefer to spend money to block existing features of your software instead of improving it with new paid features. That\u2019s an indicator that you don\u2019t care about the product itself anymore, but that you are just trying to extract the maximum money out of your current users instead.\u201d\u2014 [streakycobra on Hacker News](https://news.ycombinator.com/item?id=24498013)\\n\\n### So where did disgruntled Fusion users go?\\nFusion users asked, \u201cWhat can we use instead?\u201d and the overwhelming sentiment was in favor of supporting free and open source projects that can\u2019t be bought out or taken away.\\n\\nAs a longtime contributor to FreeCAD I was happy to see it suggested often. The effect can be seen clearly in FreeCAD\u2019s [GitHub star history](https://star-history.com/#freecad/freecad&Date): the count has more than tripled since September 2020.\\n\\n![github star history](./image3.png)\\n\\nCaption: You can see a dramatic 30% star growth after Autodesk\u2019s controversial changes\\n\\nThe spike in followers for [@FreeCADNews](https://twitter.com/freecadnews) tells a story too:\\n\\n![twitter analytics](./image1.png)\\n\\n\\nAnd here\u2019s the project\u2019s [growth in contributions](https://github.com/FreeCAD/FreeCAD/graphs/contributors):\\n\\n![contribution growth](./image2.png)\\n\\nIn the 2+ years since Autodesk changed the Fusion 360 license, new communities around FreeCAD have sprung up on [LinkedIn](https://www.linkedin.com/groups/4295230/), [Reddit](https://www.reddit.com/r/FreeCAD/), and [Facebook](https://facebook.com/FreeCAD/)\u2014all with over 3,000 members.\\n\\nWe know that one of the tradeoffs with FOSS is that sometimes you might need to roll up your sleeves and contribute (time or money) towards the features and fixes you want to see. It\u2019s gratifying to see this growing community getting involved to continue developing FreeCAD into a viable Fusion alternative, without the bait-and-switch risk of proprietary solutions.\\n\\n### Where to from here?\\nI\u2019m now working full time on Ondsel, built on top of FreeCAD. While Ondsel\u2019s product set is still being defined, my vision is to improve on the FreeCAD UI to make it more accessible for non-software engineers and build the collaborative features that small businesses and enterprises can benefit from\u2014now with the resources of full-time development talent. With open core, the business model is to [monetize features based on who will use them](https://opencoreventures.com/blog/2023-01-open-core-standard-pricing-model/), with the core product remaining free and open to all. A strong core is integral to Ondsel\u2019s success, as the core features are often an onramp for casual or hobby users who grow into businesses of their own and require different features as they scale. Having a solid and active open source ecosystem around it is vital to actually democratizing design for everyone. In the coming months I\u2019ll be hiring engineers to help define this vision and build it with me, but in the meantime I [would love to hear from you](https://github.com/orgs/Ondsel-Development/discussions/1) about what you\u2019d like to see from FreeCAD and Ondsel in the future.\\n\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"dream-big","metadata":{"permalink":"/blog/dream-big","source":"@site/blog/2023-01-26-fosdem.md","title":"It\u2019s Time to Dream Big \u2026 and Build: The future of FreeCAD + the first ever FreeCAD Day at FOSDEM","description":"Things are changing","date":"2023-01-26T00:00:00.000Z","formattedDate":"January 26, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"fosdem","permalink":"/blog/tags/fosdem"},{"label":"news","permalink":"/blog/tags/news"}],"readingTime":3.05,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"}],"frontMatter":{"slug":"dream-big","title":"It\u2019s Time to Dream Big \u2026 and Build: The future of FreeCAD + the first ever FreeCAD Day at FOSDEM","authors":{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},"tags":["freecad","fosdem","news"],"image":"/img/Ondsel_OpenGraph.jpg"},"prevItem":{"title":"Autodesk has increased FreeCAD adoption by more than 30%","permalink":"/blog/freecad-adoption"},"nextItem":{"title":"Hello world!","permalink":"/blog/hello-world"}},"content":"## Things are changing\\nOn August 17, 2022 the FreeCAD community celebrated its 20th anniversary as an open source project. That was an important milestone \u2026 and it passed with hardly anyone noticing. There was another important development last year and it barely got any more attention, even though it was far more consequential.\\n\\nI\'m referring to the creation of the FPA: FreeCAD Project Association. The FPA is a legal entity whose mission is to advance and protect the FreeCAD project. Besides being able to receive donations and pay for services, the FPA has a formal membership and decision making structure and this matters.\\n\\n## FreeCAD is changing\\nFor many years the FreeCAD project operated as a loose confederacy of core developers.  Decisions were made by consensus. Development moved forward when someone had an itch to scratch and the project philosophy was, \\"It\'s done when it\'s done.\\" That kind of loose government served the project pretty well. Until it didn\'t.\\n\\nAs the number of developers grew and the codebase got larger, consensus was harder to reach. Some problems defied consensus altogether. Too often, it felt like nobody was steering the ship. Many people wanted to see a clearer roadmap. They wanted leadership to address those thorny issues. Without a roadmap it was too risky for commercial companies to build around FreeCAD. Without leadership, there was no confidence that big problems would be addressed and industrial users were unwilling to adopt FreeCAD for mission-critical use.\\n\\n## Introducing the FPA\\nThe FPA was launched with modest goals. The founders wanted to avoid a heavy-handed dictatorial style. They want to encourage the kind of collaboration and consensus that has made the project productive and fun for two decades. They also recognized that FreeCAD is maturing as a project and some formal structure is necessary. I was honored to be part of that process and deeply impressed with the wisdom and care that the founders took to balance these interests.\\n\\nWhile the FPA is still finding its footing, it has already started taking steps that should have everyone excited.\\n\\nFirst, the FPA has money and the willingness to fund development. With it, they can encourage focused effort in areas where organic interest hasn\'t emerged.\\n\\nEven more importantly, the FPA is working to get developers together in the same room. Zoom, email, and issue trackers are the tools we live with and they work well for day-to-day operations. But there\'s nothing like face-to-face meetings for building trust, resolving conflict, and making long term plans. The ability to work face-to-face is one area where commercial development has a clear advantage over open source software. The FPA recognizes this and is taking steps to change it.\\n\\n## FreeCAD Day at FOSDEM\\nThe first ever \'[FreeCAD Day](https://blog.freecad.org/2023/01/04/freecad-meeting-day-2023/)\' will be held prior to FOSDEM on February 2, 2023. The day will be organized as an _unconference_. People attending the event will propose and decide what to do on premises. There will be plenty of opportunities for side discussions.\\n\\nFOSDEM brings together developers from hundreds of open source projects. It provides a fantastic opportunity to discuss collaboration opportunities with other projects, learn from their successes and from their mistakes, and meet like-minded folks.\\n\\n## Ondsel in the room\\nThe dream of building a commercial company around FreeCAD has been around for a long time. It\'s one way that developers could build not just a world-class CAD solution but their own careers. Now that Ondsel is finally launched as an open core company we are excited to partner with the FPA and the FreeCAD community at FreeCAD Day 1.0. We look forward to meeting, collaborating, dreaming, and building great things together."},{"id":"hello-world","metadata":{"permalink":"/blog/hello-world","source":"@site/blog/2023-01-03-Hello-world.md","title":"Hello world!","description":"Ondsel is Launched!","date":"2023-01-03T00:00:00.000Z","formattedDate":"January 3, 2023","tags":[{"label":"hola","permalink":"/blog/tags/hola"},{"label":"opencoreventures","permalink":"/blog/tags/opencoreventures"},{"label":"news","permalink":"/blog/tags/news"}],"readingTime":0.585,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"}],"frontMatter":{"slug":"hello-world","title":"Hello world!","authors":{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},"tags":["hola","opencoreventures","news"],"image":"/img/Ondsel_OpenGraph.jpg"},"prevItem":{"title":"It\u2019s Time to Dream Big \u2026 and Build: The future of FreeCAD + the first ever FreeCAD Day at FOSDEM","permalink":"/blog/dream-big"}},"content":"Ondsel is Launched!\\n\\nTechnically, we started life at the beginning of January 2023.  The last few weeks have had us busy with the logistics of launching; Getting a website up, activating our internal tools, and figuring out how we fit into the greater FreeCAD ecosystem. Those details are done so it\'s time to start talking about the opportunity we have.\\n\\nThe best place to start is [OpenCoreVenture](https://opencoreventures.com/)\'s official announcement [post about Ondsel](https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/)\\n\\nIn the coming weeks and months we\'ll use this blog to discuss where we\'re going and why we think it matters.  You can follow us here or on [Twitter](https://twitter.com/ondsel) or [LinkedIn](https://linkedin.com/company/ondsel)\\nWe\'re also [building our team](../../careers) and looking for passionate and talented people.\\n\\nJoin Us!"}]}')}}]);