"use strict";(self.webpackChunkondsel=self.webpackChunkondsel||[]).push([[866],{4612:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"default-assembly-workbench-5","metadata":{"permalink":"/blog/default-assembly-workbench-5","source":"@site/blog/2023-03-28/assembly-5.md","title":"Exploring the Assembly 4 workbench","description":"In the previous posts in this series, we talked about the need for a default assembly workbench in FreeCAD and reviewed Assembly 2, A2plus, and Assembly 3. Let\u2019s talk about Assembly 4.","date":"2023-03-28T00:00:00.000Z","formattedDate":"March 28, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"},{"label":"assembly","permalink":"/blog/tags/assembly"},{"label":"assembly4","permalink":"/blog/tags/assembly-4"}],"readingTime":6.435,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"default-assembly-workbench-5","title":"Exploring the Assembly 4 workbench","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development","assembly","assembly4"],"image":"./titlecard.png","draft":false},"nextItem":{"title":"Exploring the Assembly 3 workbench","permalink":"/blog/default-assembly-workbench-4"}},"content":"In the previous posts in this series, we talked about the need for a [default assembly workbench](https://ondsel.com/blog/default-assembly-workbench-1) in FreeCAD and reviewed [Assembly 2](https://ondsel.com/blog/default-assembly-workbench-2), [A2plus](https://ondsel.com/blog/default-assembly-workbench-3), and [Assembly 3](https://ondsel.com/blog/default-assembly-workbench-4). Let\u2019s talk about Assembly 4.\\n\\n## History\\n\\nThe project was started by Zolko in 2019 after some experiments with building assemblies without solvers. Zolko came to the community with extensive knowledge of other CAD programs such as Pro/E, Catia, and T-Flex, but he was very (and probably needlessly) humble about his programming skills.\\n\\n![Assembly 4 commits](freecad-assembly-4-commits.png)\\n\\nJust like with other assembly workbenches, much of the development has been affected by the user community, and a number of features have been contributed by other developers. So far, A4 is the only assembly workbench where the development pace is about the same as it was when the project started, and Zolko isn\u2019t done yet.\\n\\n## Workflow and ease of use\\n\\nAssembly 4 relies on several core principles.\\n\\nFirst off, it is built around the [App:Link API](https://wiki.freecad.org/App_Link) that we already mentioned in previous posts in the series. In a nutshell, rather than creating a full copy of a part, FreeCAD will reference it. This makes models cleaner, and you always work with up-to-date geometry. The workbench also has the concept of a variant link which allows referencing the same object multiple times and using different parameters for each of the linked instances.\\n\\nSecondly, rather than aligning characteristics of two parts (e.g. vertex to vertex), the workbench maps one local coordinate system (LCS) to another. Each body in a part can have multiple local coordinate systems. For example, the part on the screenshot below has 5 of them:\\n\\n![Multiple LCSs in a part](freecad-assembly-4-multiple-lcs.png)\\n\\nWhen an LCS is originally created, it is attached to a very specific feature of a part. However, if the geometry of that part changes, the LCS stays where it was. Which makes it unaffected by the dreaded toponaming issue (now being finally taken care of in upstream FreeCAD). The kind of a feature an LCS is attached to defines what attachment options are available.\\n\\n![Picking features to attach an LCS to](freecad-assembly-4-picking-features-for-lcs.png)\\n\\nThen when a new part is inserted into an assembly, the user specifies the parent part (which part to attach to), the source LCS (from the newly inserted part), and the target LCS (from the parent part):\\n\\n![Mapping LCSs in Assembly 4](freecad-assembly-4-mapping-lcs.png)\\n\\nOnce both LCSs are aligned, all six degrees of freedom are fixed, and thus parts stay attached no matter what. It is, however, possible to \u201crelease\u201d a DOF by using the attachment offset property and expressions.\\n\\nWe\u2019ve seen multiple testimonials that the approach to assembling a model through LCS proves to be more predictable and robust. \\n\\nOn the flip side, the process of setting all LCSs is rather tedious, and attaching one part to another means you have to make more clicks than what you typically get with regular constraints.\\n\\nFinally, Assembly 4 supports both [top-down and bottom-up](https://caeuniversity.com/bottom-up-and-top-down-approach/) design models. We do need to point out though that with the bottom-up approach, it is impossible to insert a part from an external file without opening it as a document.\\n\\n## Features\\n\\nBecause of how the workflow is implemented, Assembly 4 doesn\u2019t have rows and rows of buttons to go through when you need to align one part with another. A large part of the feature set is about managing your assembly: creating new bodies and groups, inserting parts (there\u2019s also a simple integration with the Fasteners workbench), mapping LCSs to each other etc. Apart from LCS, A4 allows creating more datum types: plane, axis, and point. Internally, those are all PartDesign objects.\\n\\nA4 comes with its own tools for creating mirrored, linear, and circular arrays, as well as a measure tool:\\n\\n![Measure tool](freecad-assembly-4-measure-tool.png)\\n\\nFor animation, Assembly 4 uses variables and [expressions](https://wiki.freecad.org/Expressions). For example, if you need to rotate a part, what you do is create a new variable and set it e.g. to 0, then use that variable in the _Angle_ placement property of your part, then open the animation dialog, select the variable to animate, set min and max values to feed into the variable, as well as the increment value, and run the animation.  \\n\\n![Animation in Assembly 4](freecad-assembly-4-animation.png)\\n\\nTheo Janssen\u2019s [strandbeest](https://www.strandbeest.com/), [model by Zolko](https://github.com/Zolko-123/FreeCAD_Examples/tree/master/Asm4_Tutorial4) (CC0-1.0 license) \\n\\nThe implementation is somewhat technical, but it works. The downside of all this is that due to the incomplete multithreading support in FreeCAD you can\u2019t really stop the animation until the current cycle is over. Unfortunately, while animation does the trick in some cases, collision detection would still be really useful.\\n\\nDespite the initial idea to not use a solver that got the entire Assembly 4 adventure going, Zolko did end up creating a solver to recompute all the links and placements in an assembly. In fact, as user \u2018aapo\u2019 [explained in a recent discussion](https://forum.freecad.org/viewtopic.php?p=670464#p670464), A4 has _multiple_ solvers and can use custom external ones. Even more, there\u2019s a branch called [\u2018solver\u2019](https://github.com/Zolko-123/FreeCAD_Assembly4/compare/master...solver) waiting to be completed and merged. It brings the A2plus solver to Assembly 4.\\n\\nThe workbench has good if somewhat scattered documentation. There are [instructions](https://github.com/Zolko-123/FreeCAD_Assembly4/blob/master/INSTRUCTIONS.md) for new users that explain features, basic concepts, and workflow. There are also [several tutorials](https://github.com/Zolko-123/FreeCAD_Examples) written by the principal developer in a dedicated GitHub repository. And some of the user documentation is in the [Examples](https://github.com/Zolko-123/FreeCAD_Assembly4/tree/master/Examples) folder of the main GitHub repository.\\n\\n## Consistency\\n\\nAssembly 4 does nearly everything in dialogs in the Combo View, which is a fairly standard practice. No surprises there.\\n\\nThe workbench can work with parts created by other assemblies, although in our testing it seems like a good idea creating local coordinate systems in those parts prior to inserting them for simplicity\u2019s sake.\\n\\nThere have been [a number of problems](https://forum.freecad.org/viewtopic.php?style=10&t=40363) getting A4 to work well with the TechDraw workbench. Most of them reportedly have been fixed.\\n\\n## Stability\\n\\nFrom the Issues section on GitHub and the forum it appears that Assembly 4 is very stable. Users mostly have problems with the [Bill of Materials](https://github.com/Zolko-123/FreeCAD_Assembly4/blob/master/Examples/ConfigBOM/README.md) feature (there have been [recent fixes](https://github.com/Zolko-123/FreeCAD_Assembly4/pull/403) to address some of the issues). In our limited testing, A4 crashed a few times \u2014 mostly, when editing datum objects. The number of actual bug reports (rather than feature requests) on GitHub is very low (just 1 as of March 27). However, a number of bugs are known and reported to the forum.\\n\\n## Performance\\n\\nWe found some complaints about A4 being slow with complex assemblies. One workaround that appears to improve the situation is disabling the preselection highlight (Edit > Preferences > Display > Colors).\\n\\n## Development Status\\n\\nAssembly 4 is an active project with a growing share of new contributors. There have been multiple tagged releases, and the latest internal version update was in February 2023.\\nCollectively, the community around Assembly 4 keeps the number of pull requests to an absolute minimum (just 3 open out of 245 ever submitted, as of March 27). Zolko responds to most of the bug reports within a day or two, although fixing some of the bugs may take longer than that.\\n\\n## Summary\\n\\nAssembly 4 relies on local coordinate systems to attach parts to each other. The workbench is fairly robust, there are very few severe issues reported by users. However, the LCS approach \u2014 as implemented in A4 \u2014 is low-level and implies a somewhat tiresome process of setting everything up.\\n\\nThe project has a small active team of contributors who keep the amount of unresolved issues and unmerged patches as low as possible. We also found the user community to be really enthusiastic and passionate about the project.\\n\\n## Next up\\n\\nIn the next installment, we\u2019ll take a slight detour and explore several assembly-like solutions: the Manipulator and Part-o-Magic workbenches, as well as the BodyBuilder macro."},{"id":"default-assembly-workbench-4","metadata":{"permalink":"/blog/default-assembly-workbench-4","source":"@site/blog/2023-03-23/assembly-3.md","title":"Exploring the Assembly 3 workbench","description":"This is the fourth part in the series where we explore the possibility of creating a default assembly workbench for FreeCAD. We started out with a conversation about why we need a default assembly workbench in the program, then reviewed Assembly 2 and A2plus. Now let\u2019s talk about the Assembly 3 workbench.","date":"2023-03-23T00:00:00.000Z","formattedDate":"March 23, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"},{"label":"assembly","permalink":"/blog/tags/assembly"},{"label":"assembly3","permalink":"/blog/tags/assembly-3"}],"readingTime":8.475,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"default-assembly-workbench-4","title":"Exploring the Assembly 3 workbench","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development","assembly","assembly3"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"Exploring the Assembly 4 workbench","permalink":"/blog/default-assembly-workbench-5"},"nextItem":{"title":"Exploring the A2plus workbench","permalink":"/blog/default-assembly-workbench-3"}},"content":"This is the fourth part in the series where we explore the possibility of creating a default assembly workbench for FreeCAD. We started out with a [conversation](https://ondsel.com/blog/default-assembly-workbench-1) about why we need a default assembly workbench in the program, then [reviewed Assembly 2](https://ondsel.com/blog/default-assembly-workbench-2) and [A2plus](https://ondsel.com/blog/default-assembly-workbench-3/). Now let\u2019s talk about the Assembly 3 workbench.\\n\\n## History\\n\\nIn 2013, Jonathan Westhues took the FOSS community by surprise releasing the source code of [SolveSpace](https://solvespace.com/index.pl), his parametric 2D/3D CAD software built around a very capable custom solver. Some 4 years later, Zheng Lei aka \u201crealthunder\u201d created a Python binding for the solver, then used it to create his own assembly workbench for FreeCAD.\\n\\n![Commit to Assembly 3 over time](freecad-assembly3-commits.png)\\n\\nFurther changes in the workbench required [patching FreeCAD](https://github.com/realthunder/FreeCAD_assembly3/wiki/Link), so realthunder created a friendly fork of the entire program, which over time became his primary project with many other changes and add-ons not available in upstream FreeCAD by default: the pie menu, transparent docks, and others.\\n\\nSome of the architectural changes have already been merged to upstream FreeCAD, others are getting there. The Assembly 3 workbench continues to be maintained and is available to users of upstream FreeCAD as an addon and is now part of this larger project, the \u2018LinkStage\u2019 fork.\\n\\n## Workflow and ease of use\\n\\nAssembly 3 is substantially different from other assembly workbenches in multiple aspects. Here are some of its most significant characteristics.\\n\\n**Project hierarchy.** In A3, an assembly consists of constraints, elements, and parts. Elements are the features of parts that are used to create a constraint, e.g. a point of one part and a plane of another part. Assemblies can contain sub-assemblies, in which case each sub-assembly will carry its own set of constraints, elements, and parts. This approach makes navigating a complex project fairly straightforward.\\n\\n![Project hierarchy in Assembly 3](freecad-assembly3-project-hierarchy.png)\\n\\n[Graber I3 model by Nemesis81](https://github.com/Nemesis81/GraberI3_Freecad)\\n\\n**Top-down design model.** This approach is technically available in A2 and A2plus, but it is not a recommended way of using those workbenches. Assembly 3 makes the top-down design model a first-class citizen. You can create new parts, then drag them into the Parts section of the project tree, then they will become usable in the assembly.\\n\\n**Bottom-up design model.** This is likely how most A3 users approach creating assemblies. The workbench provides two ways to build an assembly from parts saved as external files: importing from STEP files or linking (see below) FreeCAD projects that are already opened in the program.\\n\\n**Links.** A3 is not the only assembly workbench to rely on the [App::Link API](https://wiki.freecad.org/App_Link) to reference objects instead of copying them, Assembly 4 also does it. But A3 is what this API was designed for in the first place. The general idea is that if you have e.g. 4 screws of the same type to fix a motherboard to a plastic box, you don\u2019t need 4 instances of the same screw geometry. You only need one part that you can reuse via links.\\n\\nCreating a link, however, is all not at all obvious and requires performing a particular sequence of actions: selecting a part (Body object) in the project tree, then selecting an assembly document in the document tabs, then clicking a Link button in the toolbar. Figuring this out without reading documentation or watching a tutorial or asking on the forum is all but impossible.\\n\\n**Fixing parts and freezing sub-assemblies.** While fixing a part in A2plus is a property of a part, the A3 approach is to select a feature and assign a \u201cLocked\u201d constraint to it to eliminate all or some degrees of freedom (this depends on the type of the selected feature). The idea of locking something entirely goes even further. When working on a complex assembly, a particularly useful way to simplify computations is to freeze a sub-assembly. Such a sub-assembly is considered fixed by the solver and is therefore excluded from update calculations.\\n\\n## Features\\n\\nAssembly 3 is the most feature-packed of all existing assembly WBs. It comes with over 40 constraint types, various helper tools, means to control workplanes, and more. It also has a dynamic solver, so you can move parts under constraints.\\n\\nThe workbench does its best to keep track of degrees of freedom to avoid overconstraining an assembly. However, in doing so, it doesn\u2019t make it easy to indicate where the problem is exactly. All it does is notifying the user that there are inconsistent constraints. It is up to the user to locate the offensive elements and constraints.\\n\\nThere are more caveats. In particular, the vast amount of features in this workbench raises the expectations for UX/UI. Assembly 3 has an overwhelming UI. It comes with no less than six toolbars, three out of which are different groups of constraints.\\n\\n![Assembly 3 toolbars](freecad-assembly3-toolbars.png)\\n\\nThere\u2019s the main constraints group and two additional groups of constraints. This takes a lot of getting used to. We\u2019ve seen experienced users of the workbench making really useful elaborate tutorials about it and yet failing to locate the constraint they need on the first attempt.\\n\\nThings don\u2019t get much better with the [ModernUI](https://wiki.freecad.org/ModernUI_Workbench) add-on that creates a Ribbon-like top toolbar. You get readable labels (something the late [Jef Raskin](https://en.wikipedia.org/wiki/Jef_Raskin) would appreciate), but you also get a large scrollable area:\\n\\n![Assembly 3 with a Ribbon-like toolbar](freecad-assembly3-with-ribbon-like-ui.png)\\n\\n[Graber I3 model by Nemesis81](https://github.com/Nemesis81/GraberI3_Freecad)\\n\\nAssembly 3 is not uniquely complex here. Arch, FEM, TechDraw, and a few other workbenches also have a similar or even larger amount of UI to deal with. This suggests that there may be a need for a general UX/UI review and a better strategy for organizing the user interface and designing the interaction \u2014 something that would be solved on the core level and then propagated to all workbenches, default and 3rd-party alike.\\n\\nThree sorely missing features are collision detection, visual control over degrees of freedom, and the generation of BOM. Collision detection was [planned](https://forum.freecad.org/viewtopic.php?p=253170#p253170) back in 2018, the idea was to use the [Bullet](https://pybullet.org/) physics engine, but this hasn\u2019t materialized yet. Regarding DOF control, it is virtually impossible to find out how many degrees of freedom a part has without trial-and-error by attempting to transform it and \u2014 sometimes \u2014 looking at the output log in the built-in console (A2plus solves that by optionally displaying an indicator for each part in the viewport). And as for BOM, realthunder already [explored in detail](https://github.com/realthunder/FreeCAD_assembly3/wiki/Expression-and-Spreadsheet) the requirements for developing BOM generation two years ago, but there is no code yet.\\n\\nThe [wiki page](https://wiki.freecad.org/Assembly3_Workbench) for the assembly at FreeCAD\u2019s website provides some basic documentation on features, and the project\u2019s [own wiki](https://github.com/realthunder/FreeCAD_assembly3/wiki) explores basic concepts of A3 and provides several tutorials. However, neither can serve as a reference guide, hence finding out what some of the features do will require original research by users. Notably, there\u2019s a lot of YouTube tutorials on using Assembly 3. Some of the most prolific A3 educators are [Oficine Robotica](https://www.youtube.com/@OficineRobotica/videos) and [Joko Engineeringhelp](https://www.youtube.com/@OficineRobotica/videos).\\n\\n## Consistency\\n\\nThe workbench is generally consistent with how the rest of FreeCAD operates. In our testing, nothing stands out as particularly peculiar. A3 will also use parts created with other workbenches as long as the imported parts are moved into the Parts section of the assembly\u2019s hierarchy.\\n\\n![Assembly3 project in LinkStage branch](freecad-assembly3-graber-i3-model.png)\\n\\n[Graber I3 model by Nemesis81](https://github.com/Nemesis81/GraberI3_Freecad)\\n\\n## Stability\\n\\nAssembly 3 currently has over 300 unresolved bugs and feature requests filed to its [issue tracker](https://github.com/realthunder/FreeCAD_assembly3/issues). However, this cannot be used as a sole indicator of the maintainer\u2019s responsiveness: for some reason, it\u2019s fairly common for users to report bugs associated with FreeCAD itself rather than with the workbench in question. Given that the \u2018Linkstage\u2019 fork of FreeCAD also has over 300 unresolved bug reports and feature requests, this is obviously too much for one person to handle, even though he gets some help with triaging reports.\\n\\nNone of the currently open bug reports are crash reports for the Assembly 3 workbench. Having said that, we did experience a few random crashes when working with the WB. We also looked at workbench crashes reported in the past and found that realthunder pays a lot of attention to that and typically fixes those within several days.\\n\\n## Performance\\n\\nWhile it\u2019s possible to exclude sub-assemblies from computation by freezing them and thus saving the resources for when they are needed, this will not be sufficient in all use cases. With complex assemblies (over a hundred parts), A3 can become really slow. \\n\\nMoreover, even in simple use cases (two parts, two constraints), Assembly 3 will often fail to perform an axial rotation smoothly with 1 DOF left, while the rotation increment is as small as 1\xb0.\\n\\n## Development Status\\n\\nAlthough there have been contributions from at least a dozen more people, realthunder remains the author of 92% of all commits to the workbench since project\u2019s inception. The project is maintained, however its active development phase ended in 2019. The last workbench release was tagged in 2020 and the latest internal version is 0.11.4 from November 2022. We also found that the development remains uncoupled from the upstream SolveSpace project: multiple changes and new features related to constraints appear to have never made its way to the workbench.\\n\\n## Legal Status\\n\\nBecause Assembly 3 relies on a fork of SolveSpace\u2019s source code, it\u2019s available under the terms of GPLv3+. This makes its inclusion in the FreeCAD application problematic. Thus the workbench can only be installed separately in upstream FreeCAD as an addon.\\n\\n## Summary\\n\\nAssembly 3 is substantially more advanced than either A2 or A2plus workbenches: generally better workflow, better support for bottom-up design, better-designed project hierarchy, vastly more constraint options, and the list goes on. The project also has an avid user community and the developer is typically fast to respond to reports of severe bugs.\\n\\nAt the same time, A3 has a number of usability issues and important missing features such as BOM generation. The solver\u2019s license also makes this workbench an unlikely choice for a foundation of a potential default workbench in FreeCAD.\\n\\n## Next up\\n\\nNow that we\u2019ve explored Assembly 3, we are getting closer to the end of the series. In the next installment, we\u2019ll take a close look at the Assembly 4 workbench developed by Zolko."},{"id":"default-assembly-workbench-3","metadata":{"permalink":"/blog/default-assembly-workbench-3","source":"@site/blog/2023-03-21/assembly-2+.md","title":"Exploring the A2plus workbench","description":"We\u2019ve already talked about the need for a default assembly workbench in FreeCAD and reviewed Assembly 2. Now let\u2019s get into the nitty-gritty of the A2plus workbench.","date":"2023-03-21T00:00:00.000Z","formattedDate":"March 21, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"},{"label":"assembly","permalink":"/blog/tags/assembly"},{"label":"assembly2","permalink":"/blog/tags/assembly-2"}],"readingTime":8.875,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"default-assembly-workbench-3","title":"Exploring the A2plus workbench","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development","assembly","assembly2"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"Exploring the Assembly 3 workbench","permalink":"/blog/default-assembly-workbench-4"},"nextItem":{"title":"Exploring the Assembly 2 workbench","permalink":"/blog/default-assembly-workbench-2"}},"content":"We\u2019ve already talked about the need for a [default assembly workbench](https://ondsel.com/blog/default-assembly-workbench-1) in FreeCAD and [reviewed Assembly 2](https://ondsel.com/blog/default-assembly-workbench-2). Now let\u2019s get into the nitty-gritty of the A2plus workbench.\\n\\n## History\\n\\nA FreeCAD user kbwbe started working on this project in 2018 following [experiments](https://forum.freecad.org/viewtopic.php?style=1&t=29207) with a new solver developed on top of the pre-existing Assembly 2 workbench:\\n\\n> I developed a small prototype of yet another solver. It is in a very early state now and is only capable of handling plane/circularedge/axis-constraints. But it can easily be extended. It consists only of one file, which is attached. The base concept is inspired by physics. [...] It is just a prototype and many things are still missing. But the idea seems to work. I am working with a refurbished assembly2-workbench. I like the base concepts of it very much and did some bigger projects with it. \\n\\nHaving received initial feedback, kbwbe created a [public repository](https://github.com/kbwbe/A2plus) on GitHub and continued hacking on the new workbench publicly.\\n\\n![Commits History for the A2plus Workbench](freecad-a2plus-wb-commits.png)\\n\\nDespite an activity plunge during the pandemic, A2plus is still being actively developed and receives new features and bug fixes.\\n\\n## Workflow and ease of use\\n\\nA2plus follows the same general idea as its predecessor: create parts as separate files, align them with constraints, solve. Just like Assembly 2, this workbench supports sub-assemblies.\\nThere are some differences though. The one that stands out immediately is that, rather than creating one constraint object in the project tree, A2plus creates references to the same constraint in both involved parts.\\n\\n![A2plus Constraints in the Project Tree](freecad-a2plus-constraints-in-project-tree.png)\\n\\nAnother difference is that a part in A2plus is a special type of an object. So it\u2019s possible to create a new part from within the workbench and fill it with objects e.g. in the Part Design workbench. But the part will have to be manually converted to an A2plus part to become usable in the workbench. The caveat here is that even then such a part will not be added to the BOM: only the parts imported from external files will be displayed there. Overall, the top-down design approach is not favored by A2plus, as earlier [noted by kbwbe](https://forum.freecad.org/viewtopic.php?style=1&p=265666#p265666) in the FreeCAD forum:\\n\\n> Leaving PartDesign bodies within the assembly is not the intended workflow. Best way is to import everything. Converting is also not the preferred way. Even all parametrics of the parts get lost.\\n\\nUnlike Assembly 2, the A2plus workbench can also load user-selected objects from another FreeCAD project. In this case, the workbench will reference the object from the file, so FreeCAD will pick any changes made to the original project when you click the Update button.\\n\\n![Importing Objects from a FreeCAD Project File](freecad-a2plus-load-objects-from-fc-file.png)\\n\\nIn terms of general user experience, A2plus is a major improvement over Assembly 2. Here are some examples of user-visible changes:\\n\\n- When features (points, planes etc.) of multiple parts are selected, the workbench automatically makes available only the constraints that can be used with these features. This removes a lot of guesswork for new users.\\n- Imported parts can easily be opened for editing as separate documents. All edited parts then can be updated with a single click.\\n- When cleaning up an assembly, it\u2019s possible to easily delete all constraints associated with a part.\\n\\n## Features\\n\\nThe workbench has a respectable set of constraints: Point-to-Point, Point-on-Line, Point-on-Plane, Sphere-to-Sphere, Circular-Edge, Axis-to-Axis, Axis-to-Plane, Axis-Plane-Normal, Angular Axis-to-Plane, Planes-Parallelism, Planes-Coincident, Angled-Planes, Center-of-Mass. This covers a variety of use cases.\\n\\n![Constraints Available in A2plus](freecad-a2plus-constraint-options.png)\\n\\nA2plus comes with an autosolver. The way it works, however, is somewhat unreliable. Case in point: select two planes, create a Plane-Coincident constraint, solve, accept. Then select the constraint and change its Offset parameter in the Combo View. The autosolver will not update the position of the object that has the first plane, you will have to click the Solve button for this change to take effect.\\n\\nThere\u2019s a number of convenience features specific to A2plus (as compared to Assembly 2) such as placing labels on parts in the viewport for easier navigation or making parts\u2019 fills transparent.\\nThe behavior of A2plus is configurable. Settings are available in the Preferences dialog:\\n\\n![A2plus Preferences](freecad-a2plus-wb-preferences.png)\\n\\nSome features of the original Assembly 2 workbench are unavailable. Notably, the animation of the assembly for collision analysis is missing.\\n\\nThe A2plus workbench has a good [reference guide](https://wiki.freecad.org/A2plus_Workbench) on FreeCAD\u2019s wiki but lacks official tutorials that explain the workflow. The community, however, stepped up and provided a sufficient number of YouTube tutorials on using A2plus for a variety of use cases: [mechanical design](https://www.youtube.com/watch?v=tI4trcyFwvs), [woodworking](https://www.youtube.com/watch?v=rIv15hX6Isw), etc.\\n\\n**Update 2023-03-26:** There is at least [one documented case](https://forum.freecad.org/viewtopic.php?f=20&t=46024) where the precision of the A2plus solver was not sufficient to get the job done. The workbench developer [explained](https://forum.freecad.org/viewtopic.php?p=395617#p395617) this by having to find a compromise between speed (responsiveness of the WB) and accuracy due to limited calculation power available to a solver written in Python.[^1]\\n\\n[^1]: This issue was raised in community discussion\\n\\n## Consistency\\n\\nA2plus does a few things differently from many other workbenches. The most user-visible difference is how constraint settings are displayed. When a new constraint is being added, FreeCAD displays a floating dialog:\\n\\n![Constraint Properties in A2plus](freecad-a2plus-wb-constraint-settings.png)\\n\\nDouble-clicking the constraint in the project tree reopens this floating dialog. However, the very same information is displayed in the Combo View. So there\u2019s two competing approaches to editing settings of a constraint.\\n\\nSimilarly, the first button in the Constraint toolbar opens another floating window that duplicates the list of constraints that is already available in that toolbar. This is not a common (although fairly optional-to-use) UI solution for FreeCAD.\\n\\nAs already noted, some objects require a conversion to an A2plus part, like the basic 3D objects created in the Part workbench. At the same time, this assembly workbench has no problem working with parts created in e.g. SheetMetal WB.\\n\\nOne important caveat of A2plus is that it doesn\u2019t use the standard [App::Link](https://wiki.freecad.org/App_Link) machinery to reference objects in other documents. Parts added to the document this way cannot be used in an assembly. \\n\\nSome actions, like adding a part from an external file are not correctly added to the undo buffer so they cannot be reverted in the normal way.\\n\\n## Stability\\n\\nAs of publishing this overview, there are no reported crashers that aren\u2019t fixed. There haven\u2019t even been many before: the issue tracker only lists 3 bugs in A2plus that ever crashed FreeCAD, and git log likewise lists only a few fixes for crashes. However, we were able to crash the program by pressing Ctrl+Z to undo while moving a part under constraints.\\n\\nThe main developer typically responds to bug reports within the first few days. There\u2019s a small number of bug reports with mild severity from 2019 where either no detailed information was provided by the reporter, or the developer couldn\u2019t replicate the issue, or the report slipped through developer\u2019s fingers. The workbench occasionally exhibits inconsistent or glitchy behavior like failing to delete a conflicting constraint. Other than that, nothing particularly bad stands out.\\n\\n## Performance\\n\\nAssemblies are inherently complex beasts. It takes a substantial amount of talent, time, and effort to make a fast solver \u2014 a combination that not every volunteer has at their disposal. We\u2019ve definitely seen complaints like [this one](https://www.hobby-machinist.com/threads/freecad-assembly-a2plus-v0-4-54b.97301/) about performance issues in the A2plus workbench even with fairly simple assemblies. However, in our limited testing, we were unable to come up with conclusive evidence for assemblies \u201cblowing up\u201d after changes. Simple assemblies (up to 40 parts) did not represent a major issue for A2plus. But there was noticeable rendering slowdown when moving parts under constraints.\\n\\nAt least one of the reasons for possible performance issues according to the main A2plus developer is the inefficient use of memory. This is how he [explains](https://github.com/kbwbe/A2plus/issues/378#issuecomment-612878010) it and goes on to give very useful hints about ways a programmer could deal with Python limitations:\\n\\n> Memory management using Python as a programming language is not that easy and some memory leaks cannot be completely avoided. Python is keeping a lot of internal lists, which are immortal and their memory is not given back to the system during the lifetime of the program. So it is not possible to delete no more used objects from memory directly, as it is possible with \\"C/C++\\". Every object, which is not used anymore, is deleted (or sometimes it is not for various reasons), from Python\'s garbage collector.\\n> The code can only be optimized in order to reduce memory consumption. (using slots, avoiding string concatenation etc). I will have a look at this next time, where it is possible. But this is a bunch of work and will need a lot of time. And it will never be perfect.\\n\\n## Development\\n\\nThe main developer responds to proposed contributions rather fast: many PRs by drive-by contributors are merged within days of submission, sometimes on the same day. Just 1 out of 452 pull requests is sitting unapplied on GitHub.\\n\\nIn the fall of 2022, a new regular contributor joined the project. His activity now rivals that of kbwbe.\\n\\nUnlike with the original Assembly 2 workbench that had zero releases, the main developer of A2plus regularly tagged releases until November 2022 (a total of 101 tags so far). Releases mostly represent one or two bug fixes.\\n\\n## Community\\n\\nA2plus has one of the longest dedicated threads in the forum. However, since 2021, the activity of discussions has noticeably decreased: just 16 messages in the main thread in 2021, and 12 messages in 2022. The reason for this is unclear but might indicate that the interest towards the workbench has been decreasing as users move to other options.\\n\\n## Summary\\n\\nA2plus represents a major improvement over the original Assembly 2 workbench in terms of both workflow, features, and usability. It has more types of constraints, more convenience features, and better supports single-user workflows. It\u2019s also sufficiently stable and has two developers who actively merge patches from other contributors. At the same time, the workbench has some unconventional UX/UI solutions and is reportedly prone to performance issues that are not easily resolved.\\n\\n## Next up\\n\\nIn the next installment, we\u2019ll take a close look at Assembly 3, a workbench that actively uses a solver from another free/libre CAD program, SolveSpace.\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"default-assembly-workbench-2","metadata":{"permalink":"/blog/default-assembly-workbench-2","source":"@site/blog/2023-03-16/assembly-2.md","title":"Exploring the Assembly 2 workbench","description":"This is part two of our series on the need for an integrated default assembly workbench for FreeCAD. Part One gives and introduction and explains our methods. In this part, we take a closer look at Assembly 2, one of the early approaches to adding this feature set to FreeCAD.","date":"2023-03-16T00:00:00.000Z","formattedDate":"March 16, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"},{"label":"assembly","permalink":"/blog/tags/assembly"},{"label":"assembly2","permalink":"/blog/tags/assembly-2"}],"readingTime":5.5,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"default-assembly-workbench-2","title":"Exploring the Assembly 2 workbench","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development","assembly","assembly2"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"Exploring the A2plus workbench","permalink":"/blog/default-assembly-workbench-3"},"nextItem":{"title":"FreeCAD needs a default assembly workbench - Introduction","permalink":"/blog/default-assembly-workbench-1"}},"content":"This is part two of our series on the need for an integrated default assembly workbench for FreeCAD. [Part One](/blog/default-assembly-workbench-1) gives and introduction and explains our methods. In this part, we take a closer look at Assembly 2, one of the early approaches to adding this feature set to FreeCAD.\\n\\n### History\\n\\nA FreeCAD user publicly known as Hamish started this project in late 2014. This is the [original announcement](https://forum.freecad.org/viewtopic.php?style=4&t=8577):\\n\\n>I have written an assembly workbench for FreeCAD v0.15, which I am posting here for everyone\'s perusal. [...] I realize that there is mostly likely heavy development on FreeCAD\'s inbuilt assembly wb, which i could have just used for my assembly needs.\\nHowever since FreeCAD provides such an excellent environment for building custom wbs, I decided to rather write my own wb exactly tailored to my needs [...]\\nHope someone else finds the assembly2 wb useful\\n\\n2015 was the most active year for the project. However, in 2016, the original developer [stopped writing new code](https://forum.freecadweb.org/viewtopic.php?f=17&t=16591) and the next maintainer, Roland Frank, [passed away in 2017](https://forum.freecad.org/viewtopic.php?f=8&t=25673). Hamish and another contributor, kbwbe, continued merging occasional pull requests: bug fixes, a Newton solver, and a port to Python 3 to make the workbench generally supported by newer versions of FreeCAD.\\n\\n![commit graph](./freecad-assembly-2-commit-history.png)\\n*Assembly2 Commit History*\\n\\nHowever, in 2018, kbwbe started working on a [rewrite of Assembly 2](https://github.com/kbwbe/A2plus) and eventually dropped out of contributing to this workbench. There have been no changes in the git repository since 2019.\\n\\n### Workflow and ease of use\\n\\n[Assembly 2](https://github.com/hamish2014/FreeCAD_assembly2) only supports the bottom-up approach where you design and save parts as files and then import them for an assembly into a new FreeCAD project. It will read both FreeCAD, OBJ, IGES, and STEP files. The workbench expects that the user either enables the visibility of just one body in the design file or creates files with single-body parts. Sub-assemblies are possible, however.\\n\\n![Graber I3 model by Nemesis81](./freecad-assembly-2-01.png)\\n*[Graber I3 model by Nemesis81](https://github.com/Nemesis81/GraberI3_Freecad/)*\\n\\nAfter importing, spatial constraints need to be added and solved. Imported parts can be manually updated when the linked original file changes. Overall, it\u2019s a straightforward workflow: import multiple parts from respective files, select parts\u2019 features, add constraints, solve, done.\\n\\nProblems begin to arise when a change is required. Assembly 2 does not have a dynamic solver. So once you change something like a distance or an angle, you have to create a constraint anew. Moreover, only some features in the workbench support undo/redo.\\n\\n### Features\\n\\nConstraints available in Assembly 2 are limited to circular edge, plane, axial, angular (for planes), and spherical surface. There are a few tools to work with constraints like flipping their directions.\\n\\nOnce constraints are done and solved, you can animate degrees of freedom to check for clearances and collisions in any combination of their respective positions. Additionally, it\u2019s possible to check the entire assembly for overlapping parts.\\n\\nAssembly 2 also allows creating a list of parts, for which it uses the [Drawing Dimensioning](https://github.com/hamish2014/FreeCAD_drawing_dimensioning) workbench by the same original developer. Which, in return, only works with page objects created with the Drawing workbench. It\u2019s also possible to create one object from all or just the selected parts in an assembly to display them in a drawing. Notably, the [Drawing](https://wiki.freecad.org/Drawing_Workbench) workbench is now deprecated and replaced by the [TechDraw](https://wiki.freecad.org/TechDraw_Workbench) workbench.\\n\\n### Consistency\\n\\nThe way the user interface is organized is in line with the rest of FreeCAD. However, for people new to assemblies, watching a few tutorials on YouTube will be really helpful. Unfortunately, the documentation on the workbench in the FreeCAD\u2019s wiki is scarce: it only lists available features and doesn\u2019t provide any information on them that you wouldn\u2019t be able to see in the tooltips of the actual user interface.\\n\\nAssembly 2 can work with parts created in other workbenches like [SheetMetal](https://wiki.freecad.org/SheetMetal_Workbench) or parts created with \u2018importer\u2019 workbenches like [KiCadStepUp](https://wiki.freecad.org/KicadStepUp_Workbench) or [Fasteners](https://wiki.freecad.org/Fasteners_Workbench). However, because it demands just one body to be visible in an imported project and does not allow choosing which body to import, placing an entire board into an enclosure will require a lot of time and patience.\\n\\nThe workbench also doesn\u2019t follow the more recent trend of making 3rd party workbenches translatable.\\n\\n![Graber I3 model by Nemesis81](./freecad-assembly-2-02.png)\\n*[Graber I3 model by Nemesis81](https://github.com/Nemesis81/GraberI3_Freecad/)*\\n\\n### Stability\\n\\nBecause this assembly workbench is not maintained, the issue tracker has been deactivated on GitHub. So there\u2019s no aggregated information on bugs and their severity. When used with a recent version of FreeCAD, the workbench has various glitches. The general recommendation appears to be keeping a copy of an older FreeCAD version (typically, v0.16 or v0.17) around to open old files that use this assembly workbench. For new users, the recommendation is to try one of the newer assembly workbenches.\\n\\n### Performance\\n\\nDespite its simplicity, Assembly 2 can be very slow on medium-to-complex projects. One of the recommendations to deal with that is by creating [sub-assemblies](https://forum.freecad.org/viewtopic.php?p=146813#p146813): effectively saving an assembly as a FreeCAD project, then importing it to another assembly. This removes some complexity from the project but reportedly [does not solve](https://forum.freecad.org/viewtopic.php?style=4&t=26803) all performance issues.\\n\\nMoreover, the interference checker takes the simple road of trying all possible pairs, and this can go on for a very long time.\\n\\n### Development Status\\n\\nThere have never been official versioned releases of Assembly 2. Active development on this workbench ceased in 2016-2017. This workbench has been unmaintained since 2019. One of its features (list of parts) depends on another unmaintained 3rd party workbench by the same original developer, and another feature (consolidation of objects) depends on a deprecated official workbench (Drawing).\\n\\n### Summary\\nAssembly 2 is a fairly straightforward yet very barebone solution for creating assemblies. It imposes a particular way of organizing a project, has a limited set of constraints, requires either a lot of planning or a lot of manual work because of lacking a dynamic solver, relies on obsolete workbenches for some of its features, and has been unmaintained since 2019. As such, it has served its purpose well and is now generally considered superseded by A2plus, Assembly 3, and Assembly 4.\\n\\n### Next up\\n\\nIn the next installment, we\u2019ll take a close look at the major iteration of this workbench called A2plus.\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"default-assembly-workbench-1","metadata":{"permalink":"/blog/default-assembly-workbench-1","source":"@site/blog/2023-03-14/assembly-default.md","title":"FreeCAD needs a default assembly workbench - Introduction","description":"FreeCAD is an inherently modular program where major features can be developed by 3rd parties as workbenches. This is great for creating a healthy ecosystem of add-ons and catering to a diverse group of users: tinkerers, professional mechanical engineers, architects, furniture designers etc. The obvious benefit of that is that creating and deploying a solution for a particular user group does not require syncing with FreeCAD\u2019s release cycle that can be as long as a few years. Since v0.17, FreeCAD makes it very easy to install and update various workbenches developed by its passionate community.","date":"2023-03-14T00:00:00.000Z","formattedDate":"March 14, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"},{"label":"assembly","permalink":"/blog/tags/assembly"}],"readingTime":6.945,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"frontMatter":{"slug":"default-assembly-workbench-1","title":"FreeCAD needs a default assembly workbench - Introduction","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Alexandre Prokoudine","title":"Contributing Writer","url":"https://github.com/prokoudine","image_url":"https://avatars.githubusercontent.com/u/57467?v=4","imageURL":"https://avatars.githubusercontent.com/u/57467?v=4"}],"tags":["freecad","development","assembly"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"Exploring the Assembly 2 workbench","permalink":"/blog/default-assembly-workbench-2"},"nextItem":{"title":"I hire people to work on a FOSS project. Here\'s how I evaluate GitHub profiles","permalink":"/blog/evaluating-github-profile"}},"content":"FreeCAD is an inherently modular program where major features can be developed by 3rd parties as workbenches. This is great for creating a healthy ecosystem of [add-ons](https://wiki.freecad.org/Std_AddonMgr) and catering to a diverse group of users: tinkerers, professional mechanical engineers, architects, furniture designers etc. The obvious benefit of that is that creating and deploying a solution for a particular user group does not require syncing with FreeCAD\u2019s release cycle that can be as long as a few years. Since v0.17, FreeCAD makes it very easy to install and update various workbenches developed by its passionate community.\\n\\n### Why a Default Assembly Workbench?\\n\\nThe drawback of developing major features as 3rd party workbenches is that these features are not part of the out-of-box user experience and thus tend to be niche-oriented, less tested, have more bugs, lack documentation etc. Meanwhile users expect major features to be immediately available and be specialization-agnostic, easy to use, robust, performant, and well-documented.\\n\\nCreating an [assembly](https://en.wikipedia.org/wiki/Assembly_modelling) is one of those essential features. It\u2018s commonly required when designing something more complex than a simple replacement part. However in FreeCAD, this feature is only available as a separately installed workbench. In fact, there are 3 competing workbenches and 1 more workbench that has been unmaintained for almost 4 years now. And then there are several more workbenches like [Manipulator](https://wiki.freecad.org/Manipulator_Workbench) or [Part-o-magic](https://github.com/DeepSOIC/Part-o-magic), that can be used to align parts in some way.\\n\\nThis effectively means that instead of launching FreeCAD, creating an assembly, and loading parts into it for aligning, users are expected to first explore at least half a dozen options by trial and error. The expectation that this much choice is good for them seems unrealistic.\\n\\nMoreover, having this many competing solutions leads to development fragmentation, makes following tutorials confusing, and makes progress on the core slower as developers have to consider the impact on multiple approaches to assembly. Moreover, there is a strong demand for technical design tools where collaboration is easy. But collaboration implies using the same tools and standards. Having multiple competing assembly options is the opposite of that.\\n\\nOur intention is to start a broad conversation. We want to highlight the need and build consensus that a single default workbench is in the best interest of our users. We\'re also proposing criteria for evaluating the current assembly workbenches. Our goal should be to identify the best foundation and feature set required for an assembly workbench to be included in the core FreeCAD distribution. Such a solution doesn\'t need to meet everyone\'s needs. Rather, it should strive to be a general-purpose solution for at least 80% of the use-cases.\\n\\nWe do understand the implications of carrying out and publishing this research and calling for a default. Whatever default assembly workbench FreeCAD gets, it automatically moves into focus and gets more tutorials, more testing, more bug reports, more improvements etc. And the non-default workbenches will automatically get less attention and their developers will likely have to cater to more niche areas. So this requires careful treatment. Part of that is being objective when evaluating the existing options.\\n\\n### Methodology\\n\\nTo make a fair assessment, we need to settle on a set of evaluation criteria that cover most, if not all aspects. There is one important disclaimer we want to make here though: as much as maintenance and responsiveness of developers matter, we evaluate software, not people. Here is what we came up with.\\n\\n**Ease of use** It\u2019s difficult to design software that is compelling to both users who are new to solid parametric modeling and experienced users of competing products. However, it\u2019s natural to expect a workbench that has a merit of its own and provides an obvious path to creating an assembly from start to finish, with as little friction as possible. We also expect the best workbench to be efficient in team work where parts can be submitted by different users and can be iterated upon.\\n\\n**Consistency** This is a multifaceted topic. Because FreeCAD is highly modular, developers have a lot of freedom in how they implement features. Ideally, the assembly workbench should follow roughly the same UI conventions as the rest of FreeCAD. This means that a user who is already familiar with designing parts with FreeCAD should have little-to-no problems figuring out how to make assemblies. Additionally,  an assembly workbench should function well with other workbenches, including add-on workbenches. For example, it should be able to work with enclosures designed with the SheetMetal workbench. It should conform to the same standards for translation and macro scriptability as other core workbenches.\\n\\n**Features** We are looking at the set of available constraints, how picking edges, faces and other features for alignment works, how imported parts can be managed in complex assemblies etc. However, having the most features doesn\u2019t necessarily translate to the best user experience. A much better indication is how well a workbench serves the purpose it was designed for.\\n\\n**Stability** There are multiple factors at play when you evaluate stability of software. First, there\u2019s the severity of issues. You can stumble upon a warning that doesn\u2019t prevent you from accomplishing a task but is a mild annoyance. Or you can run into a crasher that loses unsaved changes or corrupts the model, which is a really bad user experience. This is not a problem for our evaluation: we can easily separate minor issues from crashers in reports.\\n\\nThen there\u2019s the number of users. If one workbench has 100 users and 10 unresolved crash reports, and another workbench has 10,000 users and also 10 unresolved bug reports, this likely means that the latter is more thoroughly tested and has less undiscovered issues. However, we have no way of knowing how many users each assembly workbench has. The amount of stars for a GitHub repository doesn\u2019t sound like a fair way to judge on popularity, especially since visiting a GitHub repository is not how you install a FreeCAD workbench these days. We can get some sense of the user base from looking at how many unique users participated in discussing this or that assembly workbench on the forum. But this should be taken with a grain of salt as this approach doesn\u2019t account for the part of users who stay in the shadows.\\n\\nAlso, reporting a bug should be simple enough. If it\u2019s too difficult to do, that\u2019s how you get bugs that continue to be unresolved for years, outside of developers\u2019 radar. Fortunately, all four assembly workbenches are hosted on GitHub and thus have the same fairly sensible UX/UI for reporting bugs. That gives us some baseline.\\nThus, given the limitations, we draw conclusions from unresolved stability issues reported to GitHub and relevant posts to the [FreeCAD Forum](https://forum.freecadweb.org/).\\n\\n**Speed** Just like with stability, it\u2019s hard enough to be a good judge of performance. Hardware specs vary wildly between users, and so does the complexity of assemblies. But if there is a significant amount of complaints about the performance in case of fairly simple assemblies (let\u2019s say, 10 to 20 parts), something is obviously wrong.\\n\\nThere is one more aspect that we considered as well and ultimately decided against \u2014 code quality and extensibility. It is important to focus on the code that needs as little effort as possible to extend the feature set and maintain it. However, all four existing workbenches are between 7,600 and 14,900 lines of code. This is perfectly manageable in terms of time spent on potential refactoring. That said, having an engaged community grown around a particular workbench and willing to take action is a lot more important. You can do anything with an experienced, passionate team.\\n\\n### What Now\\nIn the next installments, we will evaluate [Assembly2](https://wiki.freecad.org/Assembly2_Workbench), [A2plus](https://wiki.freecad.org/A2plus_Workbench), [Assembly 3](https://wiki.freecad.org/Assembly3_Workbench), and [Assembly 4](https://wiki.freecad.org/Assembly4_Workbench) by the criteria explained above. Then we will come up with a proposal and continue the discussion with the FreeCAD community.  We [invite feedback](https://github.com/orgs/Ondsel-Development/discussions/2) on this issue and our approach.\\n\\n### [Part 2: Assembly 2](https://ondsel.com/blog/default-assembly-workbench-2/)\\n\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"evaluating-github-profile","metadata":{"permalink":"/blog/evaluating-github-profile","source":"@site/blog/2023-03-02/github-profile.md","title":"I hire people to work on a FOSS project. Here\'s how I evaluate GitHub profiles","description":"Should hiring managers base a decision on someone\u2019s GitHub profile? No. But will it ever hurt to have a robust GitHub account? Also no.","date":"2023-03-02T00:00:00.000Z","formattedDate":"March 2, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":5.37,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"https://media.licdn.com/dms/image/C4D03AQGTVXyi5Pa-xg/profile-displayphoto-shrink_800_800/0/1596530840324?e=1681344000&v=beta&t=PjdEzZGYbqOsAqVWUE1bsjNuVxMsknVkZfStHx863-s","imageURL":"https://media.licdn.com/dms/image/C4D03AQGTVXyi5Pa-xg/profile-displayphoto-shrink_800_800/0/1596530840324?e=1681344000&v=beta&t=PjdEzZGYbqOsAqVWUE1bsjNuVxMsknVkZfStHx863-s"}],"frontMatter":{"slug":"evaluating-github-profile","title":"I hire people to work on a FOSS project. Here\'s how I evaluate GitHub profiles","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"https://media.licdn.com/dms/image/C4D03AQGTVXyi5Pa-xg/profile-displayphoto-shrink_800_800/0/1596530840324?e=1681344000&v=beta&t=PjdEzZGYbqOsAqVWUE1bsjNuVxMsknVkZfStHx863-s","imageURL":"https://media.licdn.com/dms/image/C4D03AQGTVXyi5Pa-xg/profile-displayphoto-shrink_800_800/0/1596530840324?e=1681344000&v=beta&t=PjdEzZGYbqOsAqVWUE1bsjNuVxMsknVkZfStHx863-s"}],"tags":["freecad","development"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"FreeCAD needs a default assembly workbench - Introduction","permalink":"/blog/default-assembly-workbench-1"},"nextItem":{"title":"Don\'t hold your breath for FreeCAD\'s topological naming fix","permalink":"/blog/freecad-topological-naming"}},"content":"Should hiring managers base a decision on someone\u2019s GitHub profile? No. But will it ever hurt to have a robust GitHub account? Also no.\\n\\nI\u2019m a hiring manager for a new open core company, and I watched the discussion under [@manuel_frigerio\u2019s tweet](https://twitter.com/manuel_frigerio/status/1629059975418089474) blow up with amusement. The debate about using people\u2019s GitHub profiles to make hiring decisions isn\u2019t new. The typical backlash ensued and Manuel has since made his tweets private. And sure, using someone\u2019s GitHub profile, particularly their contribution graph, to judge their skills as a developer is flawed.\\n\\n![unpopular tweet](./tweet.png)\\n\\n# How _not_ to evaluate a candidate based on their GitHub account\\n\\nPlenty of talented programmers are writing code that never makes it to GitHub[^1] because they\u2019re working exclusively on closed source software or have climbed the ladder to a management position. There are also plenty of bad actors who can fudge their contribution graph by \u201c[updating a readme file multiple times a day](https://twitter.com/pdtit/status/1629688787474481159)\u201d or even [faking their Git commit history](https://twitter.com/dhruvdang/status/1629269041801211905).\\n\\nThis seems obvious, but based on the discussion from last week it bears saying again: If you\u2019re a hiring manager and you\u2019re judging an applicant\u2019s skills and experience by how many green squares they have (or how dark they are), this is the most superficial way to look at it, and it won\u2019t tell you anything about whether this person makes valuable contributions or is pleasant to work with.\\n\\nBut if you\u2019re [recruiting engineers to work on an open source or open core project (as I am)](https://ondsel.com/careers/), engaging with open source is an intrinsic part of the job and someone\u2019s GitHub account gives extremely valuable insight into a candidate\u2019s suitability for that role. And if you\u2019re in the job market and don\u2019t have an active GitHub profile, you could be missing out on opportunities by overlooking FOSS.\\n\\n# What you can actually judge from someone\u2019s GitHub profile\\n\\n### Do they have exposure to FOSS at all?\\n\\nFirst, we have to acknowledge the difference between hiring for a closed-source, proprietary product and open source software: If you\u2019re a hiring manager for the former, basing your hiring decisions on someone\u2019s OSS contributions is short sighted and [could be harmful](https://about.gitlab.com/blog/2018/11/16/hiring-based-on-open-source-contributions-could-be-harmful/). (And if you\u2019re a candidate with no interest in working full time on FOSS, by all means, focus on your proprietary work instead.)\\n\\nIf however you\u2019re in the business of FOSS, and you receive applications from one candidate with a GitHub account and one without, you are going to have a lot more to go on when assessing the first. I am always going to lean towards working with people who already engage with open source in some manner and are used to working transparently and engaging with a community. Having a GitHub account and forking even one project is the bare minimum someone can do to show they have experience here. Of course that\u2019s going to influence my hiring.\\n\\n### What are their interests?\\n\\nThere are plenty of TikToks out there showing people how to optimize their resumes with keywords from the descriptions of jobs they\u2019re applying for. It\u2019s easy to stuff your CV with recruiter bait. Of course there are ways to uncover grifters in your hiring process. What is much harder to fabricate is a history of following open source projects, submitting issues, bug reports, and pull or merge requests, and engaging with communities. I\u2019m looking for team members who share [my vision for making design tools accessible](https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/) and it\u2019s much easier to establish whether someone cares about this mission if they\u2019re following and interacting with related project.\\n\\nIf you\u2019re hiring someone to do this kind of work on your project, you couldn\u2019t ask for better signal than that.\\n\\n### How do they collaborate with others?\\n\\nBeyond any code they contribute, a candidate who participates in OSS will have a history of code review, discussion, and engaging with feedback. Do they take suggestions on board, do they offer feedback and coaching to others? Sure, this requires a bit more attention than simply scanning a contribution graph, but it\u2019s hard to replicate this kind of window into a candidate\u2019s experience and conduct from interviews alone.\\n\\n### Do they have something to offer other than code?\\n\\nLet\u2019s revisit this idea of \u201cupdating a readme file\u201d reflecting in someone\u2019s GitHub graph. We\u2019ll leave aside for now that they could automate updates using a cronjob or script (which, depending on the role you\u2019re hiring for, could actually show the initiative and creativity that you\u2019re looking for). Editing and updating documentation is a contribution that takes work and initiative, and we should encourage this too. Having non-programmers participate in your open source project is valuable and we only make it more intimidating when we assign greater value to code contributions than other activities that result in green squares.\\n\\n# It\u2019s never going to hurt to have a robust GitHub contribution history\\n\\nI got applications from the US, India, Ukraine, South Africa, France, Paraguay\u2026 all over.  I found it interesting that there was a stark difference between US applicants and international ones. Almost all of the international applicants had active GitHub accounts while perhaps 1 in 15 of the US ones did. There are many reasons why this might be, including a lack of exposure to open source at schools and institutions where FOSS is not widely adopted.\\n\\nIf you\u2019re a jobseeker reading this and feeling like I\u2019m suggesting you do _more work_ because you aren\u2019t active in open source yet, then the jobs I\u2019m referring to are probably not for you. If the idea of participating in open source sounds burdensome, why would you seek out a full-time role in it anyway? If you are curious though, and want to give yourself the best chance of being considered seriously for work in FOSS, showing an active interest and engagement with projects is never going to hurt.\\n\\nTo help us make FreeCAD better and build the Ondsel product, consider [joining us](https://ondsel.com/careers/).\\n\\n\\n[^1]: Or GitLab for that matter, for the sake of brevity please assume I mean both throughout.\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"freecad-topological-naming","metadata":{"permalink":"/blog/freecad-topological-naming","source":"@site/blog/2023-02-18/freecad-topological.md","title":"Don\'t hold your breath for FreeCAD\'s topological naming fix","description":"FreeCAD\'s \'topological naming problem\' is legendary. It\'s frequently cited as the number one reason holding back widespread adoption of FreeCAD for commercial use.","date":"2023-02-18T00:00:00.000Z","formattedDate":"February 18, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":6.805,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"https://media.licdn.com/dms/image/C4D03AQGTVXyi5Pa-xg/profile-displayphoto-shrink_800_800/0/1596530840324?e=1681344000&v=beta&t=PjdEzZGYbqOsAqVWUE1bsjNuVxMsknVkZfStHx863-s","imageURL":"https://media.licdn.com/dms/image/C4D03AQGTVXyi5Pa-xg/profile-displayphoto-shrink_800_800/0/1596530840324?e=1681344000&v=beta&t=PjdEzZGYbqOsAqVWUE1bsjNuVxMsknVkZfStHx863-s"}],"frontMatter":{"slug":"freecad-topological-naming","title":"Don\'t hold your breath for FreeCAD\'s topological naming fix","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"https://media.licdn.com/dms/image/C4D03AQGTVXyi5Pa-xg/profile-displayphoto-shrink_800_800/0/1596530840324?e=1681344000&v=beta&t=PjdEzZGYbqOsAqVWUE1bsjNuVxMsknVkZfStHx863-s","imageURL":"https://media.licdn.com/dms/image/C4D03AQGTVXyi5Pa-xg/profile-displayphoto-shrink_800_800/0/1596530840324?e=1681344000&v=beta&t=PjdEzZGYbqOsAqVWUE1bsjNuVxMsknVkZfStHx863-s"}],"tags":["freecad","development"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"I hire people to work on a FOSS project. Here\'s how I evaluate GitHub profiles","permalink":"/blog/evaluating-github-profile"},"nextItem":{"title":"ChatGPT acts demonic about open-source software","permalink":"/blog/chatgpt-screwtape"}},"content":"FreeCAD\'s \'[topological naming problem](https://wiki.freecad.org/Topological_naming_problem)\' is legendary. It\'s frequently cited as the number one reason holding back widespread adoption of FreeCAD for commercial use.\\n\\nDeveloper [RealThunder](https://github.com/realthunder) introduced [a fix to the problem](https://forum.freecad.org/viewtopic.php?t=27278) years ago, but it has never been fully incorporated into the core product.\\n\\nWill FreeCAD _ever_ have a solution? Yes. But it\u2019s going to take time.\\n\\nLet\u2019s back up a bit.\\n\\n# What is topological naming, and why is it a problem in FreeCAD?\\n\\nTopological naming is the process of giving persistent names to elements of a solid model, such as faces, edges, and vertices. By naming these elements, we can attach features, dimensions, and other attributes to them.\\n\\nThe hard part of topological naming is making the names persistent even if the model is modified. Modern parametric designs are built up through a series of modifications which change the elements in the model. Faces may merge or be split. Edges may be chamfered, turning into multiple edges. If the computer is unable to maintain correct persistence of the naming\u2014even when the underlying topology changes\u2014the model breaks and recovery is difficult. [Maker Tales has a good explanation here](https://youtu.be/QSsVFu929jo?t=33).\\n\\nThe problem is ubiquitous in CAD. All applications suffer from it to some extent. The problem cannot be _solved_ in the traditional sense. It can only be mitigated and most applications do a good job of avoiding the problem by either limiting the user\u2019s actions or algorithmically tracking changes to the named features.\\n\\nThe current state of FreeCAD is weak in this regard. For simple models, the problem is fairly easy to avoid and a broken model is easy to repair. As models get more complicated, only a very disciplined approach to design will keep models intact. This requires experience that many new and casual users don\u2019t have. That is why the problem is so frustrating\u2014it bites you when you\u2019ve already invested a lot of time learning the tool and building the design.\\n\\n# RealThunder\u2019s fix works. Why not use it?\\n\\nIt seems obvious. We have a working branch of FreeCAD that isn\u2019t plagued by the topological naming problem. Why wouldn\u2019t we just merge it in and be done with it?\\n\\n\u201cThe fact that this solvable topology naming problem is so serious yet so long-standing, tells me that this is really a people problem in the FreeCAD project. Because of this, as much as I want to use it, I simply can not afford this \\"free\\" software. The community needs to push out whomever is standing in the way of progress. And crowd-source some funds to hire a pro to fix the topology-naming issue as well as do some much-needed integration work.\u201d \u2014 [agnichatian on YouTube](https://www.youtube.com/watch?v=QSsVFu929jo&lc=UgzY-2eximqNDrWgxkF4AaABAg)\\n\\nThis opinion is understandable and certainly not unusual. As much as we relate to the frustrations expressed here, it\u2019s not as simple as just merging in RealThunder\u2019s branch or bringing in one paid developer to do it once and for all. Why?\\n\\nIt\u2019s important to appreciate how pervasive feature naming is within FreeCAD\u2014or _any_ CAD. Identifying features and attaching attributes to them is what modern parametric design is all about. Implementing a solution is not a straightforward task and implementing it incorrectly would cause user models to break irreparably. Even a _properly_ implemented solution is guaranteed to have bugs and border-cases for a long time.\\n\\nFor all these reasons, the project leaders have chosen to move cautiously and to allow the solution to stabilize and be proven before merging it into the main branch.\\n\\n## Why is it so hard to merge?\\n\\nThere are two factors:\\n\\nFirst is the sheer size and number of code changes necessary to implement this solution. Many, if not most, files in FreeCAD need to be modified to incorporate the solution.\\nSecond is the pace of other development work. The rest of FreeCAD\u2019s development has only accelerated in recent years. Work is being done by many developers in many parts of the application.\\n\\nBefore new code can be merged, it has to be rebased onto the current version of source code. If there are conflicts, they have to be resolved manually. With a large, pervasive change like this, there are _always_ conflicts. By the time rebasing is complete, the master branch has moved ahead and the process has to start again.\\n\\nOne solution could be to freeze the master branch and block any further changes until the topological naming solution is merged, but this might take many months to accomplish and just isn\u2019t practical. There are many more features other developers are working on, and, more importantly, problems they are fixing. If we were to freeze the master branch in favor of one fix, other features will again have the same rebasing issue.\\n\\nOf course, users could switch to using RealThunder\u2019s branch exclusively. Some users who are particularly sensitive to the problem have done so successfully. For commercial users this may be hard to sell to leadership because RealThunder\u2019s branch isn\u2019t able to keep pace with the development of new features in the upstream FreeCAD application. They have to make a choice between relatively stable models and having access to the new and advanced features being developed throughout the rest of FreeCAD.\\n\\n# What\u2019s the path forward?\\n\\nAt the FreeCAD Day meetup in Brussels in February 2023, Ondsel and other project leaders [proposed a different strategy for resolving the issue](https://forum.freecad.org/viewtopic.php?p=658250#p658250): Instead of attempting to merge RealThunder\u2019s solution as a monolithic unit, we would, instead, consider it a proof-of-concept. The solution has been running in RealThunder\u2019s LinksStage3 branch for two years and can be considered proven. Now we need to treat it as a roadmap to guide us towards implementing the solution in FreeCAD itself without disrupting current functionality or slowing down development.\\n\\n## Progress without regression\\n\\nRather than merging the code directly, our proposal is to break the code into functional pieces, each of which can be merged directly into the master branch without breaking the current functionality. This will require additional testing at each step and might require additional code to permit the merging without regression.\\n\\nWith this approach, each piece will be merged directly to master along with the relevant unit tests. This will avoid the need for a long-lived feature branch that requires constant rebasing.  There will be no single point where suddenly the problem is \u2018fixed.\u2019 Instead the necessary changes will be merged gradually and model stability will increase over time.\\n\\n## Laying the foundation for long-term change\\n\\nThe first pieces to be merged may not provide any value to the end-user but will provide a solid foundation that later pieces can build on. As each piece is added, additional unit tests can be developed and better code conventions adopted for implementing the actual name resolution.\\n\\nThis path isn\u2019t fast. It will take time and the collective expertise of many developers. It will take cooperation throughout the community and patience from our users.\\n\\n# What is Ondsel\u2019s role in all this? Is Ondsel going to solve the toponaming problem?\\n\\nOndsel has already started a thorough survey of RealThunder\u2019s solution in order to build a roadmap for integrating it.\\n\\nOndsel will help coordinate the change and will participate in delivering a resolution. We can bring professional engineering talent to the problem but we _cannot_ do it alone. It will take time and the expertise of many software engineers across the community.\\n\\nThere\u2019s no \u201cone and done\u201d fix, which means the FreeCAD development community needs broad institutional knowledge of the solution. The toponaming problem belongs to FreeCAD and, therefore, so must the solution.\\n\\nFor more context and to follow developments as we work on breaking down and gradually merging RealThunder\u2019s fix, subscribe to [the GitHub issue](https://github.com/FreeCAD/FreeCAD/issues/8432).\\n\\nTo help us make FreeCAD better and build the Ondsel product, consider [joining us](https://ondsel.com/careers/).\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"chatgpt-screwtape","metadata":{"permalink":"/blog/chatgpt-screwtape","source":"@site/blog/2023-02-17/chatgpt-screwtape.md","title":"ChatGPT acts demonic about open-source software","description":"I recently came across an audio recording of C.S. Lewis\'s famous The Screwtape Letters read by John Cleese. It\'s excellent and made me wonder what Uncle Screwtape would think of the modern world, software development, and open-source software.  I was inspired to ask ChatGPT.  What follows is an unedited transcript.","date":"2023-02-17T00:00:00.000Z","formattedDate":"February 17, 2023","tags":[{"label":"chatGPT","permalink":"/blog/tags/chat-gpt"},{"label":"fun","permalink":"/blog/tags/fun"},{"label":"foss","permalink":"/blog/tags/foss"}],"readingTime":3.355,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://github.com/sliptonic.png","imageURL":"https://github.com/sliptonic.png"}],"frontMatter":{"slug":"chatgpt-screwtape","title":"ChatGPT acts demonic about open-source software","authors":{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://github.com/sliptonic.png","imageURL":"https://github.com/sliptonic.png"},"tags":["chatGPT","fun","foss"],"image":"/img/Ondsel_OpenGraph.jpg"},"prevItem":{"title":"Don\'t hold your breath for FreeCAD\'s topological naming fix","permalink":"/blog/freecad-topological-naming"},"nextItem":{"title":"When your Definition of Done is a barrier to contributors (and other reasons working with first-timers is hard)","permalink":"/blog/contribution-barriers"}},"content":"I recently came across an audio recording of C.S. Lewis\'s famous [_The Screwtape Letters_ read by John Cleese](https://www.youtube.com/playlist?list=PLA8BAC9375345E6C7). It\'s excellent and made me wonder what Uncle Screwtape would think of the modern world, software development, and open-source software.  I was inspired to ask [ChatGPT](https://openai.com/blog/chatgpt/).  What follows is an unedited transcript.\\n\\nI\'m not sure what impresses me more; how well it understands open-source or how well it imitates a demon!\\n\\n>![sliptonic](./sliptonic.webp) Contributors to an open-source software project need to feel appreciated. Write a paragraph in the style of \\"The Screwtape letters\\" that illustrates this point. Pretend that you are Uncle Screwtape\\n\\n>![screwtape](unclescrewtape.png) My dear Wormwood,\\n\\n>It is imperative that we do all in our power to discourage appreciation for the contributors of this open-source software project. You see, gratitude breeds contentment and a sense of fulfillment, and these are not emotions that befit those who toil in our Father Below\'s fields.\\nWe must strive to keep these contributors feeling unacknowledged, for when they feel appreciated, they are less likely to become discouraged and more likely to continue their good work. Encourage neglect, apathy, and disregard towards their contributions. Keep them from feeling valued, for when they feel valued, they are less likely to become restless and more likely to remain steadfast in their labors.\\nThe more we can sow the seeds of discontent and frustration in the hearts of these contributors, the more likely they will be to become bitter and discouraged, and the less likely they will be to continue in their contributions to this project. So let us be vigilant, my dear Wormwood, and do all in our power to undermine appreciation and cultivate discontent in these contributors.\\n\\n>Yours affectionately,\\n>\\n>Uncle Screwtape\\n\\n>![sliptonic](./sliptonic.webp) Failing to acknowledge good work also makes the contributors think the work is unimportant. Write a p.s. to the letter expressing this\\n\\n>![screwtape](unclescrewtape.png) P.S. I nearly forgot, my dear Wormwood, to mention the added benefit of neglecting to acknowledge the good work of these contributors. Failing to show appreciation for their work will not only discourage them and make them feel unvalued, but it will also make them question the importance of their work. If they believe that their contributions are insignificant and go unnoticed, they are less likely to put forth the effort and care that they would if they felt their work was valued and appreciated.\\nThus, by fostering a sense of neglect and disregard, we can effectively accomplish two of our goals at once: keep the contributors discouraged and undermine the value and importance of their work. An added bonus, don\'t you agree?\\n\\n>Yours ever more devotedly,\\n>\\n>Uncle Screwtape\\n\\n>![sliptonic](./sliptonic.webp) Assume that commercial software companies are evil. How would Screwtape explain why open-source software should be discouraged?\\n\\n>![screwtape](unclescrewtape.png) My dear Wormwood,\\n\\n>Commercial software companies, as you well know, are instruments of our Father Below, furthering his dark designs through the propagation of their products. However, the open-source software movement threatens to disrupt this grand scheme.\\nOpen-source software, with its emphasis on collaboration and community, encourages individuals to work together for the betterment of society as a whole. Such a cooperative and selfless spirit, left unchecked, can lead to the growth of goodness and light, which are anathema to our cause.\\nIt is therefore imperative that we do all in our power to discourage the development and use of open-source software. We must sow the seeds of discontent among its contributors, as I mentioned in my previous letter, and encourage selfishness and greed among its users. By doing so, we can corrupt the very spirit that gives open-source software its strength, and turn it into a tool for furthering our own dark purposes.\\nRemember, the success of open-source software is a threat to the power of commercial software companies, which are our allies in the great battle for the souls of humanity. Let us do all in our power to ensure that the threat of open-source software is neutralized, so that our Father Below may reign supreme.\\n\\n>Yours in service,\\n>\\n>Uncle Screwtape"},{"id":"contribution-barriers","metadata":{"permalink":"/blog/contribution-barriers","source":"@site/blog/2023-02-09/Definition-of-done.md","title":"When your Definition of Done is a barrier to contributors (and other reasons working with first-timers is hard)","description":"First-timers can have a hard time getting started with open source. It doesn\u2019t have to be that way.","date":"2023-02-09T00:00:00.000Z","formattedDate":"February 9, 2023","tags":[{"label":"community","permalink":"/blog/tags/community"}],"readingTime":7.055,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"https://media.licdn.com/dms/image/C4D03AQGTVXyi5Pa-xg/profile-displayphoto-shrink_800_800/0/1596530840324?e=1681344000&v=beta&t=PjdEzZGYbqOsAqVWUE1bsjNuVxMsknVkZfStHx863-s","imageURL":"https://media.licdn.com/dms/image/C4D03AQGTVXyi5Pa-xg/profile-displayphoto-shrink_800_800/0/1596530840324?e=1681344000&v=beta&t=PjdEzZGYbqOsAqVWUE1bsjNuVxMsknVkZfStHx863-s"}],"frontMatter":{"slug":"contribution-barriers","title":"When your Definition of Done is a barrier to contributors (and other reasons working with first-timers is hard)","authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},{"name":"Rebecca Dodd","title":"Contributing Writer","url":"https://www.thebasementoffice.co.uk","image_url":"https://media.licdn.com/dms/image/C4D03AQGTVXyi5Pa-xg/profile-displayphoto-shrink_800_800/0/1596530840324?e=1681344000&v=beta&t=PjdEzZGYbqOsAqVWUE1bsjNuVxMsknVkZfStHx863-s","imageURL":"https://media.licdn.com/dms/image/C4D03AQGTVXyi5Pa-xg/profile-displayphoto-shrink_800_800/0/1596530840324?e=1681344000&v=beta&t=PjdEzZGYbqOsAqVWUE1bsjNuVxMsknVkZfStHx863-s"}],"tags":["community"],"image":"./titlecard.png","draft":false},"prevItem":{"title":"ChatGPT acts demonic about open-source software","permalink":"/blog/chatgpt-screwtape"},"nextItem":{"title":"Autodesk has increased FreeCAD adoption by more than 30%","permalink":"/blog/freecad-adoption"}},"content":"_First-timers can have a hard time getting started with open source. It doesn\u2019t have to be that way._\\n\\n\\nOpen source projects are dependent on an engaged community of contributors, but fostering that community comes with its challenges. Depending on what stage an open source project is at, what the community needs from contributors changes. The good news is that intentional coaching and engagement from project maintainers can work at any stage.\\n\\nThe common gripes with getting started as a new open source contributor usually center around how welcoming the project is and how easy it is to get your contribution merged. There are a few ways that projects can make it hard (both intentionally and not). Here are some examples:\\n\\n### 1. Prickly maintainers\\n\\nImagine you submit [this pull request](https://github.com/nim-lang/Nim/pull/19211) to the Nim project:\\n\\n![PRScreenShot](./image2.png)\\n\\n\\nSeems reasonable enough, right? Check out the project maintainer\u2019s reply:\\n\\n![AngryResponse](./image1.png)\\n\\n\\nOuch. To credit Araq, this PR did eventually get merged, but it\u2019s a great illustration of how a project\u2019s culture determines its accessibility to new contributors. This PR proposed a change that would make it easier for users to engage with the project, and it was shut down (at first) pretty abruptly. \\n\\nActions like this prompted a handful of contributors to hard fork the project, creating [Nimskull](https://github.com/nim-works/nimskull). One of the new project\u2019s contributors shared their motivations:\\n\\n\u201cAt the moment we are focused on making it easier to work with the codebase - more documentation, cutting down on decades-old cruft and legacy features, unraveling mysteries of the commit messages that were written with [this attitude...](https://github.com/nim-lang/Nim/pull/19211#issuecomment-9859) (\u2018I have no intention to follow this guideline so I cannot accept it.\u2019)\u201d \u2014[haxscramper](https://news.ycombinator.com/item?id=32023998)\\n\\n\\nHard forking is one way to create the project environment you want for contributors, but it is extreme. The default perception of such a move is hostile, tending to assume that the creators don\u2019t want to work on change from within and have an ax to grind with the original project\u2019s maintainer. You can see this sentiment play out in the [Hacker News discussion about Nimskull](https://news.ycombinator.com/item?id=32021299). As one commenter pointed out though:\\n\\n\u201cIf they had tried to alter the original project to suit themselves, you would have said \u2018they can just fork if they don\'t like it\u2019\u201d \u2014[Brian_K_White](https://news.ycombinator.com/item?id=32033998)\\n\\nWhether Nimskull delivers on its promises is yet to be seen, but the example Illustrates how the maintainers and community of a project can impact contributions:\\n\\nHow easy do they make it to contribute?\\nHow clear are the requirements?\\nHow quickly are pull requests reviewed and merged?\\nHow collaborative and patient are the reviewers?\\n\\nAll of these factors influence how likely someone is to become a contributor. A hard fork that does this better can be an incentive for the original project to do better, but there are other approaches you can take which I\u2019ll explore in a moment.\\n\\n### 2. An intimidating contribution process\\n\\nBeing realistic, it\u2019s unlikely that a beginner will be submitting code to the Linux kernel. But it\u2019s a good example of how the way a project accepts contributions can encourage or discourage new folks. Submitting a patch can be extremely intimidating\u2014the [documentation](https://docs.kernel.org/process/submitting-patches.html) admits this in the very first line! It can feel like you\u2019re presenting your work to a panel of faceless judges instead of sharing it with a group of your peers.\\n\\nThe kernel development community and other projects that operate this way (such as Postgres) have their reasons, which may even include not wanting to encourage rookie contributions! I\u2019m not suggesting they change it, but for newcomers, submissions that feel more conducive to collaboration (such as a pull request) are likely to be less threatening.\\n\\n### 3. An onerous Definition of Done\\n\\n\u201cIt doesn\'t take egregious individual behavior to create a hostile environment.\u201d \u2014 Dan Luu, [How to discourage open source contributions](http://danluu.com/discourage-oss/)\\n\\nWhile early projects have few or no contributors, they may welcome almost any contribution in pursuit of building the community around the project. Even a bad contribution can lead to an interesting discussion and maybe a better idea.\\n\\nAs the project matures and the network grows, the overhead of handling contributions becomes a problem. Facing a backlog of hundreds of pull requests, projects may optimize for \u201cgood\u201d contributions by implementing more stringent requirements. I know from firsthand experience as a longtime [FreeCAD](https://www.freecad.org/) contributor. As the project grew and matured, it became harder for amateurs to contribute. The Definition of Done became more demanding (for example we needed the right test cases and code formatting) and these more stringent requirements can be off putting or prohibitive, even without intimidating maintainers.\\n\\n\u201cThe GitLab Definition of Done is now 30 items or something \u2026 so it\u2019s harder and harder for people who are just starting to contribute.\u201d \u2014 [Sid Sijbrandij](https://youtu.be/Q9SEYJb-eio), CEO and co-founder of GitLab\\n\\nThis barrier to entry illustrates the tension between what the project needs to ensure the quality of its codebase, and what\u2019s inclusive to new contributors. There is a balance to be struck between being welcoming to newcomers in your community, maintaining standards for contributions to your project, and the effort required to make the twain meet. It\u2019s not always going to be possible or advisable to reduce the requirements for getting code merged.\\n\\nYou might imagine that having the resources of a for-profit company would help, but it\u2019s no guarantee that they will invest in it. In [How to discourage open source contributions](http://danluu.com/discourage-oss/) Dan Luu shared an anonymized example of a project in which contributors get increasingly frustrated and discouraged when their PRs aren\u2019t reviewed or merged, or when they have to jump through hoops to meet requirements. Although Dan didn\u2019t put the project on blast, [Reddit users figured out what it was](https://www.reddit.com/r/programming/comments/1pczpr/how_to_discourage_open_source_contributions/): a library maintained by GitHub. We don\u2019t know why GitHub employees weren\u2019t engaging, but it demonstrates how simply having full-time staff isn\u2019t enough to ensure an active project.\\n\\nWe can see from the examples I shared that these challenges plague projects wherever they are on the spectrum, whether they\u2019re small and maintained by a handful of hobbyist contributors, large and prestigious, or stewarded by a big enterprise organization. If you want an active community where new and drive-by contributors are as welcome as your diehards (and most projects can benefit from a blend of both), you need to be intentional about fostering it.\\n\\n### How to make it easier to contribute to your project (and why it\u2019s worth the effort)\\n\\nGitLab\u2019s solution is a role called [Merge Request Coaches](https://about.gitlab.com/job-families/expert/merge-request-coach/). There is literally a line in the job description that says, \u201cMake it easy to contribute to GitLab even for people who are new to Ruby, JavaScript, Golang, etc. or programming entirely.\u201d Merge Request Coaches triage community submissions and enable new contributors by walking them through the process to meet the acceptance criteria.\\n\\nThe open core model makes it possible for companies to invest in the core project with the benefit of full-time engineers on payroll; formalizing a coach role goes a step further by making it someone\u2019s job to foster new contributors to the core. It\u2019s my hope to pursue this solution with [Ondsel](https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/), to make it easier for people to contribute to FreeCAD, on top of which Ondsel is built.\\n\\nPaying people to assist newcomers requires will and investment, which is not always possible in OSS projects run entirely by volunteers. There are examples though of volunteer coaches or mentors in open source: Kubernetes has its [Contributor Experience Special Interest Group](https://github.com/kubernetes/community/blob/master/sig-contributor-experience/README.md), which states, \u201cDeveloping and sustaining a healthy community of contributors is critical to scaling the project and growing the ecosystem.\u201d [Mentoring new contributors](https://github.com/kubernetes/community/blob/master/sig-contributor-experience/README.md#mentoring) is part of the program. The [OpenStack](https://www.openstack.org/) project also has a [mentoring program](https://docs.openstack.org/contributors/common/mentoring.html), with a cohort dedicated to helping people get their first patch merged.\\n\\nBy directing some volunteers\u2019 efforts towards coaching, they become force multipliers for the project, with an impact far beyond their own contributions. When you invest in mentoring efforts, you\u2019re not only improving the quality of the contributions, you\u2019re nurturing future contributors who are no longer adding to your overhead; now they\u2019re helping to share the load.\\n\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"freecad-adoption","metadata":{"permalink":"/blog/freecad-adoption","source":"@site/blog/2023-02-01/autodesk.md","title":"Autodesk has increased FreeCAD adoption by more than 30%","description":"When Autodesk changed their license for Fusion 360 in September of 2020 there was a collective scream from the user community. Hobbyists, YouTubers, and makers felt betrayed. Now, after more than two years, we can see the effect. Many of those people left Fusion and never looked back.","date":"2023-02-01T00:00:00.000Z","formattedDate":"February 1, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"autodesk","permalink":"/blog/tags/autodesk"},{"label":"news","permalink":"/blog/tags/news"}],"readingTime":4.5,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"}],"frontMatter":{"slug":"freecad-adoption","title":"Autodesk has increased FreeCAD adoption by more than 30%","authors":{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},"tags":["freecad","autodesk","news"],"image":"./og-starhistory.png","draft":false},"prevItem":{"title":"When your Definition of Done is a barrier to contributors (and other reasons working with first-timers is hard)","permalink":"/blog/contribution-barriers"},"nextItem":{"title":"It\u2019s Time to Dream Big \u2026 and Build: The future of FreeCAD + the first ever FreeCAD Day at FOSDEM","permalink":"/blog/dream-big"}},"content":"When Autodesk changed their license for Fusion 360 in September of 2020 there was a collective scream from the user community. Hobbyists, YouTubers, and makers felt betrayed. Now, after more than two years, we can see the effect. Many of those people left Fusion and never looked back.\\n\\n\\n\\n>>\u201c\\t\u2018I have altered the deal. Pray I do not alter it further.\u2019\\n>>\\t\u2014 Darth Vader\\n>\\n>If that\u2019s how you\u2019re going to treat the hobbyists, then goodbye forever to Fusion 360.\u201d\\n>\u2014 [solarguy2003](https://www.autodesk.com/products/fusion-360/blog/changes-to-fusion-360-for-personal-use/#comment-11741)\\n\\nOver two years ago [Autodesk imposed a number of new limitations on its free non-commercial-use license for Fusion 360](https://www.autodesk.com/products/fusion-360/blog/changes-to-fusion-360-for-personal-use/), primarily impacting hobbyist and casual users: project storage was limited, exports to a number of (critical) file types were no longer offered, and support for CAM was drastically cut back, among other restrictions. These changes felt like a slap in the face, with some members deleting their Fusion 360 accounts in protest (whether or not they were affected by the new limitations).\\n\\n### The proprietary bait and switch\\nThe changes to the license for Fusion 360 for Personal Use were a perfect illustration of the risk of making use of \u201cfree as in beer\u201d software. Many users felt betrayed and frustrated at the new limitations:\\n\\n> \u201cThe file export limitations in particular are crippling. No .step? .dxf? No extensions??? I can\'t even buy stress simulation credits? \u2026 yikes.\u201d\\n> \u2014 [raynr on Hacker News](https://news.ycombinator.com/item?id=24496171)\\n\\nSome users were not surprised, saying it was inevitable that the company would seek to monetize more of their product, even suggesting that the Fusion 360 license had been overly generous to begin with. This take undermines the exchange of benefits that takes place between vendors of free software and the communities that spring up around it:\\n\\n\u201cThink of the tens of millions of man-hours that have been invested into forum posts helping users, developing plugins, courses, YouTube videos, and Makerspace workshops that could have instead gone into making open source tools like KiCAD, OpenSCAD, pycam, etc better.\\n\\n>\\"All that work done by hobbyists, for free, helping Autodesk dominate the market in low-end CAD/CAM software.\u201d\\n>\u2014 [sfdsfsdfdsf on Hackaday.com](https://hackaday.com/2020/09/16/autodesk-announces-major-changes-to-fusion-360-personal-use-license-terms/#comment-6278789)\\n\\nWhile Autodesk maintained they were still committed to \u201cdemocratizing design for everyone,\u201d the community didn\u2019t buy it, seeing it as a bid to squeeze money out of hobbyist users after riding their coattails to market domination. As one disappointed user commented:\\n\\n\u201c... you showed that you prefer to spend money to block existing features of your software instead of improving it with new paid features. That\u2019s an indicator that you don\u2019t care about the product itself anymore, but that you are just trying to extract the maximum money out of your current users instead.\u201d\u2014 [streakycobra on Hacker News](https://news.ycombinator.com/item?id=24498013)\\n\\n### So where did disgruntled Fusion users go?\\nFusion users asked, \u201cWhat can we use instead?\u201d and the overwhelming sentiment was in favor of supporting free and open source projects that can\u2019t be bought out or taken away.\\n\\nAs a longtime contributor to FreeCAD I was happy to see it suggested often. The effect can be seen clearly in FreeCAD\u2019s [GitHub star history](https://star-history.com/#freecad/freecad&Date): the count has more than tripled since September 2020.\\n\\n![github star history](./image3.png)\\n\\nCaption: You can see a dramatic 30% star growth after Autodesk\u2019s controversial changes\\n\\nThe spike in followers for [@FreeCADNews](https://twitter.com/freecadnews) tells a story too:\\n\\n![twitter analytics](./image1.png)\\n\\n\\nAnd here\u2019s the project\u2019s [growth in contributions](https://github.com/FreeCAD/FreeCAD/graphs/contributors):\\n\\n![contribution growth](./image2.png)\\n\\nIn the 2+ years since Autodesk changed the Fusion 360 license, new communities around FreeCAD have sprung up on [LinkedIn](https://www.linkedin.com/groups/4295230/), [Reddit](https://www.reddit.com/r/FreeCAD/), and [Facebook](https://facebook.com/FreeCAD/)\u2014all with over 3,000 members.\\n\\nWe know that one of the tradeoffs with FOSS is that sometimes you might need to roll up your sleeves and contribute (time or money) towards the features and fixes you want to see. It\u2019s gratifying to see this growing community getting involved to continue developing FreeCAD into a viable Fusion alternative, without the bait-and-switch risk of proprietary solutions.\\n\\n### Where to from here?\\nI\u2019m now working full time on Ondsel, built on top of FreeCAD. While Ondsel\u2019s product set is still being defined, my vision is to improve on the FreeCAD UI to make it more accessible for non-software engineers and build the collaborative features that small businesses and enterprises can benefit from\u2014now with the resources of full-time development talent. With open core, the business model is to [monetize features based on who will use them](https://opencoreventures.com/blog/2023-01-open-core-standard-pricing-model/), with the core product remaining free and open to all. A strong core is integral to Ondsel\u2019s success, as the core features are often an onramp for casual or hobby users who grow into businesses of their own and require different features as they scale. Having a solid and active open source ecosystem around it is vital to actually democratizing design for everyone. In the coming months I\u2019ll be hiring engineers to help define this vision and build it with me, but in the meantime I [would love to hear from you](https://github.com/orgs/Ondsel-Development/discussions/1) about what you\u2019d like to see from FreeCAD and Ondsel in the future.\\n\\n\\n<details>\\n  <summary>Note...</summary>\\n  <div>\\n    <div>I\u2019m Brad Collette, longtime FreeCAD contributor and CTO of Ondsel, a new open core company built on top of FreeCAD. Ondsel helps you share useful aspects of your solid models without giving away your designs. We\u2019re working on improving collaboration and feature accessibility and integrating with your existing tools. You can read more about my vision for FreeCAD and Ondsel <a href=\\"https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/\\">here</a>\\n    </div>\\n<br/>\\n  </div>\\n</details>"},{"id":"dream-big","metadata":{"permalink":"/blog/dream-big","source":"@site/blog/2023-01-26-fosdem.md","title":"It\u2019s Time to Dream Big \u2026 and Build: The future of FreeCAD + the first ever FreeCAD Day at FOSDEM","description":"Things are changing","date":"2023-01-26T00:00:00.000Z","formattedDate":"January 26, 2023","tags":[{"label":"freecad","permalink":"/blog/tags/freecad"},{"label":"fosdem","permalink":"/blog/tags/fosdem"},{"label":"news","permalink":"/blog/tags/news"}],"readingTime":3.05,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"}],"frontMatter":{"slug":"dream-big","title":"It\u2019s Time to Dream Big \u2026 and Build: The future of FreeCAD + the first ever FreeCAD Day at FOSDEM","authors":{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},"tags":["freecad","fosdem","news"],"image":"/img/Ondsel_OpenGraph.jpg"},"prevItem":{"title":"Autodesk has increased FreeCAD adoption by more than 30%","permalink":"/blog/freecad-adoption"},"nextItem":{"title":"Hello world!","permalink":"/blog/hello-world"}},"content":"## Things are changing\\nOn August 17, 2022 the FreeCAD community celebrated its 20th anniversary as an open source project. That was an important milestone \u2026 and it passed with hardly anyone noticing. There was another important development last year and it barely got any more attention, even though it was far more consequential.\\n\\nI\'m referring to the creation of the FPA: FreeCAD Project Association. The FPA is a legal entity whose mission is to advance and protect the FreeCAD project. Besides being able to receive donations and pay for services, the FPA has a formal membership and decision making structure and this matters.\\n\\n## FreeCAD is changing\\nFor many years the FreeCAD project operated as a loose confederacy of core developers.  Decisions were made by consensus. Development moved forward when someone had an itch to scratch and the project philosophy was, \\"It\'s done when it\'s done.\\" That kind of loose government served the project pretty well. Until it didn\'t.\\n\\nAs the number of developers grew and the codebase got larger, consensus was harder to reach. Some problems defied consensus altogether. Too often, it felt like nobody was steering the ship. Many people wanted to see a clearer roadmap. They wanted leadership to address those thorny issues. Without a roadmap it was too risky for commercial companies to build around FreeCAD. Without leadership, there was no confidence that big problems would be addressed and industrial users were unwilling to adopt FreeCAD for mission-critical use.\\n\\n## Introducing the FPA\\nThe FPA was launched with modest goals. The founders wanted to avoid a heavy-handed dictatorial style. They want to encourage the kind of collaboration and consensus that has made the project productive and fun for two decades. They also recognized that FreeCAD is maturing as a project and some formal structure is necessary. I was honored to be part of that process and deeply impressed with the wisdom and care that the founders took to balance these interests.\\n\\nWhile the FPA is still finding its footing, it has already started taking steps that should have everyone excited.\\n\\nFirst, the FPA has money and the willingness to fund development. With it, they can encourage focused effort in areas where organic interest hasn\'t emerged.\\n\\nEven more importantly, the FPA is working to get developers together in the same room. Zoom, email, and issue trackers are the tools we live with and they work well for day-to-day operations. But there\'s nothing like face-to-face meetings for building trust, resolving conflict, and making long term plans. The ability to work face-to-face is one area where commercial development has a clear advantage over open source software. The FPA recognizes this and is taking steps to change it.\\n\\n## FreeCAD Day at FOSDEM\\nThe first ever \'[FreeCAD Day](https://blog.freecad.org/2023/01/04/freecad-meeting-day-2023/)\' will be held prior to FOSDEM on February 2, 2023. The day will be organized as an _unconference_. People attending the event will propose and decide what to do on premises. There will be plenty of opportunities for side discussions.\\n\\nFOSDEM brings together developers from hundreds of open source projects. It provides a fantastic opportunity to discuss collaboration opportunities with other projects, learn from their successes and from their mistakes, and meet like-minded folks.\\n\\n## Ondsel in the room\\nThe dream of building a commercial company around FreeCAD has been around for a long time. It\'s one way that developers could build not just a world-class CAD solution but their own careers. Now that Ondsel is finally launched as an open core company we are excited to partner with the FPA and the FreeCAD community at FreeCAD Day 1.0. We look forward to meeting, collaborating, dreaming, and building great things together."},{"id":"hello-world","metadata":{"permalink":"/blog/hello-world","source":"@site/blog/2023-01-03-Hello-world.md","title":"Hello world!","description":"Ondsel is Launched!","date":"2023-01-03T00:00:00.000Z","formattedDate":"January 3, 2023","tags":[{"label":"hola","permalink":"/blog/tags/hola"},{"label":"opencoreventures","permalink":"/blog/tags/opencoreventures"},{"label":"news","permalink":"/blog/tags/news"}],"readingTime":0.585,"hasTruncateMarker":false,"authors":[{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"}],"frontMatter":{"slug":"hello-world","title":"Hello world!","authors":{"name":"Brad Collette","title":"Ondsel Core Team","url":"https://github.com/sliptonic","image_url":"https://avatars.githubusercontent.com/u/538057?v=4","imageURL":"https://avatars.githubusercontent.com/u/538057?v=4"},"tags":["hola","opencoreventures","news"],"image":"/img/Ondsel_OpenGraph.jpg"},"prevItem":{"title":"It\u2019s Time to Dream Big \u2026 and Build: The future of FreeCAD + the first ever FreeCAD Day at FOSDEM","permalink":"/blog/dream-big"}},"content":"Ondsel is Launched!\\n\\nTechnically, we started life at the beginning of January 2023.  The last few weeks have had us busy with the logistics of launching; Getting a website up, activating our internal tools, and figuring out how we fit into the greater FreeCAD ecosystem. Those details are done so it\'s time to start talking about the opportunity we have.\\n\\nThe best place to start is [OpenCoreVenture](https://opencoreventures.com/)\'s official announcement [post about Ondsel](https://opencoreventures.com/blog/2023-01-ondsel-freecad-launch/)\\n\\nIn the coming weeks and months we\'ll use this blog to discuss where we\'re going and why we think it matters.  You can follow us here or on [Twitter](https://twitter.com/ondsel) or [LinkedIn](https://linkedin.com/company/ondsel)\\nWe\'re also [building our team](../../careers) and looking for passionate and talented people.\\n\\nJoin Us!"}]}')}}]);